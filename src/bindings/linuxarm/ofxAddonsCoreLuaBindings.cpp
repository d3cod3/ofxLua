/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#if defined( __WIN32__ ) || defined( _WIN32 )
	#include <cmath>
#endif



#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        } 
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member) 
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else 
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;
  
fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);
      
}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  const char *className;
  void* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  lua_getfield(L, -1, ".type");
  className = lua_tostring(L, -1);

  lua_pushfstring(L, "<%s userdata: %p>", className, userData);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */
  
  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);
  
  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));
  
  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1); 

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index); 

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);
      
      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success; 
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CreEPS swig_types[0]
#define SWIGTYPE_p_InetAddr swig_types[1]
#define SWIGTYPE_p_IplImage swig_types[2]
#define SWIGTYPE_p_TiXmlDocument swig_types[3]
#define SWIGTYPE_p__ofxOscArgType swig_types[4]
#define SWIGTYPE_p_aiAnimation swig_types[5]
#define SWIGTYPE_p_aiMesh swig_types[6]
#define SWIGTYPE_p_float swig_types[7]
#define SWIGTYPE_p_int swig_types[8]
#define SWIGTYPE_p_long_long swig_types[9]
#define SWIGTYPE_p_ofAbstractParameter swig_types[10]
#define SWIGTYPE_p_ofBaseDraws swig_types[11]
#define SWIGTYPE_p_ofBaseImage swig_types[12]
#define SWIGTYPE_p_ofBlendMode swig_types[13]
#define SWIGTYPE_p_ofBuffer swig_types[14]
#define SWIGTYPE_p_ofDefaultVec3 swig_types[15]
#define SWIGTYPE_p_ofEventT_void_t swig_types[16]
#define SWIGTYPE_p_ofFloatPixels swig_types[17]
#define SWIGTYPE_p_ofImage swig_types[18]
#define SWIGTYPE_p_ofLoopType swig_types[19]
#define SWIGTYPE_p_ofMaterial swig_types[20]
#define SWIGTYPE_p_ofMatrix4x4 swig_types[21]
#define SWIGTYPE_p_ofMesh swig_types[22]
#define SWIGTYPE_p_ofMouseEventArgs swig_types[23]
#define SWIGTYPE_p_ofParameterGroup swig_types[24]
#define SWIGTYPE_p_ofParameterT_bool_t swig_types[25]
#define SWIGTYPE_p_ofParameterT_std__string_t swig_types[26]
#define SWIGTYPE_p_ofParameterT_void_t swig_types[27]
#define SWIGTYPE_p_ofPath swig_types[28]
#define SWIGTYPE_p_ofPixels swig_types[29]
#define SWIGTYPE_p_ofPoint swig_types[30]
#define SWIGTYPE_p_ofRectangle swig_types[31]
#define SWIGTYPE_p_ofShortPixels swig_types[32]
#define SWIGTYPE_p_ofTexture swig_types[33]
#define SWIGTYPE_p_ofThread swig_types[34]
#define SWIGTYPE_p_ofVbo swig_types[35]
#define SWIGTYPE_p_ofxAssimpAnimation swig_types[36]
#define SWIGTYPE_p_ofxAssimpMeshHelper swig_types[37]
#define SWIGTYPE_p_ofxAssimpTexture swig_types[38]
#define SWIGTYPE_p_ofxBaseGui swig_types[39]
#define SWIGTYPE_p_ofxButton swig_types[40]
#define SWIGTYPE_p_ofxCvBlob swig_types[41]
#define SWIGTYPE_p_ofxCvColorImage swig_types[42]
#define SWIGTYPE_p_ofxCvContourFinder swig_types[43]
#define SWIGTYPE_p_ofxCvFloatImage swig_types[44]
#define SWIGTYPE_p_ofxCvGrayscaleImage swig_types[45]
#define SWIGTYPE_p_ofxCvHaarFinder swig_types[46]
#define SWIGTYPE_p_ofxCvImage swig_types[47]
#define SWIGTYPE_p_ofxCvShortImage swig_types[48]
#define SWIGTYPE_p_ofxGuiGroup swig_types[49]
#define SWIGTYPE_p_ofxInputFieldT_float_t swig_types[50]
#define SWIGTYPE_p_ofxInputFieldT_int_t swig_types[51]
#define SWIGTYPE_p_ofxInputFieldT_std__string_t swig_types[52]
#define SWIGTYPE_p_ofxLabel swig_types[53]
#define SWIGTYPE_p_ofxOscArg swig_types[54]
#define SWIGTYPE_p_ofxOscArgBlob swig_types[55]
#define SWIGTYPE_p_ofxOscArgBool swig_types[56]
#define SWIGTYPE_p_ofxOscArgChar swig_types[57]
#define SWIGTYPE_p_ofxOscArgDouble swig_types[58]
#define SWIGTYPE_p_ofxOscArgFloat swig_types[59]
#define SWIGTYPE_p_ofxOscArgInt swig_types[60]
#define SWIGTYPE_p_ofxOscArgInt32 swig_types[61]
#define SWIGTYPE_p_ofxOscArgInt64 swig_types[62]
#define SWIGTYPE_p_ofxOscArgMidiMessage swig_types[63]
#define SWIGTYPE_p_ofxOscArgNone swig_types[64]
#define SWIGTYPE_p_ofxOscArgRgbaColor swig_types[65]
#define SWIGTYPE_p_ofxOscArgString swig_types[66]
#define SWIGTYPE_p_ofxOscArgSymbol swig_types[67]
#define SWIGTYPE_p_ofxOscArgTimetag swig_types[68]
#define SWIGTYPE_p_ofxOscArgTrigger swig_types[69]
#define SWIGTYPE_p_ofxOscBundle swig_types[70]
#define SWIGTYPE_p_ofxOscMessage swig_types[71]
#define SWIGTYPE_p_ofxOscParameterSync swig_types[72]
#define SWIGTYPE_p_ofxOscReceiver swig_types[73]
#define SWIGTYPE_p_ofxOscReceiverSettings swig_types[74]
#define SWIGTYPE_p_ofxOscSender swig_types[75]
#define SWIGTYPE_p_ofxOscSenderSettings swig_types[76]
#define SWIGTYPE_p_ofxPanel swig_types[77]
#define SWIGTYPE_p_ofxSVG swig_types[78]
#define SWIGTYPE_p_ofxSliderT_float_t swig_types[79]
#define SWIGTYPE_p_ofxSliderT_int_t swig_types[80]
#define SWIGTYPE_p_ofxTCPClient swig_types[81]
#define SWIGTYPE_p_ofxTCPManager swig_types[82]
#define SWIGTYPE_p_ofxTCPServer swig_types[83]
#define SWIGTYPE_p_ofxTCPSettings swig_types[84]
#define SWIGTYPE_p_ofxToggle swig_types[85]
#define SWIGTYPE_p_ofxUDPManager swig_types[86]
#define SWIGTYPE_p_ofxUDPSettings swig_types[87]
#define SWIGTYPE_p_ofxVectorGraphics swig_types[88]
#define SWIGTYPE_p_ofxXmlSettings swig_types[89]
#define SWIGTYPE_p_osc__OscPacketListener swig_types[90]
#define SWIGTYPE_p_std__filesystem__path swig_types[91]
#define SWIGTYPE_p_std__shared_ptrT_aiScene_const_t swig_types[92]
#define SWIGTYPE_p_std__string swig_types[93]
#define SWIGTYPE_p_std__vectorT_aiVector3D_t swig_types[94]
#define SWIGTYPE_p_std__vectorT_ofDefaultVec3_t swig_types[95]
#define SWIGTYPE_p_std__vectorT_ofIndexType_t swig_types[96]
#define SWIGTYPE_p_std__vectorT_ofPath_t swig_types[97]
#define SWIGTYPE_p_std__vectorT_ofxCvBlob_t swig_types[98]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[99]
#define SWIGTYPE_p_unsigned_char swig_types[100]
#define SWIGTYPE_p_unsigned_int swig_types[101]
#define SWIGTYPE_p_unsigned_long_long swig_types[102]
static swig_type_info *swig_types[104];
static swig_module_info swig_module = {swig_types, 103, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "ofx"
#define SWIG_init      luaopen_ofx
#define SWIG_init_user luaopen_ofx_user

#define SWIG_LUACODE   luaopen_ofx_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


	#include "ofxAssimpModelLoader.h"
	#include "ofxGui.h"
	#include "ofxNetwork.h"
	#include "ofxOpenCv.h"
	#include "ofxOsc.h"
	#include "ofxOscParameterSync.h"
	#include "ofxSvg.h"
	#include "ofxVectorGraphics.h"
	#include "ofxXmlSettings.h"


#include <stdio.h>


#ifdef __cplusplus	/* generic alloc/dealloc fns*/
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	new TYPE[LEN]
#define SWIG_FREE_ARRAY(PTR)		delete[] PTR
#else
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	(TYPE *)malloc(LEN*sizeof(TYPE))
#define SWIG_FREE_ARRAY(PTR)		free(PTR)
#endif
/* counting the size of arrays:*/
SWIGINTERN int SWIG_itable_size(lua_State* L, int index)
{
	int n=0;
	while(1){
		lua_rawgeti(L,index,n+1);
		if (lua_isnil(L,-1))break;
		++n;
		lua_pop(L,1);
	}
	lua_pop(L,1);
	return n;
}

SWIGINTERN int SWIG_table_size(lua_State* L, int index)
{
	int n=0;
	lua_pushnil(L);  /* first key*/
	while (lua_next(L, index) != 0) {
		++n;
		lua_pop(L, 1);  /* removes `value'; keeps `key' for next iteration*/
	}
	return n;
}

/* super macro to declare array typemap helper fns */
#define SWIG_DECLARE_TYPEMAP_ARR_FN(NAME,TYPE)\
	SWIGINTERN int SWIG_read_##NAME##_num_array(lua_State* L,int index,TYPE *array,int size){\
		int i;\
		for (i = 0; i < size; i++) {\
			lua_rawgeti(L,index,i+1);\
			if (lua_isnumber(L,-1)){\
				array[i] = (TYPE)lua_tonumber(L,-1);\
			} else {\
				lua_pop(L,1);\
				return 0;\
			}\
			lua_pop(L,1);\
		}\
		return 1;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_fixed(lua_State* L, int index, int size){\
		TYPE *array;\
		if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {\
			SWIG_Lua_pushferrstring(L,"expected a table of size %d",size);\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,size)){\
			SWIG_Lua_pusherrstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_var(lua_State* L, int index, int* size)\
	{\
		TYPE *array;\
		if (!lua_istable(L,index)) {\
			SWIG_Lua_pusherrstring(L,"expected a table");\
			return 0;\
		}\
		*size=SWIG_itable_size(L,index);\
		if (*size<1){\
			SWIG_Lua_pusherrstring(L,"table appears to be empty");\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,*size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,*size)){\
			SWIG_Lua_pusherrstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN void SWIG_write_##NAME##_num_array(lua_State* L,TYPE *array,int size){\
		int i;\
		lua_newtable(L);\
		for (i = 0; i < size; i++){\
			lua_pushnumber(L,(lua_Number)array[i]);\
			lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/ \
		}\
	}

SWIG_DECLARE_TYPEMAP_ARR_FN(schar,signed char)
SWIG_DECLARE_TYPEMAP_ARR_FN(uchar,unsigned char)
SWIG_DECLARE_TYPEMAP_ARR_FN(int,int)
SWIG_DECLARE_TYPEMAP_ARR_FN(uint,unsigned int)
SWIG_DECLARE_TYPEMAP_ARR_FN(short,short)
SWIG_DECLARE_TYPEMAP_ARR_FN(ushort,unsigned short)
SWIG_DECLARE_TYPEMAP_ARR_FN(long,long)
SWIG_DECLARE_TYPEMAP_ARR_FN(ulong,unsigned long)
SWIG_DECLARE_TYPEMAP_ARR_FN(float,float)
SWIG_DECLARE_TYPEMAP_ARR_FN(double,double)

SWIGINTERN int SWIG_read_ptr_array(lua_State* L,int index,void **array,int size,swig_type_info *type){
	int i;
	for (i = 0; i < size; i++) {
		lua_rawgeti(L,index,i+1);
		if (!lua_isuserdata(L,-1) || SWIG_ConvertPtr(L,-1,&array[i],type,0)==-1){
			lua_pop(L,1);
			return 0;
		}
		lua_pop(L,1);
	}
	return 1;
}
SWIGINTERN void** SWIG_get_ptr_array_fixed(lua_State* L, int index, int size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {
		SWIG_Lua_pushferrstring(L,"expected a table of size %d",size);
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,size);
	if (!SWIG_read_ptr_array(L,index,array,size,type)){
		SWIG_Lua_pushferrstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void** SWIG_get_ptr_array_var(lua_State* L, int index, int* size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index)) {
		SWIG_Lua_pusherrstring(L,"expected a table");
		return 0;
	}
	*size=SWIG_itable_size(L,index);
	if (*size<1){
		SWIG_Lua_pusherrstring(L,"table appears to be empty");
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,*size);
	if (!SWIG_read_ptr_array(L,index,array,*size,type)){
		SWIG_Lua_pushferrstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void SWIG_write_ptr_array(lua_State* L,void **array,int size,swig_type_info *type,int own){
	int i;
	lua_newtable(L);
	for (i = 0; i < size; i++){
		SWIG_NewPointerObj(L,array[i],type,own);
		lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/
	}
}


#include <typeinfo>
#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <typeinfo>
#include <stdexcept>


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <vector>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>


#include <boost/filesystem.hpp>

SWIGINTERN char const *ofxOscMessage___str__(ofxOscMessage *self){
		static char str[255]; // provide a valid return pointer
		std::stringstream stream;
		stream << self->getAddress();
		for(int i = 0; i < self->getNumArgs(); ++i) {
			stream << " ";
			switch(self->getArgType(i)) {
				case OFXOSC_TYPE_INT32:
					stream << self->getArgAsInt32(i);
					break;
				case OFXOSC_TYPE_INT64:
					stream << self->getArgAsInt64(i);
					break;
				case OFXOSC_TYPE_FLOAT:
					stream << self->getArgAsFloat(i);
					break;
				case OFXOSC_TYPE_DOUBLE:
					stream << self->getArgAsDouble(i);
					break;
				case OFXOSC_TYPE_STRING:
					stream << self->getArgAsString(i);
					break;
				case OFXOSC_TYPE_SYMBOL:
					stream << self->getArgAsSymbol(i);
					break;
				case OFXOSC_TYPE_CHAR:
					stream << self->getArgAsChar(i);
					break;
				case OFXOSC_TYPE_MIDI_MESSAGE:
					stream << ofToHex(self->getArgAsMidiMessage(i));
					break;
				case OFXOSC_TYPE_TRUE:
					stream << "T";
					break;
				case OFXOSC_TYPE_FALSE:
					stream << "F";
					break;
				case OFXOSC_TYPE_NONE:
					stream << "NONE";
					break;
				case OFXOSC_TYPE_TRIGGER:
					stream << "TRIGGER";
					break;
				case OFXOSC_TYPE_TIMETAG:
					stream << "TIMETAG";
					break;
				case OFXOSC_TYPE_BLOB:
					stream << "BLOB";
					break;
				case OFXOSC_TYPE_RGBA_COLOR:
					stream << ofToHex(self->getArgAsRgbaColor(i));
					break;
				default:
					break;
			}
		}
		sprintf(str, "%.255s", stream.str().c_str()); // copy & restrict length
		return str;
	}
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("std::string::string",0,0) result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_string__SWIG_1(lua_State* L) { int SWIG_arg = 0; char *arg1 = (char *) 0 ; std::string *result = 0 ;
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_string(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);}  if (argc == 1) { int _v; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) {
      return _wrap_new_string__SWIG_1(L);}  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
  "  Possible C/C++ prototypes are:\n" "    std::string::string()\n" "    std::string::string(char const *)\n");
  lua_error(L);return 0; }
static int _wrap_string_size(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; unsigned int result;
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string); }  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_length(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; unsigned int result;
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string); }  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_empty(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; bool result;
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string); }  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_c_str(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; char *result = 0 ;
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string); }  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_data(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; char *result = 0 ;
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string); }  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_assign(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ; SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string); }  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "size", _wrap_string_size},
    { "length", _wrap_string_length},
    { "empty", _wrap_string_empty},
    { "c_str", _wrap_string_c_str},
    { "data", _wrap_string_data},
    { "assign", _wrap_string_assign},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_new_path__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::filesystem::path *result = 0 ;
  SWIG_check_num_args("std::filesystem::path::path",0,0) result = (std::filesystem::path *)new std::filesystem::path();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__filesystem__path,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_path__SWIG_1(lua_State* L) { int SWIG_arg = 0; char *arg1 = (char *) 0 ;
  std::filesystem::path *result = 0 ; SWIG_check_num_args("std::filesystem::path::path",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::filesystem::path::path",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1); result = (std::filesystem::path *)new std::filesystem::path((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__filesystem__path,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_path(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_path__SWIG_0(L);}  if (argc == 1) { int _v; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) {
      return _wrap_new_path__SWIG_1(L);}  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_path'\n"
  "  Possible C/C++ prototypes are:\n" "    std::filesystem::path::path()\n" "    std::filesystem::path::path(char const *)\n");
  lua_error(L);return 0; }
static int _wrap_path_string(lua_State* L) { int SWIG_arg = 0; std::filesystem::path *arg1 = (std::filesystem::path *) 0 ;
  std::string result; SWIG_check_num_args("std::filesystem::path::string",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::filesystem::path::string",1,"std::filesystem::path const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__filesystem__path,0))){
    SWIG_fail_ptr("path_string",1,SWIGTYPE_p_std__filesystem__path); } 
  result = ((std::filesystem::path const *)arg1)->string(); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_path(void *obj) {
std::filesystem::path *arg1 = (std::filesystem::path *) obj;
delete arg1;
}
static int _proxy__wrap_new_path(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_path);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_path_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_path_methods[]= {
    { "string", _wrap_path_string},
    {0,0}
};
static swig_lua_method swig_path_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_path_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_path_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_path_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_path_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_path_Sf_SwigStatic = {
    "path",
    swig_path_Sf_SwigStatic_methods,
    swig_path_Sf_SwigStatic_attributes,
    swig_path_Sf_SwigStatic_constants,
    swig_path_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_path_bases[] = {0};
static const char *swig_path_base_names[] = {0};
static swig_lua_class _wrap_class_path = { "path", "path", &SWIGTYPE_p_std__filesystem__path,_proxy__wrap_new_path, swig_delete_path, swig_path_methods, swig_path_attributes, &swig_path_Sf_SwigStatic, swig_path_meta, swig_path_bases, swig_path_base_names };

static int _wrap_new_AssimpMeshHelper(lua_State* L) { int SWIG_arg = 0; ofxAssimpMeshHelper *result = 0 ;
  SWIG_check_num_args("ofxAssimpMeshHelper::ofxAssimpMeshHelper",0,0) result = (ofxAssimpMeshHelper *)new ofxAssimpMeshHelper();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxAssimpMeshHelper,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_hasTexture(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; bool result;
  SWIG_check_num_args("ofxAssimpMeshHelper::hasTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::hasTexture",1,"ofxAssimpMeshHelper *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_hasTexture",1,SWIGTYPE_p_ofxAssimpMeshHelper); }  result = (bool)(arg1)->hasTexture();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_getTextureRef(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofxAssimpMeshHelper::getTextureRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::getTextureRef",1,"ofxAssimpMeshHelper *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_getTextureRef",1,SWIGTYPE_p_ofxAssimpMeshHelper); } 
  result = (ofTexture *) &(arg1)->getTextureRef(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_mesh_set(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; aiMesh *arg2 = (aiMesh *) 0 ;
  SWIG_check_num_args("ofxAssimpMeshHelper::mesh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::mesh",1,"ofxAssimpMeshHelper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxAssimpMeshHelper::mesh",2,"aiMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_mesh_set",1,SWIGTYPE_p_ofxAssimpMeshHelper); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_aiMesh,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("AssimpMeshHelper_mesh_set",2,SWIGTYPE_p_aiMesh); }  if (arg1) (arg1)->mesh = arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_mesh_get(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; aiMesh *result = 0 ;
  SWIG_check_num_args("ofxAssimpMeshHelper::mesh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::mesh",1,"ofxAssimpMeshHelper *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_mesh_get",1,SWIGTYPE_p_ofxAssimpMeshHelper); }  result = (aiMesh *) ((arg1)->mesh);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_aiMesh,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_AssimpMeshHelper_vbo_set(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; ofVbo arg2 ; ofVbo *argp2 ;
  SWIG_check_num_args("ofxAssimpMeshHelper::vbo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::vbo",1,"ofxAssimpMeshHelper *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxAssimpMeshHelper::vbo",2,"ofVbo");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_vbo_set",1,SWIGTYPE_p_ofxAssimpMeshHelper); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("AssimpMeshHelper_vbo_set",2,SWIGTYPE_p_ofVbo); }  arg2 = *argp2; if (arg1) (arg1)->vbo = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_vbo_get(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; ofVbo result; SWIG_check_num_args("ofxAssimpMeshHelper::vbo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::vbo",1,"ofxAssimpMeshHelper *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_vbo_get",1,SWIGTYPE_p_ofxAssimpMeshHelper); }  result =  ((arg1)->vbo); {
    ofVbo * resultptr = new ofVbo((const ofVbo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVbo,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_assimpTexture_set(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; ofxAssimpTexture *arg2 = (ofxAssimpTexture *) 0 ;
  SWIG_check_num_args("ofxAssimpMeshHelper::assimpTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::assimpTexture",1,"ofxAssimpMeshHelper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxAssimpMeshHelper::assimpTexture",2,"ofxAssimpTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_assimpTexture_set",1,SWIGTYPE_p_ofxAssimpMeshHelper); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxAssimpTexture,0))){
    SWIG_fail_ptr("AssimpMeshHelper_assimpTexture_set",2,SWIGTYPE_p_ofxAssimpTexture); } 
  if (arg1) (arg1)->assimpTexture = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_assimpTexture_get(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; ofxAssimpTexture *result = 0 ;
  SWIG_check_num_args("ofxAssimpMeshHelper::assimpTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::assimpTexture",1,"ofxAssimpMeshHelper *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_assimpTexture_get",1,SWIGTYPE_p_ofxAssimpMeshHelper); } 
  result = (ofxAssimpTexture *)& ((arg1)->assimpTexture);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxAssimpTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_AssimpMeshHelper_indices_set(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; std::vector< ofIndexType > *arg2 = (std::vector< ofIndexType > *) 0 ;
  SWIG_check_num_args("ofxAssimpMeshHelper::indices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::indices",1,"ofxAssimpMeshHelper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxAssimpMeshHelper::indices",2,"std::vector< ofIndexType > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_indices_set",1,SWIGTYPE_p_ofxAssimpMeshHelper); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofIndexType_t,0))){
    SWIG_fail_ptr("AssimpMeshHelper_indices_set",2,SWIGTYPE_p_std__vectorT_ofIndexType_t); }  if (arg1) (arg1)->indices = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_indices_get(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; std::vector< ofIndexType > *result = 0 ;
  SWIG_check_num_args("ofxAssimpMeshHelper::indices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::indices",1,"ofxAssimpMeshHelper *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_indices_get",1,SWIGTYPE_p_ofxAssimpMeshHelper); } 
  result = (std::vector< ofIndexType > *)& ((arg1)->indices);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofIndexType_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_material_set(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; ofMaterial arg2 ; ofMaterial *argp2 ;
  SWIG_check_num_args("ofxAssimpMeshHelper::material",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::material",1,"ofxAssimpMeshHelper *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxAssimpMeshHelper::material",2,"ofMaterial");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_material_set",1,SWIGTYPE_p_ofxAssimpMeshHelper); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("AssimpMeshHelper_material_set",2,SWIGTYPE_p_ofMaterial); }  arg2 = *argp2; if (arg1) (arg1)->material = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_material_get(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; ofMaterial result;
  SWIG_check_num_args("ofxAssimpMeshHelper::material",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::material",1,"ofxAssimpMeshHelper *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_material_get",1,SWIGTYPE_p_ofxAssimpMeshHelper); }  result =  ((arg1)->material); {
    ofMaterial * resultptr = new ofMaterial((const ofMaterial &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMaterial,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_blendMode_set(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; ofBlendMode arg2 ; ofBlendMode *argp2 ;
  SWIG_check_num_args("ofxAssimpMeshHelper::blendMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::blendMode",1,"ofxAssimpMeshHelper *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxAssimpMeshHelper::blendMode",2,"ofBlendMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_blendMode_set",1,SWIGTYPE_p_ofxAssimpMeshHelper); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofBlendMode,0))){
    SWIG_fail_ptr("AssimpMeshHelper_blendMode_set",2,SWIGTYPE_p_ofBlendMode); }  arg2 = *argp2;
  if (arg1) (arg1)->blendMode = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_blendMode_get(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; ofBlendMode result;
  SWIG_check_num_args("ofxAssimpMeshHelper::blendMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::blendMode",1,"ofxAssimpMeshHelper *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_blendMode_get",1,SWIGTYPE_p_ofxAssimpMeshHelper); }  result =  ((arg1)->blendMode); {
    ofBlendMode * resultptr = new ofBlendMode((const ofBlendMode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofBlendMode,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_twoSided_set(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; bool arg2 ; SWIG_check_num_args("ofxAssimpMeshHelper::twoSided",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::twoSided",1,"ofxAssimpMeshHelper *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxAssimpMeshHelper::twoSided",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_twoSided_set",1,SWIGTYPE_p_ofxAssimpMeshHelper); }  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->twoSided = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_twoSided_get(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; bool result; SWIG_check_num_args("ofxAssimpMeshHelper::twoSided",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::twoSided",1,"ofxAssimpMeshHelper *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_twoSided_get",1,SWIGTYPE_p_ofxAssimpMeshHelper); }  result = (bool) ((arg1)->twoSided);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_hasChanged_set(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; bool arg2 ; SWIG_check_num_args("ofxAssimpMeshHelper::hasChanged",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::hasChanged",1,"ofxAssimpMeshHelper *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxAssimpMeshHelper::hasChanged",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_hasChanged_set",1,SWIGTYPE_p_ofxAssimpMeshHelper); }  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->hasChanged = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_hasChanged_get(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; bool result;
  SWIG_check_num_args("ofxAssimpMeshHelper::hasChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::hasChanged",1,"ofxAssimpMeshHelper *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_hasChanged_get",1,SWIGTYPE_p_ofxAssimpMeshHelper); }  result = (bool) ((arg1)->hasChanged);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_animatedPos_set(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; std::vector< aiVector3D > *arg2 = (std::vector< aiVector3D > *) 0 ;
  SWIG_check_num_args("ofxAssimpMeshHelper::animatedPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::animatedPos",1,"ofxAssimpMeshHelper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxAssimpMeshHelper::animatedPos",2,"std::vector< aiVector3D > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_animatedPos_set",1,SWIGTYPE_p_ofxAssimpMeshHelper); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_aiVector3D_t,0))){
    SWIG_fail_ptr("AssimpMeshHelper_animatedPos_set",2,SWIGTYPE_p_std__vectorT_aiVector3D_t); } 
  if (arg1) (arg1)->animatedPos = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_animatedPos_get(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; std::vector< aiVector3D > *result = 0 ;
  SWIG_check_num_args("ofxAssimpMeshHelper::animatedPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::animatedPos",1,"ofxAssimpMeshHelper *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_animatedPos_get",1,SWIGTYPE_p_ofxAssimpMeshHelper); } 
  result = (std::vector< aiVector3D > *)& ((arg1)->animatedPos);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_aiVector3D_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_animatedNorm_set(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; std::vector< aiVector3D > *arg2 = (std::vector< aiVector3D > *) 0 ;
  SWIG_check_num_args("ofxAssimpMeshHelper::animatedNorm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::animatedNorm",1,"ofxAssimpMeshHelper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxAssimpMeshHelper::animatedNorm",2,"std::vector< aiVector3D > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_animatedNorm_set",1,SWIGTYPE_p_ofxAssimpMeshHelper); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_aiVector3D_t,0))){
    SWIG_fail_ptr("AssimpMeshHelper_animatedNorm_set",2,SWIGTYPE_p_std__vectorT_aiVector3D_t); } 
  if (arg1) (arg1)->animatedNorm = *arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_animatedNorm_get(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; std::vector< aiVector3D > *result = 0 ;
  SWIG_check_num_args("ofxAssimpMeshHelper::animatedNorm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::animatedNorm",1,"ofxAssimpMeshHelper *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_animatedNorm_get",1,SWIGTYPE_p_ofxAssimpMeshHelper); } 
  result = (std::vector< aiVector3D > *)& ((arg1)->animatedNorm);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_aiVector3D_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_cachedMesh_set(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; ofMesh arg2 ; ofMesh *argp2 ;
  SWIG_check_num_args("ofxAssimpMeshHelper::cachedMesh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::cachedMesh",1,"ofxAssimpMeshHelper *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxAssimpMeshHelper::cachedMesh",2,"ofMesh");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_cachedMesh_set",1,SWIGTYPE_p_ofxAssimpMeshHelper); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("AssimpMeshHelper_cachedMesh_set",2,SWIGTYPE_p_ofMesh); }  arg2 = *argp2; if (arg1) (arg1)->cachedMesh = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_cachedMesh_get(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; ofMesh result;
  SWIG_check_num_args("ofxAssimpMeshHelper::cachedMesh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::cachedMesh",1,"ofxAssimpMeshHelper *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_cachedMesh_get",1,SWIGTYPE_p_ofxAssimpMeshHelper); }  result =  ((arg1)->cachedMesh); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_validCache_set(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; bool arg2 ; SWIG_check_num_args("ofxAssimpMeshHelper::validCache",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::validCache",1,"ofxAssimpMeshHelper *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxAssimpMeshHelper::validCache",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_validCache_set",1,SWIGTYPE_p_ofxAssimpMeshHelper); }  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->validCache = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_validCache_get(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; bool result;
  SWIG_check_num_args("ofxAssimpMeshHelper::validCache",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::validCache",1,"ofxAssimpMeshHelper *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_validCache_get",1,SWIGTYPE_p_ofxAssimpMeshHelper); }  result = (bool) ((arg1)->validCache);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_matrix_set(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; ofMatrix4x4 arg2 ; ofMatrix4x4 *argp2 ;
  SWIG_check_num_args("ofxAssimpMeshHelper::matrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::matrix",1,"ofxAssimpMeshHelper *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxAssimpMeshHelper::matrix",2,"ofMatrix4x4");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_matrix_set",1,SWIGTYPE_p_ofxAssimpMeshHelper); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("AssimpMeshHelper_matrix_set",2,SWIGTYPE_p_ofMatrix4x4); }  arg2 = *argp2; if (arg1) (arg1)->matrix = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpMeshHelper_matrix_get(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) 0 ; ofMatrix4x4 result;
  SWIG_check_num_args("ofxAssimpMeshHelper::matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpMeshHelper::matrix",1,"ofxAssimpMeshHelper *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpMeshHelper,0))){
    SWIG_fail_ptr("AssimpMeshHelper_matrix_get",1,SWIGTYPE_p_ofxAssimpMeshHelper); }  result =  ((arg1)->matrix); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_AssimpMeshHelper(void *obj) {
ofxAssimpMeshHelper *arg1 = (ofxAssimpMeshHelper *) obj;
delete arg1;
}
static int _proxy__wrap_new_AssimpMeshHelper(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AssimpMeshHelper);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AssimpMeshHelper_attributes[] = {
    { "mesh", _wrap_AssimpMeshHelper_mesh_get, _wrap_AssimpMeshHelper_mesh_set },
    { "vbo", _wrap_AssimpMeshHelper_vbo_get, _wrap_AssimpMeshHelper_vbo_set },
    { "assimpTexture", _wrap_AssimpMeshHelper_assimpTexture_get, _wrap_AssimpMeshHelper_assimpTexture_set },
    { "indices", _wrap_AssimpMeshHelper_indices_get, _wrap_AssimpMeshHelper_indices_set },
    { "material", _wrap_AssimpMeshHelper_material_get, _wrap_AssimpMeshHelper_material_set },
    { "blendMode", _wrap_AssimpMeshHelper_blendMode_get, _wrap_AssimpMeshHelper_blendMode_set },
    { "twoSided", _wrap_AssimpMeshHelper_twoSided_get, _wrap_AssimpMeshHelper_twoSided_set },
    { "hasChanged", _wrap_AssimpMeshHelper_hasChanged_get, _wrap_AssimpMeshHelper_hasChanged_set },
    { "animatedPos", _wrap_AssimpMeshHelper_animatedPos_get, _wrap_AssimpMeshHelper_animatedPos_set },
    { "animatedNorm", _wrap_AssimpMeshHelper_animatedNorm_get, _wrap_AssimpMeshHelper_animatedNorm_set },
    { "cachedMesh", _wrap_AssimpMeshHelper_cachedMesh_get, _wrap_AssimpMeshHelper_cachedMesh_set },
    { "validCache", _wrap_AssimpMeshHelper_validCache_get, _wrap_AssimpMeshHelper_validCache_set },
    { "matrix", _wrap_AssimpMeshHelper_matrix_get, _wrap_AssimpMeshHelper_matrix_set },
    {0,0,0}
};
static swig_lua_method swig_AssimpMeshHelper_methods[]= {
    { "hasTexture", _wrap_AssimpMeshHelper_hasTexture},
    { "getTextureRef", _wrap_AssimpMeshHelper_getTextureRef},
    {0,0}
};
static swig_lua_method swig_AssimpMeshHelper_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AssimpMeshHelper_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AssimpMeshHelper_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AssimpMeshHelper_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AssimpMeshHelper_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AssimpMeshHelper_Sf_SwigStatic = {
    "AssimpMeshHelper",
    swig_AssimpMeshHelper_Sf_SwigStatic_methods,
    swig_AssimpMeshHelper_Sf_SwigStatic_attributes,
    swig_AssimpMeshHelper_Sf_SwigStatic_constants,
    swig_AssimpMeshHelper_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AssimpMeshHelper_bases[] = {0};
static const char *swig_AssimpMeshHelper_base_names[] = {0};
static swig_lua_class _wrap_class_AssimpMeshHelper = { "AssimpMeshHelper", "AssimpMeshHelper", &SWIGTYPE_p_ofxAssimpMeshHelper,_proxy__wrap_new_AssimpMeshHelper, swig_delete_AssimpMeshHelper, swig_AssimpMeshHelper_methods, swig_AssimpMeshHelper_attributes, &swig_AssimpMeshHelper_Sf_SwigStatic, swig_AssimpMeshHelper_meta, swig_AssimpMeshHelper_bases, swig_AssimpMeshHelper_base_names };

static int _wrap_new_AssimpAnimation(lua_State* L) { int SWIG_arg = 0; std::shared_ptr< aiScene const > arg1 ;
  aiAnimation *arg2 = (aiAnimation *) 0 ; std::shared_ptr< aiScene const > *argp1 ; ofxAssimpAnimation *result = 0 ;
  SWIG_check_num_args("ofxAssimpAnimation::ofxAssimpAnimation",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxAssimpAnimation::ofxAssimpAnimation",1,"std::shared_ptr< aiScene const >");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxAssimpAnimation::ofxAssimpAnimation",2,"aiAnimation *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__shared_ptrT_aiScene_const_t,0))){
    SWIG_fail_ptr("new_AssimpAnimation",1,SWIGTYPE_p_std__shared_ptrT_aiScene_const_t); }  arg1 = *argp1;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_aiAnimation,0))){
    SWIG_fail_ptr("new_AssimpAnimation",2,SWIGTYPE_p_aiAnimation); } 
  result = (ofxAssimpAnimation *)new ofxAssimpAnimation(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxAssimpAnimation,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_AssimpAnimation_getAnimation(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; aiAnimation *result = 0 ;
  SWIG_check_num_args("ofxAssimpAnimation::getAnimation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::getAnimation",1,"ofxAssimpAnimation *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
    SWIG_fail_ptr("AssimpAnimation_getAnimation",1,SWIGTYPE_p_ofxAssimpAnimation); } 
  result = (aiAnimation *)(arg1)->getAnimation(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_aiAnimation,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpAnimation_update(lua_State* L) { int SWIG_arg = 0; ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ;
  SWIG_check_num_args("ofxAssimpAnimation::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::update",1,"ofxAssimpAnimation *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
    SWIG_fail_ptr("AssimpAnimation_update",1,SWIGTYPE_p_ofxAssimpAnimation); }  (arg1)->update(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpAnimation_play(lua_State* L) { int SWIG_arg = 0; ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ;
  SWIG_check_num_args("ofxAssimpAnimation::play",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::play",1,"ofxAssimpAnimation *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
    SWIG_fail_ptr("AssimpAnimation_play",1,SWIGTYPE_p_ofxAssimpAnimation); }  (arg1)->play(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpAnimation_stop(lua_State* L) { int SWIG_arg = 0; ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ;
  SWIG_check_num_args("ofxAssimpAnimation::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::stop",1,"ofxAssimpAnimation *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
    SWIG_fail_ptr("AssimpAnimation_stop",1,SWIGTYPE_p_ofxAssimpAnimation); }  (arg1)->stop(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpAnimation_reset(lua_State* L) { int SWIG_arg = 0; ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ;
  SWIG_check_num_args("ofxAssimpAnimation::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::reset",1,"ofxAssimpAnimation *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
    SWIG_fail_ptr("AssimpAnimation_reset",1,SWIGTYPE_p_ofxAssimpAnimation); }  (arg1)->reset(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpAnimation_isFrameNew(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; bool result; SWIG_check_num_args("ofxAssimpAnimation::isFrameNew",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::isFrameNew",1,"ofxAssimpAnimation *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
    SWIG_fail_ptr("AssimpAnimation_isFrameNew",1,SWIGTYPE_p_ofxAssimpAnimation); }  result = (bool)(arg1)->isFrameNew();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpAnimation_isPaused(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; bool result; SWIG_check_num_args("ofxAssimpAnimation::isPaused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::isPaused",1,"ofxAssimpAnimation *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
    SWIG_fail_ptr("AssimpAnimation_isPaused",1,SWIGTYPE_p_ofxAssimpAnimation); }  result = (bool)(arg1)->isPaused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpAnimation_isPlaying(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; bool result; SWIG_check_num_args("ofxAssimpAnimation::isPlaying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::isPlaying",1,"ofxAssimpAnimation *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
    SWIG_fail_ptr("AssimpAnimation_isPlaying",1,SWIGTYPE_p_ofxAssimpAnimation); }  result = (bool)(arg1)->isPlaying();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpAnimation_isFinished(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; bool result; SWIG_check_num_args("ofxAssimpAnimation::isFinished",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::isFinished",1,"ofxAssimpAnimation *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
    SWIG_fail_ptr("AssimpAnimation_isFinished",1,SWIGTYPE_p_ofxAssimpAnimation); }  result = (bool)(arg1)->isFinished();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpAnimation_getPosition(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; float result; SWIG_check_num_args("ofxAssimpAnimation::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::getPosition",1,"ofxAssimpAnimation *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
    SWIG_fail_ptr("AssimpAnimation_getPosition",1,SWIGTYPE_p_ofxAssimpAnimation); }  result = (float)(arg1)->getPosition();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpAnimation_getPositionInSeconds(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; float result;
  SWIG_check_num_args("ofxAssimpAnimation::getPositionInSeconds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::getPositionInSeconds",1,"ofxAssimpAnimation *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
    SWIG_fail_ptr("AssimpAnimation_getPositionInSeconds",1,SWIGTYPE_p_ofxAssimpAnimation); } 
  result = (float)(arg1)->getPositionInSeconds(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpAnimation_getPositionInMilliSeconds(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; int result;
  SWIG_check_num_args("ofxAssimpAnimation::getPositionInMilliSeconds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::getPositionInMilliSeconds",1,"ofxAssimpAnimation *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
    SWIG_fail_ptr("AssimpAnimation_getPositionInMilliSeconds",1,SWIGTYPE_p_ofxAssimpAnimation); } 
  result = (int)(arg1)->getPositionInMilliSeconds(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpAnimation_getSpeed(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; float result; SWIG_check_num_args("ofxAssimpAnimation::getSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::getSpeed",1,"ofxAssimpAnimation *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
    SWIG_fail_ptr("AssimpAnimation_getSpeed",1,SWIGTYPE_p_ofxAssimpAnimation); }  result = (float)(arg1)->getSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpAnimation_getDurationInSeconds(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; float result;
  SWIG_check_num_args("ofxAssimpAnimation::getDurationInSeconds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::getDurationInSeconds",1,"ofxAssimpAnimation *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
    SWIG_fail_ptr("AssimpAnimation_getDurationInSeconds",1,SWIGTYPE_p_ofxAssimpAnimation); } 
  result = (float)(arg1)->getDurationInSeconds(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpAnimation_getDurationInMilliSeconds(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; int result;
  SWIG_check_num_args("ofxAssimpAnimation::getDurationInMilliSeconds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::getDurationInMilliSeconds",1,"ofxAssimpAnimation *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
    SWIG_fail_ptr("AssimpAnimation_getDurationInMilliSeconds",1,SWIGTYPE_p_ofxAssimpAnimation); } 
  result = (int)(arg1)->getDurationInMilliSeconds(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpAnimation_setPaused(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; bool arg2 ; SWIG_check_num_args("ofxAssimpAnimation::setPaused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::setPaused",1,"ofxAssimpAnimation *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxAssimpAnimation::setPaused",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
    SWIG_fail_ptr("AssimpAnimation_setPaused",1,SWIGTYPE_p_ofxAssimpAnimation); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setPaused(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpAnimation_setPosition(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; float arg2 ; SWIG_check_num_args("ofxAssimpAnimation::setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::setPosition",1,"ofxAssimpAnimation *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpAnimation::setPosition",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
    SWIG_fail_ptr("AssimpAnimation_setPosition",1,SWIGTYPE_p_ofxAssimpAnimation); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setPosition(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpAnimation_setLoopState(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; ofLoopType arg2 ; ofLoopType *argp2 ;
  SWIG_check_num_args("ofxAssimpAnimation::setLoopState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::setLoopState",1,"ofxAssimpAnimation *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxAssimpAnimation::setLoopState",2,"ofLoopType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
    SWIG_fail_ptr("AssimpAnimation_setLoopState",1,SWIGTYPE_p_ofxAssimpAnimation); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofLoopType,0))){
    SWIG_fail_ptr("AssimpAnimation_setLoopState",2,SWIGTYPE_p_ofLoopType); }  arg2 = *argp2; (arg1)->setLoopState(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpAnimation_setSpeed(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) 0 ; float arg2 ; SWIG_check_num_args("ofxAssimpAnimation::setSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpAnimation::setSpeed",1,"ofxAssimpAnimation *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxAssimpAnimation::setSpeed",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpAnimation,0))){
    SWIG_fail_ptr("AssimpAnimation_setSpeed",1,SWIGTYPE_p_ofxAssimpAnimation); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSpeed(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_AssimpAnimation(void *obj) {
ofxAssimpAnimation *arg1 = (ofxAssimpAnimation *) obj;
delete arg1;
}
static int _proxy__wrap_new_AssimpAnimation(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AssimpAnimation);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AssimpAnimation_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AssimpAnimation_methods[]= {
    { "getAnimation", _wrap_AssimpAnimation_getAnimation},
    { "update", _wrap_AssimpAnimation_update},
    { "play", _wrap_AssimpAnimation_play},
    { "stop", _wrap_AssimpAnimation_stop},
    { "reset", _wrap_AssimpAnimation_reset},
    { "isFrameNew", _wrap_AssimpAnimation_isFrameNew},
    { "isPaused", _wrap_AssimpAnimation_isPaused},
    { "isPlaying", _wrap_AssimpAnimation_isPlaying},
    { "isFinished", _wrap_AssimpAnimation_isFinished},
    { "getPosition", _wrap_AssimpAnimation_getPosition},
    { "getPositionInSeconds", _wrap_AssimpAnimation_getPositionInSeconds},
    { "getPositionInMilliSeconds", _wrap_AssimpAnimation_getPositionInMilliSeconds},
    { "getSpeed", _wrap_AssimpAnimation_getSpeed},
    { "getDurationInSeconds", _wrap_AssimpAnimation_getDurationInSeconds},
    { "getDurationInMilliSeconds", _wrap_AssimpAnimation_getDurationInMilliSeconds},
    { "setPaused", _wrap_AssimpAnimation_setPaused},
    { "setPosition", _wrap_AssimpAnimation_setPosition},
    { "setLoopState", _wrap_AssimpAnimation_setLoopState},
    { "setSpeed", _wrap_AssimpAnimation_setSpeed},
    {0,0}
};
static swig_lua_method swig_AssimpAnimation_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AssimpAnimation_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AssimpAnimation_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AssimpAnimation_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AssimpAnimation_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AssimpAnimation_Sf_SwigStatic = {
    "AssimpAnimation",
    swig_AssimpAnimation_Sf_SwigStatic_methods,
    swig_AssimpAnimation_Sf_SwigStatic_attributes,
    swig_AssimpAnimation_Sf_SwigStatic_constants,
    swig_AssimpAnimation_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AssimpAnimation_bases[] = {0};
static const char *swig_AssimpAnimation_base_names[] = {0};
static swig_lua_class _wrap_class_AssimpAnimation = { "AssimpAnimation", "AssimpAnimation", &SWIGTYPE_p_ofxAssimpAnimation,_proxy__wrap_new_AssimpAnimation, swig_delete_AssimpAnimation, swig_AssimpAnimation_methods, swig_AssimpAnimation_attributes, &swig_AssimpAnimation_Sf_SwigStatic, swig_AssimpAnimation_meta, swig_AssimpAnimation_bases, swig_AssimpAnimation_base_names };

static int _wrap_new_AssimpTexture__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxAssimpTexture *result = 0 ;
  SWIG_check_num_args("ofxAssimpTexture::ofxAssimpTexture",0,0) result = (ofxAssimpTexture *)new ofxAssimpTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxAssimpTexture,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_AssimpTexture__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTexture arg1 ; std::string arg2 ;
  ofTexture *argp1 ; ofxAssimpTexture *result = 0 ; SWIG_check_num_args("ofxAssimpTexture::ofxAssimpTexture",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxAssimpTexture::ofxAssimpTexture",1,"ofTexture");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxAssimpTexture::ofxAssimpTexture",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("new_AssimpTexture",1,SWIGTYPE_p_ofTexture); }  arg1 = *argp1;
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (ofxAssimpTexture *)new ofxAssimpTexture(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxAssimpTexture,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_AssimpTexture(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_AssimpTexture__SWIG_0(L);}  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_new_AssimpTexture__SWIG_1(L);}  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AssimpTexture'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxAssimpTexture::ofxAssimpTexture()\n"
  "    ofxAssimpTexture::ofxAssimpTexture(ofTexture,std::string)\n"); lua_error(L);return 0; }
static int _wrap_AssimpTexture_getTextureRef(lua_State* L) { int SWIG_arg = 0; ofxAssimpTexture *arg1 = (ofxAssimpTexture *) 0 ;
  ofTexture *result = 0 ; SWIG_check_num_args("ofxAssimpTexture::getTextureRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpTexture::getTextureRef",1,"ofxAssimpTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpTexture,0))){
    SWIG_fail_ptr("AssimpTexture_getTextureRef",1,SWIGTYPE_p_ofxAssimpTexture); } 
  result = (ofTexture *) &(arg1)->getTextureRef(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_AssimpTexture_getTexturePath(lua_State* L) { int SWIG_arg = 0;
  ofxAssimpTexture *arg1 = (ofxAssimpTexture *) 0 ; std::string result;
  SWIG_check_num_args("ofxAssimpTexture::getTexturePath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpTexture::getTexturePath",1,"ofxAssimpTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpTexture,0))){
    SWIG_fail_ptr("AssimpTexture_getTexturePath",1,SWIGTYPE_p_ofxAssimpTexture); }  result = (arg1)->getTexturePath();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_AssimpTexture_hasTexture(lua_State* L) { int SWIG_arg = 0; ofxAssimpTexture *arg1 = (ofxAssimpTexture *) 0 ;
  bool result; SWIG_check_num_args("ofxAssimpTexture::hasTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxAssimpTexture::hasTexture",1,"ofxAssimpTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxAssimpTexture,0))){
    SWIG_fail_ptr("AssimpTexture_hasTexture",1,SWIGTYPE_p_ofxAssimpTexture); }  result = (bool)(arg1)->hasTexture();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_AssimpTexture(void *obj) {
ofxAssimpTexture *arg1 = (ofxAssimpTexture *) obj;
delete arg1;
}
static int _proxy__wrap_new_AssimpTexture(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AssimpTexture);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AssimpTexture_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AssimpTexture_methods[]= {
    { "getTextureRef", _wrap_AssimpTexture_getTextureRef},
    { "getTexturePath", _wrap_AssimpTexture_getTexturePath},
    { "hasTexture", _wrap_AssimpTexture_hasTexture},
    {0,0}
};
static swig_lua_method swig_AssimpTexture_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AssimpTexture_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AssimpTexture_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AssimpTexture_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AssimpTexture_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AssimpTexture_Sf_SwigStatic = {
    "AssimpTexture",
    swig_AssimpTexture_Sf_SwigStatic_methods,
    swig_AssimpTexture_Sf_SwigStatic_attributes,
    swig_AssimpTexture_Sf_SwigStatic_constants,
    swig_AssimpTexture_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AssimpTexture_bases[] = {0};
static const char *swig_AssimpTexture_base_names[] = {0};
static swig_lua_class _wrap_class_AssimpTexture = { "AssimpTexture", "AssimpTexture", &SWIGTYPE_p_ofxAssimpTexture,_proxy__wrap_new_AssimpTexture, swig_delete_AssimpTexture, swig_AssimpTexture_methods, swig_AssimpTexture_attributes, &swig_AssimpTexture_Sf_SwigStatic, swig_AssimpTexture_meta, swig_AssimpTexture_bases, swig_AssimpTexture_base_names };

static int _wrap_new_Toggle__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxToggle *result = 0 ;
  SWIG_check_num_args("ofxToggle::ofxToggle",0,0) result = (ofxToggle *)new ofxToggle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxToggle,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Toggle__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofParameter< bool > arg1 ; float arg2 ; float arg3 ;
  ofParameter< bool > *argp1 ; ofxToggle *result = 0 ; SWIG_check_num_args("ofxToggle::ofxToggle",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxToggle::ofxToggle",1,"ofParameter< bool >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxToggle::ofxToggle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxToggle::ofxToggle",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofParameterT_bool_t,0))){
    SWIG_fail_ptr("new_Toggle",1,SWIGTYPE_p_ofParameterT_bool_t); }  arg1 = *argp1; arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); result = (ofxToggle *)new ofxToggle(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxToggle,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Toggle__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofParameter< bool > arg1 ; float arg2 ;
  ofParameter< bool > *argp1 ; ofxToggle *result = 0 ; SWIG_check_num_args("ofxToggle::ofxToggle",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxToggle::ofxToggle",1,"ofParameter< bool >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxToggle::ofxToggle",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofParameterT_bool_t,0))){
    SWIG_fail_ptr("new_Toggle",1,SWIGTYPE_p_ofParameterT_bool_t); }  arg1 = *argp1; arg2 = (float)lua_tonumber(L, 2);
  result = (ofxToggle *)new ofxToggle(arg1,arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxToggle,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Toggle__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofParameter< bool > arg1 ; ofParameter< bool > *argp1 ;
  ofxToggle *result = 0 ; SWIG_check_num_args("ofxToggle::ofxToggle",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxToggle::ofxToggle",1,"ofParameter< bool >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofParameterT_bool_t,0))){
    SWIG_fail_ptr("new_Toggle",1,SWIGTYPE_p_ofParameterT_bool_t); }  arg1 = *argp1; result = (ofxToggle *)new ofxToggle(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxToggle,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Toggle(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_Toggle__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofParameterT_bool_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_Toggle__SWIG_3(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofParameterT_bool_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_Toggle__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofParameterT_bool_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_new_Toggle__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Toggle'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxToggle::ofxToggle()\n" "    ofxToggle::ofxToggle(ofParameter< bool >,float,float)\n"
  "    ofxToggle::ofxToggle(ofParameter< bool >,float)\n" "    ofxToggle::ofxToggle(ofParameter< bool >)\n");
  lua_error(L);return 0; }
static int _wrap_Toggle_setup__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxToggle *arg1 = (ofxToggle *) 0 ;
  ofParameter< bool > arg2 ; float arg3 ; float arg4 ; ofParameter< bool > *argp2 ; ofxToggle *result = 0 ;
  SWIG_check_num_args("ofxToggle::setup",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxToggle::setup",1,"ofxToggle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxToggle::setup",2,"ofParameter< bool >");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxToggle::setup",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxToggle::setup",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxToggle,0))){
    SWIG_fail_ptr("Toggle_setup",1,SWIGTYPE_p_ofxToggle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofParameterT_bool_t,0))){
    SWIG_fail_ptr("Toggle_setup",2,SWIGTYPE_p_ofParameterT_bool_t); }  arg2 = *argp2; arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); result = (ofxToggle *)(arg1)->setup(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxToggle,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Toggle_setup__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxToggle *arg1 = (ofxToggle *) 0 ;
  ofParameter< bool > arg2 ; float arg3 ; ofParameter< bool > *argp2 ; ofxToggle *result = 0 ;
  SWIG_check_num_args("ofxToggle::setup",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxToggle::setup",1,"ofxToggle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxToggle::setup",2,"ofParameter< bool >");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxToggle::setup",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxToggle,0))){
    SWIG_fail_ptr("Toggle_setup",1,SWIGTYPE_p_ofxToggle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofParameterT_bool_t,0))){
    SWIG_fail_ptr("Toggle_setup",2,SWIGTYPE_p_ofParameterT_bool_t); }  arg2 = *argp2; arg3 = (float)lua_tonumber(L, 3);
  result = (ofxToggle *)(arg1)->setup(arg2,arg3); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxToggle,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Toggle_setup__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofxToggle *arg1 = (ofxToggle *) 0 ;
  ofParameter< bool > arg2 ; ofParameter< bool > *argp2 ; ofxToggle *result = 0 ; SWIG_check_num_args("ofxToggle::setup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxToggle::setup",1,"ofxToggle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxToggle::setup",2,"ofParameter< bool >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxToggle,0))){
    SWIG_fail_ptr("Toggle_setup",1,SWIGTYPE_p_ofxToggle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofParameterT_bool_t,0))){
    SWIG_fail_ptr("Toggle_setup",2,SWIGTYPE_p_ofParameterT_bool_t); }  arg2 = *argp2; result = (ofxToggle *)(arg1)->setup(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxToggle,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Toggle_setup__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofxToggle *arg1 = (ofxToggle *) 0 ;
  std::string *arg2 = 0 ; bool arg3 ; float arg4 ; float arg5 ; std::string temp2 ; ofxToggle *result = 0 ;
  SWIG_check_num_args("ofxToggle::setup",5,5) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxToggle::setup",1,"ofxToggle *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxToggle::setup",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxToggle::setup",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxToggle::setup",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxToggle::setup",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxToggle,0))){
    SWIG_fail_ptr("Toggle_setup",1,SWIGTYPE_p_ofxToggle); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  result = (ofxToggle *)(arg1)->setup((std::string const &)*arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxToggle,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Toggle_setup__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofxToggle *arg1 = (ofxToggle *) 0 ;
  std::string *arg2 = 0 ; bool arg3 ; float arg4 ; std::string temp2 ; ofxToggle *result = 0 ;
  SWIG_check_num_args("ofxToggle::setup",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxToggle::setup",1,"ofxToggle *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxToggle::setup",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxToggle::setup",3,"bool");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxToggle::setup",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxToggle,0))){
    SWIG_fail_ptr("Toggle_setup",1,SWIGTYPE_p_ofxToggle); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0); arg4 = (float)lua_tonumber(L, 4);
  result = (ofxToggle *)(arg1)->setup((std::string const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxToggle,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Toggle_setup__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofxToggle *arg1 = (ofxToggle *) 0 ;
  std::string *arg2 = 0 ; bool arg3 ; std::string temp2 ; ofxToggle *result = 0 ; SWIG_check_num_args("ofxToggle::setup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxToggle::setup",1,"ofxToggle *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxToggle::setup",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxToggle::setup",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxToggle,0))){
    SWIG_fail_ptr("Toggle_setup",1,SWIGTYPE_p_ofxToggle); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0); result = (ofxToggle *)(arg1)->setup((std::string const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxToggle,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Toggle_setup(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxToggle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofParameterT_bool_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Toggle_setup__SWIG_2(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxToggle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofParameterT_bool_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Toggle_setup__SWIG_1(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxToggle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_Toggle_setup__SWIG_5(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxToggle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofParameterT_bool_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Toggle_setup__SWIG_0(L);}  }  }  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxToggle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Toggle_setup__SWIG_4(L);}  }  }  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxToggle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Toggle_setup__SWIG_3(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Toggle_setup'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxToggle::setup(ofParameter< bool >,float,float)\n" "    ofxToggle::setup(ofParameter< bool >,float)\n"
  "    ofxToggle::setup(ofParameter< bool >)\n" "    ofxToggle::setup(std::string const &,bool,float,float)\n"
  "    ofxToggle::setup(std::string const &,bool,float)\n" "    ofxToggle::setup(std::string const &,bool)\n");
  lua_error(L);return 0; }
static int _wrap_Toggle_mouseMoved(lua_State* L) { int SWIG_arg = 0; ofxToggle *arg1 = (ofxToggle *) 0 ;
  ofMouseEventArgs *arg2 = 0 ; bool result; SWIG_check_num_args("ofxToggle::mouseMoved",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxToggle::mouseMoved",1,"ofxToggle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxToggle::mouseMoved",2,"ofMouseEventArgs &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxToggle,0))){
    SWIG_fail_ptr("Toggle_mouseMoved",1,SWIGTYPE_p_ofxToggle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
    SWIG_fail_ptr("Toggle_mouseMoved",2,SWIGTYPE_p_ofMouseEventArgs); }  result = (bool)(arg1)->mouseMoved(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Toggle_mousePressed(lua_State* L) { int SWIG_arg = 0; ofxToggle *arg1 = (ofxToggle *) 0 ;
  ofMouseEventArgs *arg2 = 0 ; bool result; SWIG_check_num_args("ofxToggle::mousePressed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxToggle::mousePressed",1,"ofxToggle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxToggle::mousePressed",2,"ofMouseEventArgs &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxToggle,0))){
    SWIG_fail_ptr("Toggle_mousePressed",1,SWIGTYPE_p_ofxToggle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
    SWIG_fail_ptr("Toggle_mousePressed",2,SWIGTYPE_p_ofMouseEventArgs); }  result = (bool)(arg1)->mousePressed(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Toggle_mouseDragged(lua_State* L) { int SWIG_arg = 0; ofxToggle *arg1 = (ofxToggle *) 0 ;
  ofMouseEventArgs *arg2 = 0 ; bool result; SWIG_check_num_args("ofxToggle::mouseDragged",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxToggle::mouseDragged",1,"ofxToggle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxToggle::mouseDragged",2,"ofMouseEventArgs &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxToggle,0))){
    SWIG_fail_ptr("Toggle_mouseDragged",1,SWIGTYPE_p_ofxToggle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
    SWIG_fail_ptr("Toggle_mouseDragged",2,SWIGTYPE_p_ofMouseEventArgs); }  result = (bool)(arg1)->mouseDragged(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Toggle_mouseReleased(lua_State* L) { int SWIG_arg = 0; ofxToggle *arg1 = (ofxToggle *) 0 ;
  ofMouseEventArgs *arg2 = 0 ; bool result; SWIG_check_num_args("ofxToggle::mouseReleased",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxToggle::mouseReleased",1,"ofxToggle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxToggle::mouseReleased",2,"ofMouseEventArgs &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxToggle,0))){
    SWIG_fail_ptr("Toggle_mouseReleased",1,SWIGTYPE_p_ofxToggle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
    SWIG_fail_ptr("Toggle_mouseReleased",2,SWIGTYPE_p_ofMouseEventArgs); }  result = (bool)(arg1)->mouseReleased(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Toggle_mouseScrolled(lua_State* L) { int SWIG_arg = 0; ofxToggle *arg1 = (ofxToggle *) 0 ;
  ofMouseEventArgs *arg2 = 0 ; bool result; SWIG_check_num_args("ofxToggle::mouseScrolled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxToggle::mouseScrolled",1,"ofxToggle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxToggle::mouseScrolled",2,"ofMouseEventArgs &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxToggle,0))){
    SWIG_fail_ptr("Toggle_mouseScrolled",1,SWIGTYPE_p_ofxToggle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
    SWIG_fail_ptr("Toggle_mouseScrolled",2,SWIGTYPE_p_ofMouseEventArgs); }  result = (bool)(arg1)->mouseScrolled(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Toggle_getParameter(lua_State* L) { int SWIG_arg = 0; ofxToggle *arg1 = (ofxToggle *) 0 ;
  ofAbstractParameter *result = 0 ; SWIG_check_num_args("ofxToggle::getParameter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxToggle::getParameter",1,"ofxToggle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxToggle,0))){
    SWIG_fail_ptr("Toggle_getParameter",1,SWIGTYPE_p_ofxToggle); }  result = (ofAbstractParameter *) &(arg1)->getParameter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofAbstractParameter,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_Toggle(void *obj) {
ofxToggle *arg1 = (ofxToggle *) obj;
delete arg1;
}
static int _proxy__wrap_new_Toggle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Toggle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Toggle_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Toggle_methods[]= {
    { "setup", _wrap_Toggle_setup},
    { "mouseMoved", _wrap_Toggle_mouseMoved},
    { "mousePressed", _wrap_Toggle_mousePressed},
    { "mouseDragged", _wrap_Toggle_mouseDragged},
    { "mouseReleased", _wrap_Toggle_mouseReleased},
    { "mouseScrolled", _wrap_Toggle_mouseScrolled},
    { "getParameter", _wrap_Toggle_getParameter},
    {0,0}
};
static swig_lua_method swig_Toggle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Toggle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Toggle_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Toggle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Toggle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Toggle_Sf_SwigStatic = {
    "Toggle",
    swig_Toggle_Sf_SwigStatic_methods,
    swig_Toggle_Sf_SwigStatic_attributes,
    swig_Toggle_Sf_SwigStatic_constants,
    swig_Toggle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Toggle_bases[] = {0};
static const char *swig_Toggle_base_names[] = {0};
static swig_lua_class _wrap_class_Toggle = { "Toggle", "Toggle", &SWIGTYPE_p_ofxToggle,_proxy__wrap_new_Toggle, swig_delete_Toggle, swig_Toggle_methods, swig_Toggle_attributes, &swig_Toggle_Sf_SwigStatic, swig_Toggle_meta, swig_Toggle_bases, swig_Toggle_base_names };

static int _wrap_new_Button__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxButton *result = 0 ;
  SWIG_check_num_args("ofxButton::ofxButton",0,0) result = (ofxButton *)new ofxButton();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxButton,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Button__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofParameter< void > arg1 ; float arg2 ; float arg3 ;
  ofParameter< void > *argp1 ; ofxButton *result = 0 ; SWIG_check_num_args("ofxButton::ofxButton",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxButton::ofxButton",1,"ofParameter< void >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxButton::ofxButton",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxButton::ofxButton",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofParameterT_void_t,0))){
    SWIG_fail_ptr("new_Button",1,SWIGTYPE_p_ofParameterT_void_t); }  arg1 = *argp1; arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); result = (ofxButton *)new ofxButton(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxButton,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Button__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofParameter< void > arg1 ; float arg2 ;
  ofParameter< void > *argp1 ; ofxButton *result = 0 ; SWIG_check_num_args("ofxButton::ofxButton",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxButton::ofxButton",1,"ofParameter< void >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxButton::ofxButton",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofParameterT_void_t,0))){
    SWIG_fail_ptr("new_Button",1,SWIGTYPE_p_ofParameterT_void_t); }  arg1 = *argp1; arg2 = (float)lua_tonumber(L, 2);
  result = (ofxButton *)new ofxButton(arg1,arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxButton,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Button__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofParameter< void > arg1 ; ofParameter< void > *argp1 ;
  ofxButton *result = 0 ; SWIG_check_num_args("ofxButton::ofxButton",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxButton::ofxButton",1,"ofParameter< void >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofParameterT_void_t,0))){
    SWIG_fail_ptr("new_Button",1,SWIGTYPE_p_ofParameterT_void_t); }  arg1 = *argp1; result = (ofxButton *)new ofxButton(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxButton,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Button(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_Button__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofParameterT_void_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_Button__SWIG_3(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofParameterT_void_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_Button__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofParameterT_void_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_new_Button__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Button'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxButton::ofxButton()\n" "    ofxButton::ofxButton(ofParameter< void >,float,float)\n"
  "    ofxButton::ofxButton(ofParameter< void >,float)\n" "    ofxButton::ofxButton(ofParameter< void >)\n");
  lua_error(L);return 0; }
static int _wrap_Button_setup__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxButton *arg1 = (ofxButton *) 0 ;
  ofParameter< void > arg2 ; float arg3 ; float arg4 ; ofParameter< void > *argp2 ; ofxButton *result = 0 ;
  SWIG_check_num_args("ofxButton::setup",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxButton::setup",1,"ofxButton *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxButton::setup",2,"ofParameter< void >");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxButton::setup",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxButton::setup",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxButton,0))){
    SWIG_fail_ptr("Button_setup",1,SWIGTYPE_p_ofxButton); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofParameterT_void_t,0))){
    SWIG_fail_ptr("Button_setup",2,SWIGTYPE_p_ofParameterT_void_t); }  arg2 = *argp2; arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); result = (ofxButton *)(arg1)->setup(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxButton,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Button_setup__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxButton *arg1 = (ofxButton *) 0 ;
  ofParameter< void > arg2 ; float arg3 ; ofParameter< void > *argp2 ; ofxButton *result = 0 ;
  SWIG_check_num_args("ofxButton::setup",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxButton::setup",1,"ofxButton *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxButton::setup",2,"ofParameter< void >");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxButton::setup",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxButton,0))){
    SWIG_fail_ptr("Button_setup",1,SWIGTYPE_p_ofxButton); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofParameterT_void_t,0))){
    SWIG_fail_ptr("Button_setup",2,SWIGTYPE_p_ofParameterT_void_t); }  arg2 = *argp2; arg3 = (float)lua_tonumber(L, 3);
  result = (ofxButton *)(arg1)->setup(arg2,arg3); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxButton,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Button_setup__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofxButton *arg1 = (ofxButton *) 0 ;
  ofParameter< void > arg2 ; ofParameter< void > *argp2 ; ofxButton *result = 0 ; SWIG_check_num_args("ofxButton::setup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxButton::setup",1,"ofxButton *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxButton::setup",2,"ofParameter< void >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxButton,0))){
    SWIG_fail_ptr("Button_setup",1,SWIGTYPE_p_ofxButton); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofParameterT_void_t,0))){
    SWIG_fail_ptr("Button_setup",2,SWIGTYPE_p_ofParameterT_void_t); }  arg2 = *argp2; result = (ofxButton *)(arg1)->setup(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxButton,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Button_setup__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofxButton *arg1 = (ofxButton *) 0 ;
  std::string *arg2 = 0 ; float arg3 ; float arg4 ; std::string temp2 ; ofxButton *result = 0 ;
  SWIG_check_num_args("ofxButton::setup",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxButton::setup",1,"ofxButton *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxButton::setup",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxButton::setup",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxButton::setup",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxButton,0))){
    SWIG_fail_ptr("Button_setup",1,SWIGTYPE_p_ofxButton); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (ofxButton *)(arg1)->setup((std::string const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxButton,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Button_setup__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofxButton *arg1 = (ofxButton *) 0 ;
  std::string *arg2 = 0 ; float arg3 ; std::string temp2 ; ofxButton *result = 0 ; SWIG_check_num_args("ofxButton::setup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxButton::setup",1,"ofxButton *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxButton::setup",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxButton::setup",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxButton,0))){
    SWIG_fail_ptr("Button_setup",1,SWIGTYPE_p_ofxButton); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (float)lua_tonumber(L, 3); result = (ofxButton *)(arg1)->setup((std::string const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxButton,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Button_setup__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofxButton *arg1 = (ofxButton *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; ofxButton *result = 0 ; SWIG_check_num_args("ofxButton::setup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxButton::setup",1,"ofxButton *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxButton::setup",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxButton,0))){
    SWIG_fail_ptr("Button_setup",1,SWIGTYPE_p_ofxButton); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (ofxButton *)(arg1)->setup((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxButton,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Button_setup(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxButton, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofParameterT_void_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Button_setup__SWIG_2(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxButton, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_Button_setup__SWIG_5(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxButton, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofParameterT_void_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Button_setup__SWIG_1(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxButton, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Button_setup__SWIG_4(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxButton, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofParameterT_void_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Button_setup__SWIG_0(L);}  }  }  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxButton, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Button_setup__SWIG_3(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Button_setup'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxButton::setup(ofParameter< void >,float,float)\n" "    ofxButton::setup(ofParameter< void >,float)\n"
  "    ofxButton::setup(ofParameter< void >)\n" "    ofxButton::setup(std::string const &,float,float)\n"
  "    ofxButton::setup(std::string const &,float)\n" "    ofxButton::setup(std::string const &)\n"); lua_error(L);return 0; }
static void swig_delete_Button(void *obj) {
ofxButton *arg1 = (ofxButton *) obj;
delete arg1;
}
static int _proxy__wrap_new_Button(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Button);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Button_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Button_methods[]= {
    { "setup", _wrap_Button_setup},
    {0,0}
};
static swig_lua_method swig_Button_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Button_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Button_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Button_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Button_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Button_Sf_SwigStatic = {
    "Button",
    swig_Button_Sf_SwigStatic_methods,
    swig_Button_Sf_SwigStatic_attributes,
    swig_Button_Sf_SwigStatic_constants,
    swig_Button_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Button_bases[] = {0,0};
static const char *swig_Button_base_names[] = {"ofxToggle *",0};
static swig_lua_class _wrap_class_Button = { "Button", "Button", &SWIGTYPE_p_ofxButton,_proxy__wrap_new_Button, swig_delete_Button, swig_Button_methods, swig_Button_attributes, &swig_Button_Sf_SwigStatic, swig_Button_meta, swig_Button_bases, swig_Button_base_names };

static int _wrap_new_Label__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxLabel *result = 0 ;
  SWIG_check_num_args("ofxLabel::ofxLabel",0,0) result = (ofxLabel *)new ofxLabel();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxLabel,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Label__SWIG_1(lua_State* L) { int SWIG_arg = 0; SwigValueWrapper< ofParameter< std::string > > arg1 ;
  float arg2 ; float arg3 ; ofParameter< std::string > *argp1 ; ofxLabel *result = 0 ;
  SWIG_check_num_args("ofxLabel::ofxLabel",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxLabel::ofxLabel",1,"ofParameter< std::string >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxLabel::ofxLabel",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxLabel::ofxLabel",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofParameterT_std__string_t,0))){
    SWIG_fail_ptr("new_Label",1,SWIGTYPE_p_ofParameterT_std__string_t); }  arg1 = *argp1; arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); result = (ofxLabel *)new ofxLabel(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxLabel,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Label__SWIG_2(lua_State* L) { int SWIG_arg = 0; SwigValueWrapper< ofParameter< std::string > > arg1 ;
  float arg2 ; ofParameter< std::string > *argp1 ; ofxLabel *result = 0 ; SWIG_check_num_args("ofxLabel::ofxLabel",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxLabel::ofxLabel",1,"ofParameter< std::string >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxLabel::ofxLabel",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofParameterT_std__string_t,0))){
    SWIG_fail_ptr("new_Label",1,SWIGTYPE_p_ofParameterT_std__string_t); }  arg1 = *argp1; arg2 = (float)lua_tonumber(L, 2);
  result = (ofxLabel *)new ofxLabel(arg1,arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxLabel,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Label__SWIG_3(lua_State* L) { int SWIG_arg = 0; SwigValueWrapper< ofParameter< std::string > > arg1 ;
  ofParameter< std::string > *argp1 ; ofxLabel *result = 0 ; SWIG_check_num_args("ofxLabel::ofxLabel",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxLabel::ofxLabel",1,"ofParameter< std::string >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofParameterT_std__string_t,0))){
    SWIG_fail_ptr("new_Label",1,SWIGTYPE_p_ofParameterT_std__string_t); }  arg1 = *argp1;
  result = (ofxLabel *)new ofxLabel(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxLabel,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Label(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_Label__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofParameterT_std__string_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_Label__SWIG_3(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofParameterT_std__string_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_Label__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofParameterT_std__string_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_new_Label__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Label'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxLabel::ofxLabel()\n" "    ofxLabel::ofxLabel(ofParameter< std::string >,float,float)\n"
  "    ofxLabel::ofxLabel(ofParameter< std::string >,float)\n" "    ofxLabel::ofxLabel(ofParameter< std::string >)\n");
  lua_error(L);return 0; }
static int _wrap_Label_setup__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxLabel *arg1 = (ofxLabel *) 0 ;
  SwigValueWrapper< ofParameter< std::string > > arg2 ; float arg3 ; float arg4 ; ofParameter< std::string > *argp2 ;
  ofxLabel *result = 0 ; SWIG_check_num_args("ofxLabel::setup",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxLabel::setup",1,"ofxLabel *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxLabel::setup",2,"ofParameter< std::string >");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxLabel::setup",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxLabel::setup",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxLabel,0))){
    SWIG_fail_ptr("Label_setup",1,SWIGTYPE_p_ofxLabel); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofParameterT_std__string_t,0))){
    SWIG_fail_ptr("Label_setup",2,SWIGTYPE_p_ofParameterT_std__string_t); }  arg2 = *argp2; arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); result = (ofxLabel *)(arg1)->setup(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxLabel,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Label_setup__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxLabel *arg1 = (ofxLabel *) 0 ;
  SwigValueWrapper< ofParameter< std::string > > arg2 ; float arg3 ; ofParameter< std::string > *argp2 ; ofxLabel *result = 0 ;
  SWIG_check_num_args("ofxLabel::setup",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxLabel::setup",1,"ofxLabel *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxLabel::setup",2,"ofParameter< std::string >");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxLabel::setup",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxLabel,0))){
    SWIG_fail_ptr("Label_setup",1,SWIGTYPE_p_ofxLabel); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofParameterT_std__string_t,0))){
    SWIG_fail_ptr("Label_setup",2,SWIGTYPE_p_ofParameterT_std__string_t); }  arg2 = *argp2; arg3 = (float)lua_tonumber(L, 3);
  result = (ofxLabel *)(arg1)->setup(arg2,arg3); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxLabel,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Label_setup__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofxLabel *arg1 = (ofxLabel *) 0 ;
  SwigValueWrapper< ofParameter< std::string > > arg2 ; ofParameter< std::string > *argp2 ; ofxLabel *result = 0 ;
  SWIG_check_num_args("ofxLabel::setup",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxLabel::setup",1,"ofxLabel *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxLabel::setup",2,"ofParameter< std::string >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxLabel,0))){
    SWIG_fail_ptr("Label_setup",1,SWIGTYPE_p_ofxLabel); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofParameterT_std__string_t,0))){
    SWIG_fail_ptr("Label_setup",2,SWIGTYPE_p_ofParameterT_std__string_t); }  arg2 = *argp2;
  result = (ofxLabel *)(arg1)->setup(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxLabel,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Label_setup__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofxLabel *arg1 = (ofxLabel *) 0 ; std::string *arg2 = 0 ;
  std::string arg3 ; float arg4 ; float arg5 ; std::string temp2 ; ofxLabel *result = 0 ;
  SWIG_check_num_args("ofxLabel::setup",5,5) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxLabel::setup",1,"ofxLabel *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxLabel::setup",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxLabel::setup",3,"std::string");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxLabel::setup",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxLabel::setup",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxLabel,0))){
    SWIG_fail_ptr("Label_setup",1,SWIGTYPE_p_ofxLabel); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  result = (ofxLabel *)(arg1)->setup((std::string const &)*arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxLabel,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Label_setup__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofxLabel *arg1 = (ofxLabel *) 0 ; std::string *arg2 = 0 ;
  std::string arg3 ; float arg4 ; std::string temp2 ; ofxLabel *result = 0 ; SWIG_check_num_args("ofxLabel::setup",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxLabel::setup",1,"ofxLabel *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxLabel::setup",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxLabel::setup",3,"std::string");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxLabel::setup",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxLabel,0))){
    SWIG_fail_ptr("Label_setup",1,SWIGTYPE_p_ofxLabel); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); arg4 = (float)lua_tonumber(L, 4);
  result = (ofxLabel *)(arg1)->setup((std::string const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxLabel,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Label_setup__SWIG_6(lua_State* L) { int SWIG_arg = 0; ofxLabel *arg1 = (ofxLabel *) 0 ; std::string *arg2 = 0 ;
  std::string arg3 ; std::string temp2 ; ofxLabel *result = 0 ; SWIG_check_num_args("ofxLabel::setup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxLabel::setup",1,"ofxLabel *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxLabel::setup",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxLabel::setup",3,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxLabel,0))){
    SWIG_fail_ptr("Label_setup",1,SWIGTYPE_p_ofxLabel); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); result = (ofxLabel *)(arg1)->setup((std::string const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxLabel,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Label_setup(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxLabel, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofParameterT_std__string_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Label_setup__SWIG_2(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxLabel, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofParameterT_std__string_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Label_setup__SWIG_1(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxLabel, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          return _wrap_Label_setup__SWIG_6(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxLabel, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofParameterT_std__string_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Label_setup__SWIG_0(L);}  }  }  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxLabel, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Label_setup__SWIG_5(L);}  }  }  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxLabel, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Label_setup__SWIG_4(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Label_setup'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxLabel::setup(ofParameter< std::string >,float,float)\n" "    ofxLabel::setup(ofParameter< std::string >,float)\n"
  "    ofxLabel::setup(ofParameter< std::string >)\n" "    ofxLabel::setup(std::string const &,std::string,float,float)\n"
  "    ofxLabel::setup(std::string const &,std::string,float)\n" "    ofxLabel::setup(std::string const &,std::string)\n");
  lua_error(L);return 0; }
static int _wrap_Label_mouseMoved(lua_State* L) { int SWIG_arg = 0; ofxLabel *arg1 = (ofxLabel *) 0 ;
  ofMouseEventArgs *arg2 = 0 ; bool result; SWIG_check_num_args("ofxLabel::mouseMoved",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxLabel::mouseMoved",1,"ofxLabel *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxLabel::mouseMoved",2,"ofMouseEventArgs &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxLabel,0))){
    SWIG_fail_ptr("Label_mouseMoved",1,SWIGTYPE_p_ofxLabel); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
    SWIG_fail_ptr("Label_mouseMoved",2,SWIGTYPE_p_ofMouseEventArgs); }  result = (bool)(arg1)->mouseMoved(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Label_mousePressed(lua_State* L) { int SWIG_arg = 0; ofxLabel *arg1 = (ofxLabel *) 0 ;
  ofMouseEventArgs *arg2 = 0 ; bool result; SWIG_check_num_args("ofxLabel::mousePressed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxLabel::mousePressed",1,"ofxLabel *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxLabel::mousePressed",2,"ofMouseEventArgs &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxLabel,0))){
    SWIG_fail_ptr("Label_mousePressed",1,SWIGTYPE_p_ofxLabel); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
    SWIG_fail_ptr("Label_mousePressed",2,SWIGTYPE_p_ofMouseEventArgs); }  result = (bool)(arg1)->mousePressed(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Label_mouseDragged(lua_State* L) { int SWIG_arg = 0; ofxLabel *arg1 = (ofxLabel *) 0 ;
  ofMouseEventArgs *arg2 = 0 ; bool result; SWIG_check_num_args("ofxLabel::mouseDragged",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxLabel::mouseDragged",1,"ofxLabel *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxLabel::mouseDragged",2,"ofMouseEventArgs &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxLabel,0))){
    SWIG_fail_ptr("Label_mouseDragged",1,SWIGTYPE_p_ofxLabel); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
    SWIG_fail_ptr("Label_mouseDragged",2,SWIGTYPE_p_ofMouseEventArgs); }  result = (bool)(arg1)->mouseDragged(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Label_mouseReleased(lua_State* L) { int SWIG_arg = 0; ofxLabel *arg1 = (ofxLabel *) 0 ;
  ofMouseEventArgs *arg2 = 0 ; bool result; SWIG_check_num_args("ofxLabel::mouseReleased",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxLabel::mouseReleased",1,"ofxLabel *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxLabel::mouseReleased",2,"ofMouseEventArgs &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxLabel,0))){
    SWIG_fail_ptr("Label_mouseReleased",1,SWIGTYPE_p_ofxLabel); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
    SWIG_fail_ptr("Label_mouseReleased",2,SWIGTYPE_p_ofMouseEventArgs); }  result = (bool)(arg1)->mouseReleased(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Label_mouseScrolled(lua_State* L) { int SWIG_arg = 0; ofxLabel *arg1 = (ofxLabel *) 0 ;
  ofMouseEventArgs *arg2 = 0 ; bool result; SWIG_check_num_args("ofxLabel::mouseScrolled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxLabel::mouseScrolled",1,"ofxLabel *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxLabel::mouseScrolled",2,"ofMouseEventArgs &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxLabel,0))){
    SWIG_fail_ptr("Label_mouseScrolled",1,SWIGTYPE_p_ofxLabel); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
    SWIG_fail_ptr("Label_mouseScrolled",2,SWIGTYPE_p_ofMouseEventArgs); }  result = (bool)(arg1)->mouseScrolled(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Label_getParameter(lua_State* L) { int SWIG_arg = 0; ofxLabel *arg1 = (ofxLabel *) 0 ;
  ofAbstractParameter *result = 0 ; SWIG_check_num_args("ofxLabel::getParameter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxLabel::getParameter",1,"ofxLabel *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxLabel,0))){
    SWIG_fail_ptr("Label_getParameter",1,SWIGTYPE_p_ofxLabel); }  result = (ofAbstractParameter *) &(arg1)->getParameter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofAbstractParameter,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_Label(void *obj) {
ofxLabel *arg1 = (ofxLabel *) obj;
delete arg1;
}
static int _proxy__wrap_new_Label(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Label);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Label_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Label_methods[]= {
    { "setup", _wrap_Label_setup},
    { "mouseMoved", _wrap_Label_mouseMoved},
    { "mousePressed", _wrap_Label_mousePressed},
    { "mouseDragged", _wrap_Label_mouseDragged},
    { "mouseReleased", _wrap_Label_mouseReleased},
    { "mouseScrolled", _wrap_Label_mouseScrolled},
    { "getParameter", _wrap_Label_getParameter},
    {0,0}
};
static swig_lua_method swig_Label_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Label_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Label_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Label_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Label_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Label_Sf_SwigStatic = {
    "Label",
    swig_Label_Sf_SwigStatic_methods,
    swig_Label_Sf_SwigStatic_attributes,
    swig_Label_Sf_SwigStatic_constants,
    swig_Label_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Label_bases[] = {0};
static const char *swig_Label_base_names[] = {0};
static swig_lua_class _wrap_class_Label = { "Label", "Label", &SWIGTYPE_p_ofxLabel,_proxy__wrap_new_Label, swig_delete_Label, swig_Label_methods, swig_Label_attributes, &swig_Label_Sf_SwigStatic, swig_Label_meta, swig_Label_bases, swig_Label_base_names };

static int _wrap_ofxPanelDefaultFilename_get(lua_State* L) { int SWIG_arg = 0; char *result = 0 ;
  SWIG_check_num_args("ofxPanelDefaultFilename",0,0) result = (char *)ofxPanelDefaultFilename;
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Panel__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxPanel *result = 0 ;
  SWIG_check_num_args("ofxPanel::ofxPanel",0,0) result = (ofxPanel *)new ofxPanel();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxPanel,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Panel__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofParameterGroup *arg1 = 0 ; std::string *arg2 = 0 ;
  float arg3 ; float arg4 ; std::string temp2 ; ofxPanel *result = 0 ; SWIG_check_num_args("ofxPanel::ofxPanel",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxPanel::ofxPanel",1,"ofParameterGroup const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxPanel::ofxPanel",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxPanel::ofxPanel",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxPanel::ofxPanel",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofParameterGroup,0))){
    SWIG_fail_ptr("new_Panel",1,SWIGTYPE_p_ofParameterGroup); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (ofxPanel *)new ofxPanel((ofParameterGroup const &)*arg1,(std::string const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxPanel,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Panel__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofParameterGroup *arg1 = 0 ; std::string *arg2 = 0 ;
  float arg3 ; std::string temp2 ; ofxPanel *result = 0 ; SWIG_check_num_args("ofxPanel::ofxPanel",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxPanel::ofxPanel",1,"ofParameterGroup const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxPanel::ofxPanel",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxPanel::ofxPanel",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofParameterGroup,0))){
    SWIG_fail_ptr("new_Panel",1,SWIGTYPE_p_ofParameterGroup); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (float)lua_tonumber(L, 3);
  result = (ofxPanel *)new ofxPanel((ofParameterGroup const &)*arg1,(std::string const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxPanel,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Panel__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofParameterGroup *arg1 = 0 ; std::string *arg2 = 0 ;
  std::string temp2 ; ofxPanel *result = 0 ; SWIG_check_num_args("ofxPanel::ofxPanel",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxPanel::ofxPanel",1,"ofParameterGroup const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxPanel::ofxPanel",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofParameterGroup,0))){
    SWIG_fail_ptr("new_Panel",1,SWIGTYPE_p_ofParameterGroup); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (ofxPanel *)new ofxPanel((ofParameterGroup const &)*arg1,(std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxPanel,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Panel__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofParameterGroup *arg1 = 0 ; ofxPanel *result = 0 ;
  SWIG_check_num_args("ofxPanel::ofxPanel",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxPanel::ofxPanel",1,"ofParameterGroup const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofParameterGroup,0))){
    SWIG_fail_ptr("new_Panel",1,SWIGTYPE_p_ofParameterGroup); } 
  result = (ofxPanel *)new ofxPanel((ofParameterGroup const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxPanel,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Panel(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_Panel__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofParameterGroup, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_new_Panel__SWIG_4(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofParameterGroup, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_new_Panel__SWIG_3(L);}  }  } 
  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofParameterGroup, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_new_Panel__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofParameterGroup, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_Panel__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Panel'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxPanel::ofxPanel()\n" "    ofxPanel::ofxPanel(ofParameterGroup const &,std::string const &,float,float)\n"
  "    ofxPanel::ofxPanel(ofParameterGroup const &,std::string const &,float)\n"
  "    ofxPanel::ofxPanel(ofParameterGroup const &,std::string const &)\n"
  "    ofxPanel::ofxPanel(ofParameterGroup const &)\n"); lua_error(L);return 0; }
static int _wrap_Panel_setup__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxPanel *arg1 = (ofxPanel *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; float arg4 ; float arg5 ; std::string temp2 ; std::string temp3 ; ofxPanel *result = 0 ;
  SWIG_check_num_args("ofxPanel::setup",5,5) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxPanel::setup",1,"ofxPanel *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxPanel::setup",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxPanel::setup",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxPanel::setup",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxPanel::setup",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxPanel,0))){
    SWIG_fail_ptr("Panel_setup",1,SWIGTYPE_p_ofxPanel); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3; arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (ofxPanel *)(arg1)->setup((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxPanel,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Panel_setup__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxPanel *arg1 = (ofxPanel *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; float arg4 ; std::string temp2 ; std::string temp3 ; ofxPanel *result = 0 ;
  SWIG_check_num_args("ofxPanel::setup",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxPanel::setup",1,"ofxPanel *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxPanel::setup",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxPanel::setup",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxPanel::setup",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxPanel,0))){
    SWIG_fail_ptr("Panel_setup",1,SWIGTYPE_p_ofxPanel); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3; arg4 = (float)lua_tonumber(L, 4);
  result = (ofxPanel *)(arg1)->setup((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxPanel,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Panel_setup__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofxPanel *arg1 = (ofxPanel *) 0 ; std::string *arg2 = 0 ;
  std::string *arg3 = 0 ; std::string temp2 ; std::string temp3 ; ofxPanel *result = 0 ;
  SWIG_check_num_args("ofxPanel::setup",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxPanel::setup",1,"ofxPanel *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxPanel::setup",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxPanel::setup",3,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxPanel,0))){
    SWIG_fail_ptr("Panel_setup",1,SWIGTYPE_p_ofxPanel); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (ofxPanel *)(arg1)->setup((std::string const &)*arg2,(std::string const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxPanel,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Panel_setup__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofxPanel *arg1 = (ofxPanel *) 0 ; std::string *arg2 = 0 ;
  std::string temp2 ; ofxPanel *result = 0 ; SWIG_check_num_args("ofxPanel::setup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxPanel::setup",1,"ofxPanel *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxPanel::setup",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxPanel,0))){
    SWIG_fail_ptr("Panel_setup",1,SWIGTYPE_p_ofxPanel); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (ofxPanel *)(arg1)->setup((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxPanel,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Panel_setup__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofxPanel *arg1 = (ofxPanel *) 0 ; ofxPanel *result = 0 ;
  SWIG_check_num_args("ofxPanel::setup",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxPanel::setup",1,"ofxPanel *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxPanel,0))){
    SWIG_fail_ptr("Panel_setup",1,SWIGTYPE_p_ofxPanel); }  result = (ofxPanel *)(arg1)->setup();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxPanel,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Panel_setup__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofxPanel *arg1 = (ofxPanel *) 0 ;
  ofParameterGroup *arg2 = 0 ; std::string *arg3 = 0 ; float arg4 ; float arg5 ; std::string temp3 ; ofxPanel *result = 0 ;
  SWIG_check_num_args("ofxPanel::setup",5,5) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxPanel::setup",1,"ofxPanel *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxPanel::setup",2,"ofParameterGroup const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxPanel::setup",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxPanel::setup",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxPanel::setup",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxPanel,0))){
    SWIG_fail_ptr("Panel_setup",1,SWIGTYPE_p_ofxPanel); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofParameterGroup,0))){
    SWIG_fail_ptr("Panel_setup",2,SWIGTYPE_p_ofParameterGroup); }  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  result = (ofxPanel *)(arg1)->setup((ofParameterGroup const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxPanel,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Panel_setup__SWIG_6(lua_State* L) { int SWIG_arg = 0; ofxPanel *arg1 = (ofxPanel *) 0 ;
  ofParameterGroup *arg2 = 0 ; std::string *arg3 = 0 ; float arg4 ; std::string temp3 ; ofxPanel *result = 0 ;
  SWIG_check_num_args("ofxPanel::setup",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxPanel::setup",1,"ofxPanel *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxPanel::setup",2,"ofParameterGroup const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxPanel::setup",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxPanel::setup",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxPanel,0))){
    SWIG_fail_ptr("Panel_setup",1,SWIGTYPE_p_ofxPanel); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofParameterGroup,0))){
    SWIG_fail_ptr("Panel_setup",2,SWIGTYPE_p_ofParameterGroup); }  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (float)lua_tonumber(L, 4);
  result = (ofxPanel *)(arg1)->setup((ofParameterGroup const &)*arg2,(std::string const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxPanel,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Panel_setup__SWIG_7(lua_State* L) { int SWIG_arg = 0; ofxPanel *arg1 = (ofxPanel *) 0 ;
  ofParameterGroup *arg2 = 0 ; std::string *arg3 = 0 ; std::string temp3 ; ofxPanel *result = 0 ;
  SWIG_check_num_args("ofxPanel::setup",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxPanel::setup",1,"ofxPanel *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxPanel::setup",2,"ofParameterGroup const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxPanel::setup",3,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxPanel,0))){
    SWIG_fail_ptr("Panel_setup",1,SWIGTYPE_p_ofxPanel); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofParameterGroup,0))){
    SWIG_fail_ptr("Panel_setup",2,SWIGTYPE_p_ofParameterGroup); }  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (ofxPanel *)(arg1)->setup((ofParameterGroup const &)*arg2,(std::string const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxPanel,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Panel_setup__SWIG_8(lua_State* L) { int SWIG_arg = 0; ofxPanel *arg1 = (ofxPanel *) 0 ;
  ofParameterGroup *arg2 = 0 ; ofxPanel *result = 0 ; SWIG_check_num_args("ofxPanel::setup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxPanel::setup",1,"ofxPanel *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxPanel::setup",2,"ofParameterGroup const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxPanel,0))){
    SWIG_fail_ptr("Panel_setup",1,SWIGTYPE_p_ofxPanel); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofParameterGroup,0))){
    SWIG_fail_ptr("Panel_setup",2,SWIGTYPE_p_ofParameterGroup); } 
  result = (ofxPanel *)(arg1)->setup((ofParameterGroup const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxPanel,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Panel_setup(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxPanel, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_Panel_setup__SWIG_4(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxPanel, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofParameterGroup, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Panel_setup__SWIG_8(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxPanel, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_Panel_setup__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxPanel, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofParameterGroup, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          return _wrap_Panel_setup__SWIG_7(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxPanel, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          return _wrap_Panel_setup__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxPanel, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofParameterGroup, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Panel_setup__SWIG_6(L);}  }  }  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxPanel, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Panel_setup__SWIG_1(L);}  }  }  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxPanel, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofParameterGroup, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Panel_setup__SWIG_5(L);}  }  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxPanel, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Panel_setup__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Panel_setup'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxPanel::setup(std::string const &,std::string const &,float,float)\n"
  "    ofxPanel::setup(std::string const &,std::string const &,float)\n"
  "    ofxPanel::setup(std::string const &,std::string const &)\n" "    ofxPanel::setup(std::string const &)\n"
  "    ofxPanel::setup()\n" "    ofxPanel::setup(ofParameterGroup const &,std::string const &,float,float)\n"
  "    ofxPanel::setup(ofParameterGroup const &,std::string const &,float)\n"
  "    ofxPanel::setup(ofParameterGroup const &,std::string const &)\n" "    ofxPanel::setup(ofParameterGroup const &)\n");
  lua_error(L);return 0; }
static int _wrap_Panel_mouseReleased(lua_State* L) { int SWIG_arg = 0; ofxPanel *arg1 = (ofxPanel *) 0 ;
  ofMouseEventArgs *arg2 = 0 ; bool result; SWIG_check_num_args("ofxPanel::mouseReleased",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxPanel::mouseReleased",1,"ofxPanel *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxPanel::mouseReleased",2,"ofMouseEventArgs &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxPanel,0))){
    SWIG_fail_ptr("Panel_mouseReleased",1,SWIGTYPE_p_ofxPanel); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMouseEventArgs,0))){
    SWIG_fail_ptr("Panel_mouseReleased",2,SWIGTYPE_p_ofMouseEventArgs); }  result = (bool)(arg1)->mouseReleased(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Panel_loadPressedE_set(lua_State* L) { int SWIG_arg = 0; ofxPanel *arg1 = (ofxPanel *) 0 ;
  ofEvent< void > arg2 ; ofEvent< void > *argp2 ; SWIG_check_num_args("ofxPanel::loadPressedE",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxPanel::loadPressedE",1,"ofxPanel *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxPanel::loadPressedE",2,"ofEvent< void >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxPanel,0))){
    SWIG_fail_ptr("Panel_loadPressedE_set",1,SWIGTYPE_p_ofxPanel); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofEventT_void_t,0))){
    SWIG_fail_ptr("Panel_loadPressedE_set",2,SWIGTYPE_p_ofEventT_void_t); }  arg2 = *argp2;
  if (arg1) (arg1)->loadPressedE = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Panel_loadPressedE_get(lua_State* L) { int SWIG_arg = 0; ofxPanel *arg1 = (ofxPanel *) 0 ;
  ofEvent< void > result; SWIG_check_num_args("ofxPanel::loadPressedE",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxPanel::loadPressedE",1,"ofxPanel *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxPanel,0))){
    SWIG_fail_ptr("Panel_loadPressedE_get",1,SWIGTYPE_p_ofxPanel); }  result =  ((arg1)->loadPressedE); {
    ofEvent< void > * resultptr = new ofEvent< void >((const ofEvent< void > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofEventT_void_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Panel_savePressedE_set(lua_State* L) { int SWIG_arg = 0; ofxPanel *arg1 = (ofxPanel *) 0 ;
  ofEvent< void > arg2 ; ofEvent< void > *argp2 ; SWIG_check_num_args("ofxPanel::savePressedE",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxPanel::savePressedE",1,"ofxPanel *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxPanel::savePressedE",2,"ofEvent< void >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxPanel,0))){
    SWIG_fail_ptr("Panel_savePressedE_set",1,SWIGTYPE_p_ofxPanel); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofEventT_void_t,0))){
    SWIG_fail_ptr("Panel_savePressedE_set",2,SWIGTYPE_p_ofEventT_void_t); }  arg2 = *argp2;
  if (arg1) (arg1)->savePressedE = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Panel_savePressedE_get(lua_State* L) { int SWIG_arg = 0; ofxPanel *arg1 = (ofxPanel *) 0 ;
  ofEvent< void > result; SWIG_check_num_args("ofxPanel::savePressedE",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxPanel::savePressedE",1,"ofxPanel *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxPanel,0))){
    SWIG_fail_ptr("Panel_savePressedE_get",1,SWIGTYPE_p_ofxPanel); }  result =  ((arg1)->savePressedE); {
    ofEvent< void > * resultptr = new ofEvent< void >((const ofEvent< void > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofEventT_void_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static void swig_delete_Panel(void *obj) {
ofxPanel *arg1 = (ofxPanel *) obj;
delete arg1;
}
static int _proxy__wrap_new_Panel(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Panel);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Panel_attributes[] = {
    { "loadPressedE", _wrap_Panel_loadPressedE_get, _wrap_Panel_loadPressedE_set },
    { "savePressedE", _wrap_Panel_savePressedE_get, _wrap_Panel_savePressedE_set },
    {0,0,0}
};
static swig_lua_method swig_Panel_methods[]= {
    { "setup", _wrap_Panel_setup},
    { "mouseReleased", _wrap_Panel_mouseReleased},
    {0,0}
};
static swig_lua_method swig_Panel_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Panel_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Panel_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Panel_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Panel_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Panel_Sf_SwigStatic = {
    "Panel",
    swig_Panel_Sf_SwigStatic_methods,
    swig_Panel_Sf_SwigStatic_attributes,
    swig_Panel_Sf_SwigStatic_constants,
    swig_Panel_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Panel_bases[] = {0};
static const char *swig_Panel_base_names[] = {0};
static swig_lua_class _wrap_class_Panel = { "Panel", "Panel", &SWIGTYPE_p_ofxPanel,_proxy__wrap_new_Panel, swig_delete_Panel, swig_Panel_methods, swig_Panel_attributes, &swig_Panel_Sf_SwigStatic, swig_Panel_meta, swig_Panel_bases, swig_Panel_base_names };

static int _wrap_new_TCPClient(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *result = 0 ;
  SWIG_check_num_args("ofxTCPClient::ofxTCPClient",0,0) result = (ofxTCPClient *)new ofxTCPClient();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTCPClient,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_TCPClient_setVerbose(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *arg1 = (ofxTCPClient *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofxTCPClient::setVerbose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPClient::setVerbose",1,"ofxTCPClient *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTCPClient::setVerbose",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPClient,0))){
    SWIG_fail_ptr("TCPClient_setVerbose",1,SWIGTYPE_p_ofxTCPClient); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setVerbose(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPClient_setup__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *arg1 = (ofxTCPClient *) 0 ;
  std::string arg2 ; int arg3 ; bool arg4 ; bool result; SWIG_check_num_args("ofxTCPClient::setup",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPClient::setup",1,"ofxTCPClient *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTCPClient::setup",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTCPClient::setup",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofxTCPClient::setup",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPClient,0))){
    SWIG_fail_ptr("TCPClient_setup",1,SWIGTYPE_p_ofxTCPClient); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); result = (bool)(arg1)->setup(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPClient_setup__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *arg1 = (ofxTCPClient *) 0 ;
  std::string arg2 ; int arg3 ; bool result; SWIG_check_num_args("ofxTCPClient::setup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPClient::setup",1,"ofxTCPClient *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTCPClient::setup",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTCPClient::setup",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPClient,0))){
    SWIG_fail_ptr("TCPClient_setup",1,SWIGTYPE_p_ofxTCPClient); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (int)lua_tonumber(L, 3); result = (bool)(arg1)->setup(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPClient_setup__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *arg1 = (ofxTCPClient *) 0 ;
  ofxTCPSettings *arg2 = 0 ; bool result; SWIG_check_num_args("ofxTCPClient::setup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPClient::setup",1,"ofxTCPClient *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTCPClient::setup",2,"ofxTCPSettings const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPClient,0))){
    SWIG_fail_ptr("TCPClient_setup",1,SWIGTYPE_p_ofxTCPClient); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTCPSettings,0))){
    SWIG_fail_ptr("TCPClient_setup",2,SWIGTYPE_p_ofxTCPSettings); } 
  result = (bool)(arg1)->setup((ofxTCPSettings const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPClient_setup(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxTCPClient, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxTCPSettings, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_TCPClient_setup__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxTCPClient, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_TCPClient_setup__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxTCPClient, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_TCPClient_setup__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TCPClient_setup'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxTCPClient::setup(std::string,int,bool)\n" "    ofxTCPClient::setup(std::string,int)\n"
  "    ofxTCPClient::setup(ofxTCPSettings const &)\n"); lua_error(L);return 0; }
static int _wrap_TCPClient_setMessageDelimiter(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *arg1 = (ofxTCPClient *) 0 ;
  std::string arg2 ; SWIG_check_num_args("ofxTCPClient::setMessageDelimiter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPClient::setMessageDelimiter",1,"ofxTCPClient *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTCPClient::setMessageDelimiter",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPClient,0))){
    SWIG_fail_ptr("TCPClient_setMessageDelimiter",1,SWIGTYPE_p_ofxTCPClient); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->setMessageDelimiter(arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_TCPClient_close(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *arg1 = (ofxTCPClient *) 0 ; bool result;
  SWIG_check_num_args("ofxTCPClient::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPClient::close",1,"ofxTCPClient *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPClient,0))){
    SWIG_fail_ptr("TCPClient_close",1,SWIGTYPE_p_ofxTCPClient); }  result = (bool)(arg1)->close();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPClient_send(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *arg1 = (ofxTCPClient *) 0 ; std::string arg2 ;
  bool result; SWIG_check_num_args("ofxTCPClient::send",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPClient::send",1,"ofxTCPClient *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTCPClient::send",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPClient,0))){
    SWIG_fail_ptr("TCPClient_send",1,SWIGTYPE_p_ofxTCPClient); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->send(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_TCPClient_sendRaw(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *arg1 = (ofxTCPClient *) 0 ;
  std::string arg2 ; bool result; SWIG_check_num_args("ofxTCPClient::sendRaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPClient::sendRaw",1,"ofxTCPClient *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTCPClient::sendRaw",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPClient,0))){
    SWIG_fail_ptr("TCPClient_sendRaw",1,SWIGTYPE_p_ofxTCPClient); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->sendRaw(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_TCPClient_sendRawMsg(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *arg1 = (ofxTCPClient *) 0 ;
  char *arg2 = (char *) 0 ; int arg3 ; bool result; SWIG_check_num_args("ofxTCPClient::sendRawMsg",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPClient::sendRawMsg",1,"ofxTCPClient *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxTCPClient::sendRawMsg",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTCPClient::sendRawMsg",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPClient,0))){
    SWIG_fail_ptr("TCPClient_sendRawMsg",1,SWIGTYPE_p_ofxTCPClient); }  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = (bool)(arg1)->sendRawMsg((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPClient_getNumReceivedBytes(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *arg1 = (ofxTCPClient *) 0 ;
  int result; SWIG_check_num_args("ofxTCPClient::getNumReceivedBytes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPClient::getNumReceivedBytes",1,"ofxTCPClient *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPClient,0))){
    SWIG_fail_ptr("TCPClient_getNumReceivedBytes",1,SWIGTYPE_p_ofxTCPClient); }  result = (int)(arg1)->getNumReceivedBytes();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPClient_sendRawBytes(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *arg1 = (ofxTCPClient *) 0 ;
  char *arg2 = (char *) 0 ; int arg3 ; bool result; SWIG_check_num_args("ofxTCPClient::sendRawBytes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPClient::sendRawBytes",1,"ofxTCPClient *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxTCPClient::sendRawBytes",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTCPClient::sendRawBytes",3,"int const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPClient,0))){
    SWIG_fail_ptr("TCPClient_sendRawBytes",1,SWIGTYPE_p_ofxTCPClient); }  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int const)lua_tonumber(L, 3); result = (bool)(arg1)->sendRawBytes((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPClient_receive(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *arg1 = (ofxTCPClient *) 0 ;
  std::string result; SWIG_check_num_args("ofxTCPClient::receive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPClient::receive",1,"ofxTCPClient *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPClient,0))){
    SWIG_fail_ptr("TCPClient_receive",1,SWIGTYPE_p_ofxTCPClient); }  result = (arg1)->receive();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_TCPClient_receiveRaw(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *arg1 = (ofxTCPClient *) 0 ;
  std::string result; SWIG_check_num_args("ofxTCPClient::receiveRaw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPClient::receiveRaw",1,"ofxTCPClient *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPClient,0))){
    SWIG_fail_ptr("TCPClient_receiveRaw",1,SWIGTYPE_p_ofxTCPClient); }  result = (arg1)->receiveRaw();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_TCPClient_receiveRawBytes(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *arg1 = (ofxTCPClient *) 0 ;
  char *arg2 = (char *) 0 ; int arg3 ; int result; SWIG_check_num_args("ofxTCPClient::receiveRawBytes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPClient::receiveRawBytes",1,"ofxTCPClient *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxTCPClient::receiveRawBytes",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTCPClient::receiveRawBytes",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPClient,0))){
    SWIG_fail_ptr("TCPClient_receiveRawBytes",1,SWIGTYPE_p_ofxTCPClient); }  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = (int)(arg1)->receiveRawBytes(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPClient_peekReceiveRawBytes(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *arg1 = (ofxTCPClient *) 0 ;
  char *arg2 = (char *) 0 ; int arg3 ; int result; SWIG_check_num_args("ofxTCPClient::peekReceiveRawBytes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPClient::peekReceiveRawBytes",1,"ofxTCPClient *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxTCPClient::peekReceiveRawBytes",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTCPClient::peekReceiveRawBytes",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPClient,0))){
    SWIG_fail_ptr("TCPClient_peekReceiveRawBytes",1,SWIGTYPE_p_ofxTCPClient); }  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = (int)(arg1)->peekReceiveRawBytes(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPClient_receiveRawMsg(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *arg1 = (ofxTCPClient *) 0 ;
  char *arg2 = (char *) 0 ; int arg3 ; int result; SWIG_check_num_args("ofxTCPClient::receiveRawMsg",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPClient::receiveRawMsg",1,"ofxTCPClient *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxTCPClient::receiveRawMsg",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTCPClient::receiveRawMsg",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPClient,0))){
    SWIG_fail_ptr("TCPClient_receiveRawMsg",1,SWIGTYPE_p_ofxTCPClient); }  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = (int)(arg1)->receiveRawMsg(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPClient_isConnected(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *arg1 = (ofxTCPClient *) 0 ; bool result;
  SWIG_check_num_args("ofxTCPClient::isConnected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPClient::isConnected",1,"ofxTCPClient *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPClient,0))){
    SWIG_fail_ptr("TCPClient_isConnected",1,SWIGTYPE_p_ofxTCPClient); }  result = (bool)(arg1)->isConnected();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPClient_getPort(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *arg1 = (ofxTCPClient *) 0 ; int result;
  SWIG_check_num_args("ofxTCPClient::getPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPClient::getPort",1,"ofxTCPClient *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPClient,0))){
    SWIG_fail_ptr("TCPClient_getPort",1,SWIGTYPE_p_ofxTCPClient); }  result = (int)(arg1)->getPort();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPClient_getIP(lua_State* L) { int SWIG_arg = 0; ofxTCPClient *arg1 = (ofxTCPClient *) 0 ; std::string result;
  SWIG_check_num_args("ofxTCPClient::getIP",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPClient::getIP",1,"ofxTCPClient *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPClient,0))){
    SWIG_fail_ptr("TCPClient_getIP",1,SWIGTYPE_p_ofxTCPClient); }  result = (arg1)->getIP();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static void swig_delete_TCPClient(void *obj) {
ofxTCPClient *arg1 = (ofxTCPClient *) obj;
delete arg1;
}
static int _proxy__wrap_new_TCPClient(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TCPClient);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TCPClient_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TCPClient_methods[]= {
    { "setVerbose", _wrap_TCPClient_setVerbose},
    { "setup", _wrap_TCPClient_setup},
    { "setMessageDelimiter", _wrap_TCPClient_setMessageDelimiter},
    { "close", _wrap_TCPClient_close},
    { "send", _wrap_TCPClient_send},
    { "sendRaw", _wrap_TCPClient_sendRaw},
    { "sendRawMsg", _wrap_TCPClient_sendRawMsg},
    { "getNumReceivedBytes", _wrap_TCPClient_getNumReceivedBytes},
    { "sendRawBytes", _wrap_TCPClient_sendRawBytes},
    { "receive", _wrap_TCPClient_receive},
    { "receiveRaw", _wrap_TCPClient_receiveRaw},
    { "receiveRawBytes", _wrap_TCPClient_receiveRawBytes},
    { "peekReceiveRawBytes", _wrap_TCPClient_peekReceiveRawBytes},
    { "receiveRawMsg", _wrap_TCPClient_receiveRawMsg},
    { "isConnected", _wrap_TCPClient_isConnected},
    { "getPort", _wrap_TCPClient_getPort},
    { "getIP", _wrap_TCPClient_getIP},
    {0,0}
};
static swig_lua_method swig_TCPClient_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TCPClient_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TCPClient_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TCPClient_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TCPClient_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TCPClient_Sf_SwigStatic = {
    "TCPClient",
    swig_TCPClient_Sf_SwigStatic_methods,
    swig_TCPClient_Sf_SwigStatic_attributes,
    swig_TCPClient_Sf_SwigStatic_constants,
    swig_TCPClient_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TCPClient_bases[] = {0};
static const char *swig_TCPClient_base_names[] = {0};
static swig_lua_class _wrap_class_TCPClient = { "TCPClient", "TCPClient", &SWIGTYPE_p_ofxTCPClient,_proxy__wrap_new_TCPClient, swig_delete_TCPClient, swig_TCPClient_methods, swig_TCPClient_attributes, &swig_TCPClient_Sf_SwigStatic, swig_TCPClient_meta, swig_TCPClient_bases, swig_TCPClient_base_names };

static int _wrap_new_TCPManager(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *result = 0 ;
  SWIG_check_num_args("ofxTCPManager::ofxTCPManager",0,0) result = (ofxTCPManager *)new ofxTCPManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTCPManager,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_TCPManager_Close(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ; bool result;
  SWIG_check_num_args("ofxTCPManager::Close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::Close",1,"ofxTCPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_Close",1,SWIGTYPE_p_ofxTCPManager); }  result = (bool)(arg1)->Close();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_Create(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ; bool result;
  SWIG_check_num_args("ofxTCPManager::Create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::Create",1,"ofxTCPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_Create",1,SWIGTYPE_p_ofxTCPManager); }  result = (bool)(arg1)->Create();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_Listen(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ; int arg2 ;
  bool result; SWIG_check_num_args("ofxTCPManager::Listen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::Listen",1,"ofxTCPManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPManager::Listen",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_Listen",1,SWIGTYPE_p_ofxTCPManager); }  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->Listen(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_Connect(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  char *arg2 = (char *) 0 ; unsigned short arg3 ; bool result; SWIG_check_num_args("ofxTCPManager::Connect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::Connect",1,"ofxTCPManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxTCPManager::Connect",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTCPManager::Connect",3,"unsigned short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_Connect",1,SWIGTYPE_p_ofxTCPManager); }  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned short)lua_tonumber(L, 3);
  result = (bool)(arg1)->Connect((char const *)arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_Bind(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  unsigned short arg2 ; bool result; SWIG_check_num_args("ofxTCPManager::Bind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::Bind",1,"ofxTCPManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPManager::Bind",2,"unsigned short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_Bind",1,SWIGTYPE_p_ofxTCPManager); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned short)lua_tonumber(L, 2);
  result = (bool)(arg1)->Bind(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_Accept(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  ofxTCPManager *arg2 = 0 ; bool result; SWIG_check_num_args("ofxTCPManager::Accept",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::Accept",1,"ofxTCPManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTCPManager::Accept",2,"ofxTCPManager &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_Accept",1,SWIGTYPE_p_ofxTCPManager); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_Accept",2,SWIGTYPE_p_ofxTCPManager); }  result = (bool)(arg1)->Accept(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_Send(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  char *arg2 = (char *) 0 ; int arg3 ; int result; SWIG_check_num_args("ofxTCPManager::Send",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::Send",1,"ofxTCPManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxTCPManager::Send",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTCPManager::Send",3,"int const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_Send",1,SWIGTYPE_p_ofxTCPManager); }  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int const)lua_tonumber(L, 3); result = (int)(arg1)->Send((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_SendAll(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  char *arg2 = (char *) 0 ; int arg3 ; int result; SWIG_check_num_args("ofxTCPManager::SendAll",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::SendAll",1,"ofxTCPManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxTCPManager::SendAll",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTCPManager::SendAll",3,"int const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_SendAll",1,SWIGTYPE_p_ofxTCPManager); }  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int const)lua_tonumber(L, 3); result = (int)(arg1)->SendAll((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_PeekReceive(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  char *arg2 = (char *) 0 ; int arg3 ; int result; SWIG_check_num_args("ofxTCPManager::PeekReceive",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::PeekReceive",1,"ofxTCPManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxTCPManager::PeekReceive",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTCPManager::PeekReceive",3,"int const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_PeekReceive",1,SWIGTYPE_p_ofxTCPManager); }  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int const)lua_tonumber(L, 3); result = (int)(arg1)->PeekReceive(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_Receive(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  char *arg2 = (char *) 0 ; int arg3 ; int result; SWIG_check_num_args("ofxTCPManager::Receive",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::Receive",1,"ofxTCPManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxTCPManager::Receive",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTCPManager::Receive",3,"int const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_Receive",1,SWIGTYPE_p_ofxTCPManager); }  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int const)lua_tonumber(L, 3); result = (int)(arg1)->Receive(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_ReceiveAll(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  char *arg2 = (char *) 0 ; int arg3 ; int result; SWIG_check_num_args("ofxTCPManager::ReceiveAll",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::ReceiveAll",1,"ofxTCPManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxTCPManager::ReceiveAll",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTCPManager::ReceiveAll",3,"int const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_ReceiveAll",1,SWIGTYPE_p_ofxTCPManager); }  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int const)lua_tonumber(L, 3); result = (int)(arg1)->ReceiveAll(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_Write(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  char *arg2 = (char *) 0 ; int arg3 ; int result; SWIG_check_num_args("ofxTCPManager::Write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::Write",1,"ofxTCPManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxTCPManager::Write",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTCPManager::Write",3,"int const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_Write",1,SWIGTYPE_p_ofxTCPManager); }  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int const)lua_tonumber(L, 3); result = (int)(arg1)->Write((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_GetRemoteAddr(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  LPINETADDR arg2 = (LPINETADDR) 0 ; bool result; SWIG_check_num_args("ofxTCPManager::GetRemoteAddr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::GetRemoteAddr",1,"ofxTCPManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxTCPManager::GetRemoteAddr",2,"LPINETADDR");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_GetRemoteAddr",1,SWIGTYPE_p_ofxTCPManager); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_InetAddr,0))){
    SWIG_fail_ptr("TCPManager_GetRemoteAddr",2,SWIGTYPE_p_InetAddr); }  result = (bool)(arg1)->GetRemoteAddr(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_GetInetAddr(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  LPINETADDR arg2 = (LPINETADDR) 0 ; bool result; SWIG_check_num_args("ofxTCPManager::GetInetAddr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::GetInetAddr",1,"ofxTCPManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxTCPManager::GetInetAddr",2,"LPINETADDR");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_GetInetAddr",1,SWIGTYPE_p_ofxTCPManager); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_InetAddr,0))){
    SWIG_fail_ptr("TCPManager_GetInetAddr",2,SWIGTYPE_p_InetAddr); }  result = (bool)(arg1)->GetInetAddr(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_SetTimeoutConnect(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  int arg2 ; SWIG_check_num_args("ofxTCPManager::SetTimeoutConnect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::SetTimeoutConnect",1,"ofxTCPManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPManager::SetTimeoutConnect",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_SetTimeoutConnect",1,SWIGTYPE_p_ofxTCPManager); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetTimeoutConnect(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_SetTimeoutSend(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  int arg2 ; SWIG_check_num_args("ofxTCPManager::SetTimeoutSend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::SetTimeoutSend",1,"ofxTCPManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPManager::SetTimeoutSend",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_SetTimeoutSend",1,SWIGTYPE_p_ofxTCPManager); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetTimeoutSend(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_SetTimeoutReceive(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  int arg2 ; SWIG_check_num_args("ofxTCPManager::SetTimeoutReceive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::SetTimeoutReceive",1,"ofxTCPManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPManager::SetTimeoutReceive",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_SetTimeoutReceive",1,SWIGTYPE_p_ofxTCPManager); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetTimeoutReceive(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_SetTimeoutAccept(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  int arg2 ; SWIG_check_num_args("ofxTCPManager::SetTimeoutAccept",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::SetTimeoutAccept",1,"ofxTCPManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPManager::SetTimeoutAccept",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_SetTimeoutAccept",1,SWIGTYPE_p_ofxTCPManager); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetTimeoutAccept(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_GetTimeoutConnect(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  int result; SWIG_check_num_args("ofxTCPManager::GetTimeoutConnect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::GetTimeoutConnect",1,"ofxTCPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_GetTimeoutConnect",1,SWIGTYPE_p_ofxTCPManager); }  result = (int)(arg1)->GetTimeoutConnect();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_GetTimeoutSend(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  int result; SWIG_check_num_args("ofxTCPManager::GetTimeoutSend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::GetTimeoutSend",1,"ofxTCPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_GetTimeoutSend",1,SWIGTYPE_p_ofxTCPManager); }  result = (int)(arg1)->GetTimeoutSend();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_GetTimeoutReceive(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  int result; SWIG_check_num_args("ofxTCPManager::GetTimeoutReceive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::GetTimeoutReceive",1,"ofxTCPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_GetTimeoutReceive",1,SWIGTYPE_p_ofxTCPManager); }  result = (int)(arg1)->GetTimeoutReceive();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_GetTimeoutAccept(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  int result; SWIG_check_num_args("ofxTCPManager::GetTimeoutAccept",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::GetTimeoutAccept",1,"ofxTCPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_GetTimeoutAccept",1,SWIGTYPE_p_ofxTCPManager); }  result = (int)(arg1)->GetTimeoutAccept();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_SetReceiveBufferSize(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  int arg2 ; bool result; SWIG_check_num_args("ofxTCPManager::SetReceiveBufferSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::SetReceiveBufferSize",1,"ofxTCPManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPManager::SetReceiveBufferSize",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_SetReceiveBufferSize",1,SWIGTYPE_p_ofxTCPManager); }  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->SetReceiveBufferSize(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_SetSendBufferSize(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  int arg2 ; bool result; SWIG_check_num_args("ofxTCPManager::SetSendBufferSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::SetSendBufferSize",1,"ofxTCPManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPManager::SetSendBufferSize",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_SetSendBufferSize",1,SWIGTYPE_p_ofxTCPManager); }  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->SetSendBufferSize(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_GetReceiveBufferSize(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  int result; SWIG_check_num_args("ofxTCPManager::GetReceiveBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::GetReceiveBufferSize",1,"ofxTCPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_GetReceiveBufferSize",1,SWIGTYPE_p_ofxTCPManager); } 
  result = (int)(arg1)->GetReceiveBufferSize(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_GetSendBufferSize(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  int result; SWIG_check_num_args("ofxTCPManager::GetSendBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::GetSendBufferSize",1,"ofxTCPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_GetSendBufferSize",1,SWIGTYPE_p_ofxTCPManager); }  result = (int)(arg1)->GetSendBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_GetMaxConnections(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  int result; SWIG_check_num_args("ofxTCPManager::GetMaxConnections",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::GetMaxConnections",1,"ofxTCPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_GetMaxConnections",1,SWIGTYPE_p_ofxTCPManager); }  result = (int)(arg1)->GetMaxConnections();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_SetNonBlocking(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  bool arg2 ; bool result; SWIG_check_num_args("ofxTCPManager::SetNonBlocking",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::SetNonBlocking",1,"ofxTCPManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTCPManager::SetNonBlocking",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_SetNonBlocking",1,SWIGTYPE_p_ofxTCPManager); }  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->SetNonBlocking(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_IsNonBlocking(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  bool result; SWIG_check_num_args("ofxTCPManager::IsNonBlocking",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::IsNonBlocking",1,"ofxTCPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_IsNonBlocking",1,SWIGTYPE_p_ofxTCPManager); }  result = (bool)(arg1)->IsNonBlocking();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_CheckHost(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  char *arg2 = (char *) 0 ; bool result; SWIG_check_num_args("ofxTCPManager::CheckHost",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::CheckHost",1,"ofxTCPManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxTCPManager::CheckHost",2,"char const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_CheckHost",1,SWIGTYPE_p_ofxTCPManager); }  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->CheckHost((char const *)arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_CleanUp(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  SWIG_check_num_args("ofxTCPManager::CleanUp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::CleanUp",1,"ofxTCPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_CleanUp",1,SWIGTYPE_p_ofxTCPManager); }  (arg1)->CleanUp(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPManager_CheckIsConnected(lua_State* L) { int SWIG_arg = 0; ofxTCPManager *arg1 = (ofxTCPManager *) 0 ;
  bool result; SWIG_check_num_args("ofxTCPManager::CheckIsConnected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPManager::CheckIsConnected",1,"ofxTCPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPManager,0))){
    SWIG_fail_ptr("TCPManager_CheckIsConnected",1,SWIGTYPE_p_ofxTCPManager); }  result = (bool)(arg1)->CheckIsConnected();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_TCPManager(void *obj) {
ofxTCPManager *arg1 = (ofxTCPManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_TCPManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TCPManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TCPManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TCPManager_methods[]= {
    { "Close", _wrap_TCPManager_Close},
    { "Create", _wrap_TCPManager_Create},
    { "Listen", _wrap_TCPManager_Listen},
    { "Connect", _wrap_TCPManager_Connect},
    { "Bind", _wrap_TCPManager_Bind},
    { "Accept", _wrap_TCPManager_Accept},
    { "Send", _wrap_TCPManager_Send},
    { "SendAll", _wrap_TCPManager_SendAll},
    { "PeekReceive", _wrap_TCPManager_PeekReceive},
    { "Receive", _wrap_TCPManager_Receive},
    { "ReceiveAll", _wrap_TCPManager_ReceiveAll},
    { "Write", _wrap_TCPManager_Write},
    { "GetRemoteAddr", _wrap_TCPManager_GetRemoteAddr},
    { "GetInetAddr", _wrap_TCPManager_GetInetAddr},
    { "SetTimeoutConnect", _wrap_TCPManager_SetTimeoutConnect},
    { "SetTimeoutSend", _wrap_TCPManager_SetTimeoutSend},
    { "SetTimeoutReceive", _wrap_TCPManager_SetTimeoutReceive},
    { "SetTimeoutAccept", _wrap_TCPManager_SetTimeoutAccept},
    { "GetTimeoutConnect", _wrap_TCPManager_GetTimeoutConnect},
    { "GetTimeoutSend", _wrap_TCPManager_GetTimeoutSend},
    { "GetTimeoutReceive", _wrap_TCPManager_GetTimeoutReceive},
    { "GetTimeoutAccept", _wrap_TCPManager_GetTimeoutAccept},
    { "SetReceiveBufferSize", _wrap_TCPManager_SetReceiveBufferSize},
    { "SetSendBufferSize", _wrap_TCPManager_SetSendBufferSize},
    { "GetReceiveBufferSize", _wrap_TCPManager_GetReceiveBufferSize},
    { "GetSendBufferSize", _wrap_TCPManager_GetSendBufferSize},
    { "GetMaxConnections", _wrap_TCPManager_GetMaxConnections},
    { "SetNonBlocking", _wrap_TCPManager_SetNonBlocking},
    { "IsNonBlocking", _wrap_TCPManager_IsNonBlocking},
    { "CheckHost", _wrap_TCPManager_CheckHost},
    { "CleanUp", _wrap_TCPManager_CleanUp},
    { "CheckIsConnected", _wrap_TCPManager_CheckIsConnected},
    {0,0}
};
static swig_lua_method swig_TCPManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TCPManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TCPManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TCPManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TCPManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TCPManager_Sf_SwigStatic = {
    "TCPManager",
    swig_TCPManager_Sf_SwigStatic_methods,
    swig_TCPManager_Sf_SwigStatic_attributes,
    swig_TCPManager_Sf_SwigStatic_constants,
    swig_TCPManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TCPManager_bases[] = {0};
static const char *swig_TCPManager_base_names[] = {0};
static swig_lua_class _wrap_class_TCPManager = { "TCPManager", "TCPManager", &SWIGTYPE_p_ofxTCPManager,_proxy__wrap_new_TCPManager, swig_delete_TCPManager, swig_TCPManager_methods, swig_TCPManager_attributes, &swig_TCPManager_Sf_SwigStatic, swig_TCPManager_meta, swig_TCPManager_bases, swig_TCPManager_base_names };

static int _wrap_new_TCPServer(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *result = 0 ;
  SWIG_check_num_args("ofxTCPServer::ofxTCPServer",0,0) result = (ofxTCPServer *)new ofxTCPServer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxTCPServer,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_TCPServer_setVerbose(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofxTCPServer::setVerbose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::setVerbose",1,"ofxTCPServer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxTCPServer::setVerbose",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_setVerbose",1,SWIGTYPE_p_ofxTCPServer); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setVerbose(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_setup__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ; int arg2 ;
  bool arg3 ; bool result; SWIG_check_num_args("ofxTCPServer::setup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::setup",1,"ofxTCPServer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPServer::setup",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxTCPServer::setup",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_setup",1,SWIGTYPE_p_ofxTCPServer); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0); result = (bool)(arg1)->setup(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_setup__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ; int arg2 ;
  bool result; SWIG_check_num_args("ofxTCPServer::setup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::setup",1,"ofxTCPServer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPServer::setup",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_setup",1,SWIGTYPE_p_ofxTCPServer); }  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setup(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_setup__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ;
  ofxTCPSettings *arg2 = 0 ; bool result; SWIG_check_num_args("ofxTCPServer::setup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::setup",1,"ofxTCPServer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxTCPServer::setup",2,"ofxTCPSettings const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_setup",1,SWIGTYPE_p_ofxTCPServer); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxTCPSettings,0))){
    SWIG_fail_ptr("TCPServer_setup",2,SWIGTYPE_p_ofxTCPSettings); } 
  result = (bool)(arg1)->setup((ofxTCPSettings const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_setup(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxTCPServer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxTCPSettings, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_TCPServer_setup__SWIG_2(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxTCPServer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_TCPServer_setup__SWIG_1(L);}  }
     }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxTCPServer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_TCPServer_setup__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TCPServer_setup'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxTCPServer::setup(int,bool)\n" "    ofxTCPServer::setup(int)\n" "    ofxTCPServer::setup(ofxTCPSettings const &)\n");
  lua_error(L);return 0; }
static int _wrap_TCPServer_setMessageDelimiter(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ;
  std::string arg2 ; SWIG_check_num_args("ofxTCPServer::setMessageDelimiter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::setMessageDelimiter",1,"ofxTCPServer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTCPServer::setMessageDelimiter",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_setMessageDelimiter",1,SWIGTYPE_p_ofxTCPServer); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->setMessageDelimiter(arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_close(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ; bool result;
  SWIG_check_num_args("ofxTCPServer::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::close",1,"ofxTCPServer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_close",1,SWIGTYPE_p_ofxTCPServer); }  result = (bool)(arg1)->close();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_disconnectClient(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ;
  int arg2 ; bool result; SWIG_check_num_args("ofxTCPServer::disconnectClient",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::disconnectClient",1,"ofxTCPServer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPServer::disconnectClient",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_disconnectClient",1,SWIGTYPE_p_ofxTCPServer); }  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->disconnectClient(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_disconnectAllClients(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ;
  bool result; SWIG_check_num_args("ofxTCPServer::disconnectAllClients",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::disconnectAllClients",1,"ofxTCPServer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_disconnectAllClients",1,SWIGTYPE_p_ofxTCPServer); }  result = (bool)(arg1)->disconnectAllClients();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_getNumClients(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ; int result;
  SWIG_check_num_args("ofxTCPServer::getNumClients",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::getNumClients",1,"ofxTCPServer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_getNumClients",1,SWIGTYPE_p_ofxTCPServer); }  result = (int)(arg1)->getNumClients();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_getLastID(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ; int result;
  SWIG_check_num_args("ofxTCPServer::getLastID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::getLastID",1,"ofxTCPServer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_getLastID",1,SWIGTYPE_p_ofxTCPServer); }  result = (int)(arg1)->getLastID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_getPort(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ; int result;
  SWIG_check_num_args("ofxTCPServer::getPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::getPort",1,"ofxTCPServer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_getPort",1,SWIGTYPE_p_ofxTCPServer); }  result = (int)(arg1)->getPort();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_isConnected(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ; bool result;
  SWIG_check_num_args("ofxTCPServer::isConnected",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::isConnected",1,"ofxTCPServer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_isConnected",1,SWIGTYPE_p_ofxTCPServer); }  result = (bool)(arg1)->isConnected();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_getClientPort(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ; int arg2 ;
  int result; SWIG_check_num_args("ofxTCPServer::getClientPort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::getClientPort",1,"ofxTCPServer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPServer::getClientPort",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_getClientPort",1,SWIGTYPE_p_ofxTCPServer); }  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->getClientPort(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_getClientIP(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ; int arg2 ;
  std::string result; SWIG_check_num_args("ofxTCPServer::getClientIP",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::getClientIP",1,"ofxTCPServer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPServer::getClientIP",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_getClientIP",1,SWIGTYPE_p_ofxTCPServer); }  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->getClientIP(arg2); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_isClientConnected(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ;
  int arg2 ; bool result; SWIG_check_num_args("ofxTCPServer::isClientConnected",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::isClientConnected",1,"ofxTCPServer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPServer::isClientConnected",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_isClientConnected",1,SWIGTYPE_p_ofxTCPServer); }  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->isClientConnected(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_send(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ; int arg2 ;
  std::string arg3 ; bool result; SWIG_check_num_args("ofxTCPServer::send",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::send",1,"ofxTCPServer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPServer::send",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxTCPServer::send",3,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_send",1,SWIGTYPE_p_ofxTCPServer); }  arg2 = (int)lua_tonumber(L, 2);
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); result = (bool)(arg1)->send(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_sendToAll(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ;
  std::string arg2 ; bool result; SWIG_check_num_args("ofxTCPServer::sendToAll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::sendToAll",1,"ofxTCPServer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxTCPServer::sendToAll",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_sendToAll",1,SWIGTYPE_p_ofxTCPServer); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->sendToAll(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_sendRawMsg(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ; int arg2 ;
  char *arg3 = (char *) 0 ; int arg4 ; bool result; SWIG_check_num_args("ofxTCPServer::sendRawMsg",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::sendRawMsg",1,"ofxTCPServer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPServer::sendRawMsg",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ofxTCPServer::sendRawMsg",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxTCPServer::sendRawMsg",4,"int const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_sendRawMsg",1,SWIGTYPE_p_ofxTCPServer); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3); arg4 = (int const)lua_tonumber(L, 4);
  result = (bool)(arg1)->sendRawMsg(arg2,(char const *)arg3,arg4); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_sendRawMsgToAll(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ;
  char *arg2 = (char *) 0 ; int arg3 ; bool result; SWIG_check_num_args("ofxTCPServer::sendRawMsgToAll",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::sendRawMsgToAll",1,"ofxTCPServer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxTCPServer::sendRawMsgToAll",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTCPServer::sendRawMsgToAll",3,"int const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_sendRawMsgToAll",1,SWIGTYPE_p_ofxTCPServer); }  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int const)lua_tonumber(L, 3); result = (bool)(arg1)->sendRawMsgToAll((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_sendRawBytes(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ; int arg2 ;
  char *arg3 = (char *) 0 ; int arg4 ; bool result; SWIG_check_num_args("ofxTCPServer::sendRawBytes",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::sendRawBytes",1,"ofxTCPServer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPServer::sendRawBytes",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ofxTCPServer::sendRawBytes",3,"char const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxTCPServer::sendRawBytes",4,"int const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_sendRawBytes",1,SWIGTYPE_p_ofxTCPServer); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3); arg4 = (int const)lua_tonumber(L, 4);
  result = (bool)(arg1)->sendRawBytes(arg2,(char const *)arg3,arg4); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_sendRawBytesToAll(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ;
  char *arg2 = (char *) 0 ; int arg3 ; bool result; SWIG_check_num_args("ofxTCPServer::sendRawBytesToAll",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::sendRawBytesToAll",1,"ofxTCPServer *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxTCPServer::sendRawBytesToAll",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxTCPServer::sendRawBytesToAll",3,"int const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_sendRawBytesToAll",1,SWIGTYPE_p_ofxTCPServer); }  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int const)lua_tonumber(L, 3); result = (bool)(arg1)->sendRawBytesToAll((char const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_getNumReceivedBytes(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ;
  int arg2 ; int result; SWIG_check_num_args("ofxTCPServer::getNumReceivedBytes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::getNumReceivedBytes",1,"ofxTCPServer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPServer::getNumReceivedBytes",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_getNumReceivedBytes",1,SWIGTYPE_p_ofxTCPServer); }  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(arg1)->getNumReceivedBytes(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_receive(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ; int arg2 ;
  std::string result; SWIG_check_num_args("ofxTCPServer::receive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::receive",1,"ofxTCPServer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPServer::receive",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_receive",1,SWIGTYPE_p_ofxTCPServer); }  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->receive(arg2); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_receiveRawMsg(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ; int arg2 ;
  char *arg3 = (char *) 0 ; int arg4 ; int result; SWIG_check_num_args("ofxTCPServer::receiveRawMsg",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::receiveRawMsg",1,"ofxTCPServer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPServer::receiveRawMsg",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ofxTCPServer::receiveRawMsg",3,"char *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxTCPServer::receiveRawMsg",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_receiveRawMsg",1,SWIGTYPE_p_ofxTCPServer); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3); arg4 = (int)lua_tonumber(L, 4); result = (int)(arg1)->receiveRawMsg(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_receiveRawBytes(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ;
  int arg2 ; char *arg3 = (char *) 0 ; int arg4 ; int result; SWIG_check_num_args("ofxTCPServer::receiveRawBytes",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::receiveRawBytes",1,"ofxTCPServer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPServer::receiveRawBytes",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ofxTCPServer::receiveRawBytes",3,"char *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxTCPServer::receiveRawBytes",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_receiveRawBytes",1,SWIGTYPE_p_ofxTCPServer); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3); arg4 = (int)lua_tonumber(L, 4); result = (int)(arg1)->receiveRawBytes(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_peekReceiveRawBytes(lua_State* L) { int SWIG_arg = 0; ofxTCPServer *arg1 = (ofxTCPServer *) 0 ;
  int arg2 ; char *arg3 = (char *) 0 ; int arg4 ; int result; SWIG_check_num_args("ofxTCPServer::peekReceiveRawBytes",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::peekReceiveRawBytes",1,"ofxTCPServer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPServer::peekReceiveRawBytes",2,"int");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ofxTCPServer::peekReceiveRawBytes",3,"char *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxTCPServer::peekReceiveRawBytes",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_peekReceiveRawBytes",1,SWIGTYPE_p_ofxTCPServer); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3); arg4 = (int)lua_tonumber(L, 4); result = (int)(arg1)->peekReceiveRawBytes(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_waitConnectedClient__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxTCPServer *arg1 = (ofxTCPServer *) 0 ; SWIG_check_num_args("ofxTCPServer::waitConnectedClient",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::waitConnectedClient",1,"ofxTCPServer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_waitConnectedClient",1,SWIGTYPE_p_ofxTCPServer); }  (arg1)->waitConnectedClient(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_waitConnectedClient__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxTCPServer *arg1 = (ofxTCPServer *) 0 ; int arg2 ; SWIG_check_num_args("ofxTCPServer::waitConnectedClient",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxTCPServer::waitConnectedClient",1,"ofxTCPServer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxTCPServer::waitConnectedClient",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxTCPServer,0))){
    SWIG_fail_ptr("TCPServer_waitConnectedClient",1,SWIGTYPE_p_ofxTCPServer); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->waitConnectedClient(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TCPServer_waitConnectedClient(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxTCPServer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_TCPServer_waitConnectedClient__SWIG_0(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxTCPServer, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_TCPServer_waitConnectedClient__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TCPServer_waitConnectedClient'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxTCPServer::waitConnectedClient()\n"
  "    ofxTCPServer::waitConnectedClient(int)\n"); lua_error(L);return 0; }
static void swig_delete_TCPServer(void *obj) {
ofxTCPServer *arg1 = (ofxTCPServer *) obj;
delete arg1;
}
static int _proxy__wrap_new_TCPServer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TCPServer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TCPServer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TCPServer_methods[]= {
    { "setVerbose", _wrap_TCPServer_setVerbose},
    { "setup", _wrap_TCPServer_setup},
    { "setMessageDelimiter", _wrap_TCPServer_setMessageDelimiter},
    { "close", _wrap_TCPServer_close},
    { "disconnectClient", _wrap_TCPServer_disconnectClient},
    { "disconnectAllClients", _wrap_TCPServer_disconnectAllClients},
    { "getNumClients", _wrap_TCPServer_getNumClients},
    { "getLastID", _wrap_TCPServer_getLastID},
    { "getPort", _wrap_TCPServer_getPort},
    { "isConnected", _wrap_TCPServer_isConnected},
    { "getClientPort", _wrap_TCPServer_getClientPort},
    { "getClientIP", _wrap_TCPServer_getClientIP},
    { "isClientConnected", _wrap_TCPServer_isClientConnected},
    { "send", _wrap_TCPServer_send},
    { "sendToAll", _wrap_TCPServer_sendToAll},
    { "sendRawMsg", _wrap_TCPServer_sendRawMsg},
    { "sendRawMsgToAll", _wrap_TCPServer_sendRawMsgToAll},
    { "sendRawBytes", _wrap_TCPServer_sendRawBytes},
    { "sendRawBytesToAll", _wrap_TCPServer_sendRawBytesToAll},
    { "getNumReceivedBytes", _wrap_TCPServer_getNumReceivedBytes},
    { "receive", _wrap_TCPServer_receive},
    { "receiveRawMsg", _wrap_TCPServer_receiveRawMsg},
    { "receiveRawBytes", _wrap_TCPServer_receiveRawBytes},
    { "peekReceiveRawBytes", _wrap_TCPServer_peekReceiveRawBytes},
    { "waitConnectedClient", _wrap_TCPServer_waitConnectedClient},
    {0,0}
};
static swig_lua_method swig_TCPServer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TCPServer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TCPServer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TCPServer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TCPServer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TCPServer_Sf_SwigStatic = {
    "TCPServer",
    swig_TCPServer_Sf_SwigStatic_methods,
    swig_TCPServer_Sf_SwigStatic_attributes,
    swig_TCPServer_Sf_SwigStatic_constants,
    swig_TCPServer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TCPServer_bases[] = {0};
static const char *swig_TCPServer_base_names[] = {0};
static swig_lua_class _wrap_class_TCPServer = { "TCPServer", "TCPServer", &SWIGTYPE_p_ofxTCPServer,_proxy__wrap_new_TCPServer, swig_delete_TCPServer, swig_TCPServer_methods, swig_TCPServer_attributes, &swig_TCPServer_Sf_SwigStatic, swig_TCPServer_meta, swig_TCPServer_bases, swig_TCPServer_base_names };

static int _wrap_new_UDPManager(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *result = 0 ;
  SWIG_check_num_args("ofxUDPManager::ofxUDPManager",0,0) result = (ofxUDPManager *)new ofxUDPManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxUDPManager,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_UDPManager_HasSocket(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ; bool result;
  SWIG_check_num_args("ofxUDPManager::HasSocket",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::HasSocket",1,"ofxUDPManager const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_HasSocket",1,SWIGTYPE_p_ofxUDPManager); } 
  result = (bool)((ofxUDPManager const *)arg1)->HasSocket(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_Close(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ; bool result;
  SWIG_check_num_args("ofxUDPManager::Close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::Close",1,"ofxUDPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_Close",1,SWIGTYPE_p_ofxUDPManager); }  result = (bool)(arg1)->Close();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_Setup(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  ofxUDPSettings *arg2 = 0 ; bool result; SWIG_check_num_args("ofxUDPManager::Setup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::Setup",1,"ofxUDPManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxUDPManager::Setup",2,"ofxUDPSettings const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_Setup",1,SWIGTYPE_p_ofxUDPManager); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxUDPSettings,0))){
    SWIG_fail_ptr("UDPManager_Setup",2,SWIGTYPE_p_ofxUDPSettings); } 
  result = (bool)(arg1)->Setup((ofxUDPSettings const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_Create(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ; bool result;
  SWIG_check_num_args("ofxUDPManager::Create",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::Create",1,"ofxUDPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_Create",1,SWIGTYPE_p_ofxUDPManager); }  result = (bool)(arg1)->Create();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_Connect(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  char *arg2 = (char *) 0 ; unsigned short arg3 ; bool result; SWIG_check_num_args("ofxUDPManager::Connect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::Connect",1,"ofxUDPManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxUDPManager::Connect",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxUDPManager::Connect",3,"unsigned short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_Connect",1,SWIGTYPE_p_ofxUDPManager); }  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned short)lua_tonumber(L, 3);
  result = (bool)(arg1)->Connect((char const *)arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_ConnectMcast(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  char *arg2 = (char *) 0 ; unsigned short arg3 ; bool result; SWIG_check_num_args("ofxUDPManager::ConnectMcast",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::ConnectMcast",1,"ofxUDPManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxUDPManager::ConnectMcast",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxUDPManager::ConnectMcast",3,"unsigned short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_ConnectMcast",1,SWIGTYPE_p_ofxUDPManager); }  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned short)lua_tonumber(L, 3);
  result = (bool)(arg1)->ConnectMcast(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_Bind(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  unsigned short arg2 ; bool result; SWIG_check_num_args("ofxUDPManager::Bind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::Bind",1,"ofxUDPManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxUDPManager::Bind",2,"unsigned short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_Bind",1,SWIGTYPE_p_ofxUDPManager); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned short)lua_tonumber(L, 2);
  result = (bool)(arg1)->Bind(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_BindMcast(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  char *arg2 = (char *) 0 ; unsigned short arg3 ; bool result; SWIG_check_num_args("ofxUDPManager::BindMcast",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::BindMcast",1,"ofxUDPManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxUDPManager::BindMcast",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxUDPManager::BindMcast",3,"unsigned short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_BindMcast",1,SWIGTYPE_p_ofxUDPManager); }  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned short)lua_tonumber(L, 3);
  result = (bool)(arg1)->BindMcast(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_Send(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  char *arg2 = (char *) 0 ; int arg3 ; int result; SWIG_check_num_args("ofxUDPManager::Send",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::Send",1,"ofxUDPManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxUDPManager::Send",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxUDPManager::Send",3,"int const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_Send",1,SWIGTYPE_p_ofxUDPManager); }  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int const)lua_tonumber(L, 3); result = (int)(arg1)->Send((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_SendAll(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  char *arg2 = (char *) 0 ; int arg3 ; int result; SWIG_check_num_args("ofxUDPManager::SendAll",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::SendAll",1,"ofxUDPManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxUDPManager::SendAll",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxUDPManager::SendAll",3,"int const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_SendAll",1,SWIGTYPE_p_ofxUDPManager); }  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int const)lua_tonumber(L, 3); result = (int)(arg1)->SendAll((char const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_PeekReceive(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  int result; SWIG_check_num_args("ofxUDPManager::PeekReceive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::PeekReceive",1,"ofxUDPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_PeekReceive",1,SWIGTYPE_p_ofxUDPManager); }  result = (int)(arg1)->PeekReceive();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_Receive(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  char *arg2 = (char *) 0 ; int arg3 ; int result; SWIG_check_num_args("ofxUDPManager::Receive",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::Receive",1,"ofxUDPManager *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxUDPManager::Receive",2,"char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxUDPManager::Receive",3,"int const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_Receive",1,SWIGTYPE_p_ofxUDPManager); }  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int const)lua_tonumber(L, 3); result = (int)(arg1)->Receive(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_SetTimeoutSend(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  int arg2 ; SWIG_check_num_args("ofxUDPManager::SetTimeoutSend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::SetTimeoutSend",1,"ofxUDPManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxUDPManager::SetTimeoutSend",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_SetTimeoutSend",1,SWIGTYPE_p_ofxUDPManager); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetTimeoutSend(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_SetTimeoutReceive(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  int arg2 ; SWIG_check_num_args("ofxUDPManager::SetTimeoutReceive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::SetTimeoutReceive",1,"ofxUDPManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxUDPManager::SetTimeoutReceive",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_SetTimeoutReceive",1,SWIGTYPE_p_ofxUDPManager); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->SetTimeoutReceive(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_GetTimeoutSend(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  int result; SWIG_check_num_args("ofxUDPManager::GetTimeoutSend",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::GetTimeoutSend",1,"ofxUDPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_GetTimeoutSend",1,SWIGTYPE_p_ofxUDPManager); }  result = (int)(arg1)->GetTimeoutSend();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_GetTimeoutReceive(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  int result; SWIG_check_num_args("ofxUDPManager::GetTimeoutReceive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::GetTimeoutReceive",1,"ofxUDPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_GetTimeoutReceive",1,SWIGTYPE_p_ofxUDPManager); }  result = (int)(arg1)->GetTimeoutReceive();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_GetRemoteAddr(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  std::string *arg2 = 0 ; int *arg3 = 0 ; bool result; SWIG_check_num_args("ofxUDPManager::GetRemoteAddr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::GetRemoteAddr",1,"ofxUDPManager const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxUDPManager::GetRemoteAddr",2,"std::string &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxUDPManager::GetRemoteAddr",3,"int &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_GetRemoteAddr",1,SWIGTYPE_p_ofxUDPManager); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("UDPManager_GetRemoteAddr",2,SWIGTYPE_p_std__string); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("UDPManager_GetRemoteAddr",3,SWIGTYPE_p_int); } 
  result = (bool)((ofxUDPManager const *)arg1)->GetRemoteAddr(*arg2,*arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_GetListenAddr(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  std::string *arg2 = 0 ; int *arg3 = 0 ; bool result; SWIG_check_num_args("ofxUDPManager::GetListenAddr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::GetListenAddr",1,"ofxUDPManager const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxUDPManager::GetListenAddr",2,"std::string &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxUDPManager::GetListenAddr",3,"int &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_GetListenAddr",1,SWIGTYPE_p_ofxUDPManager); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("UDPManager_GetListenAddr",2,SWIGTYPE_p_std__string); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("UDPManager_GetListenAddr",3,SWIGTYPE_p_int); } 
  result = (bool)((ofxUDPManager const *)arg1)->GetListenAddr(*arg2,*arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_SetReceiveBufferSize(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  int arg2 ; bool result; SWIG_check_num_args("ofxUDPManager::SetReceiveBufferSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::SetReceiveBufferSize",1,"ofxUDPManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxUDPManager::SetReceiveBufferSize",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_SetReceiveBufferSize",1,SWIGTYPE_p_ofxUDPManager); }  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->SetReceiveBufferSize(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_SetSendBufferSize(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  int arg2 ; bool result; SWIG_check_num_args("ofxUDPManager::SetSendBufferSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::SetSendBufferSize",1,"ofxUDPManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxUDPManager::SetSendBufferSize",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_SetSendBufferSize",1,SWIGTYPE_p_ofxUDPManager); }  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->SetSendBufferSize(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_GetReceiveBufferSize(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  int result; SWIG_check_num_args("ofxUDPManager::GetReceiveBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::GetReceiveBufferSize",1,"ofxUDPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_GetReceiveBufferSize",1,SWIGTYPE_p_ofxUDPManager); } 
  result = (int)(arg1)->GetReceiveBufferSize(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_GetSendBufferSize(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  int result; SWIG_check_num_args("ofxUDPManager::GetSendBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::GetSendBufferSize",1,"ofxUDPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_GetSendBufferSize",1,SWIGTYPE_p_ofxUDPManager); }  result = (int)(arg1)->GetSendBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_SetReuseAddress(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  bool arg2 ; bool result; SWIG_check_num_args("ofxUDPManager::SetReuseAddress",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::SetReuseAddress",1,"ofxUDPManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxUDPManager::SetReuseAddress",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_SetReuseAddress",1,SWIGTYPE_p_ofxUDPManager); }  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->SetReuseAddress(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_SetEnableBroadcast(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  bool arg2 ; bool result; SWIG_check_num_args("ofxUDPManager::SetEnableBroadcast",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::SetEnableBroadcast",1,"ofxUDPManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxUDPManager::SetEnableBroadcast",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_SetEnableBroadcast",1,SWIGTYPE_p_ofxUDPManager); }  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->SetEnableBroadcast(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_SetNonBlocking(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  bool arg2 ; bool result; SWIG_check_num_args("ofxUDPManager::SetNonBlocking",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::SetNonBlocking",1,"ofxUDPManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxUDPManager::SetNonBlocking",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_SetNonBlocking",1,SWIGTYPE_p_ofxUDPManager); }  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->SetNonBlocking(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_GetMaxMsgSize(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ;
  int result; SWIG_check_num_args("ofxUDPManager::GetMaxMsgSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::GetMaxMsgSize",1,"ofxUDPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_GetMaxMsgSize",1,SWIGTYPE_p_ofxUDPManager); }  result = (int)(arg1)->GetMaxMsgSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_GetTTL(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ; int result;
  SWIG_check_num_args("ofxUDPManager::GetTTL",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::GetTTL",1,"ofxUDPManager *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_GetTTL",1,SWIGTYPE_p_ofxUDPManager); }  result = (int)(arg1)->GetTTL();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_UDPManager_SetTTL(lua_State* L) { int SWIG_arg = 0; ofxUDPManager *arg1 = (ofxUDPManager *) 0 ; int arg2 ;
  bool result; SWIG_check_num_args("ofxUDPManager::SetTTL",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxUDPManager::SetTTL",1,"ofxUDPManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxUDPManager::SetTTL",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxUDPManager,0))){
    SWIG_fail_ptr("UDPManager_SetTTL",1,SWIGTYPE_p_ofxUDPManager); }  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->SetTTL(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_UDPManager(void *obj) {
ofxUDPManager *arg1 = (ofxUDPManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_UDPManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UDPManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UDPManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_UDPManager_methods[]= {
    { "HasSocket", _wrap_UDPManager_HasSocket},
    { "Close", _wrap_UDPManager_Close},
    { "Setup", _wrap_UDPManager_Setup},
    { "Create", _wrap_UDPManager_Create},
    { "Connect", _wrap_UDPManager_Connect},
    { "ConnectMcast", _wrap_UDPManager_ConnectMcast},
    { "Bind", _wrap_UDPManager_Bind},
    { "BindMcast", _wrap_UDPManager_BindMcast},
    { "Send", _wrap_UDPManager_Send},
    { "SendAll", _wrap_UDPManager_SendAll},
    { "PeekReceive", _wrap_UDPManager_PeekReceive},
    { "Receive", _wrap_UDPManager_Receive},
    { "SetTimeoutSend", _wrap_UDPManager_SetTimeoutSend},
    { "SetTimeoutReceive", _wrap_UDPManager_SetTimeoutReceive},
    { "GetTimeoutSend", _wrap_UDPManager_GetTimeoutSend},
    { "GetTimeoutReceive", _wrap_UDPManager_GetTimeoutReceive},
    { "GetRemoteAddr", _wrap_UDPManager_GetRemoteAddr},
    { "GetListenAddr", _wrap_UDPManager_GetListenAddr},
    { "SetReceiveBufferSize", _wrap_UDPManager_SetReceiveBufferSize},
    { "SetSendBufferSize", _wrap_UDPManager_SetSendBufferSize},
    { "GetReceiveBufferSize", _wrap_UDPManager_GetReceiveBufferSize},
    { "GetSendBufferSize", _wrap_UDPManager_GetSendBufferSize},
    { "SetReuseAddress", _wrap_UDPManager_SetReuseAddress},
    { "SetEnableBroadcast", _wrap_UDPManager_SetEnableBroadcast},
    { "SetNonBlocking", _wrap_UDPManager_SetNonBlocking},
    { "GetMaxMsgSize", _wrap_UDPManager_GetMaxMsgSize},
    { "GetTTL", _wrap_UDPManager_GetTTL},
    { "SetTTL", _wrap_UDPManager_SetTTL},
    {0,0}
};
static swig_lua_method swig_UDPManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UDPManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UDPManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UDPManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UDPManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UDPManager_Sf_SwigStatic = {
    "UDPManager",
    swig_UDPManager_Sf_SwigStatic_methods,
    swig_UDPManager_Sf_SwigStatic_attributes,
    swig_UDPManager_Sf_SwigStatic_constants,
    swig_UDPManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UDPManager_bases[] = {0};
static const char *swig_UDPManager_base_names[] = {0};
static swig_lua_class _wrap_class_UDPManager = { "UDPManager", "UDPManager", &SWIGTYPE_p_ofxUDPManager,_proxy__wrap_new_UDPManager, swig_delete_UDPManager, swig_UDPManager_methods, swig_UDPManager_attributes, &swig_UDPManager_Sf_SwigStatic, swig_UDPManager_meta, swig_UDPManager_bases, swig_UDPManager_base_names };

static int _wrap_CvImage_width_set(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; int arg2 ;
  SWIG_check_num_args("ofxCvImage::width",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::width",1,"ofxCvImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::width",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_width_set",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->width = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_width_get(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; int result;
  SWIG_check_num_args("ofxCvImage::width",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::width",1,"ofxCvImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_width_get",1,SWIGTYPE_p_ofxCvImage); }  result = (int) ((arg1)->width);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_height_set(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; int arg2 ;
  SWIG_check_num_args("ofxCvImage::height",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::height",1,"ofxCvImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::height",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_height_set",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->height = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_height_get(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; int result;
  SWIG_check_num_args("ofxCvImage::height",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::height",1,"ofxCvImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_height_get",1,SWIGTYPE_p_ofxCvImage); }  result = (int) ((arg1)->height);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_bAllocated_set(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofxCvImage::bAllocated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::bAllocated",1,"ofxCvImage *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxCvImage::bAllocated",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_bAllocated_set",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->bAllocated = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_bAllocated_get(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; bool result;
  SWIG_check_num_args("ofxCvImage::bAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::bAllocated",1,"ofxCvImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_bAllocated_get",1,SWIGTYPE_p_ofxCvImage); }  result = (bool) ((arg1)->bAllocated);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_allocate(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofxCvImage::allocate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::allocate",1,"ofxCvImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::allocate",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_allocate",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); (arg1)->allocate(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvImage_clear(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  SWIG_check_num_args("ofxCvImage::clear",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::clear",1,"ofxCvImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_clear",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_getWidth(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float result;
  SWIG_check_num_args("ofxCvImage::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getWidth",1,"ofxCvImage const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_getWidth",1,SWIGTYPE_p_ofxCvImage); }  result = (float)((ofxCvImage const *)arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_getHeight(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float result;
  SWIG_check_num_args("ofxCvImage::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getHeight",1,"ofxCvImage const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_getHeight",1,SWIGTYPE_p_ofxCvImage); }  result = (float)((ofxCvImage const *)arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_setUseTexture(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofxCvImage::setUseTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::setUseTexture",1,"ofxCvImage *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxCvImage::setUseTexture",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_setUseTexture",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setUseTexture(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_isUsingTexture(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; bool result;
  SWIG_check_num_args("ofxCvImage::isUsingTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::isUsingTexture",1,"ofxCvImage const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_isUsingTexture",1,SWIGTYPE_p_ofxCvImage); } 
  result = (bool)((ofxCvImage const *)arg1)->isUsingTexture(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_getTexture__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  ofTexture *result = 0 ; SWIG_check_num_args("ofxCvImage::getTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getTexture",1,"ofxCvImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_getTexture",1,SWIGTYPE_p_ofxCvImage); }  result = (ofTexture *) &(arg1)->getTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvImage_getTexture__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  ofTexture *result = 0 ; SWIG_check_num_args("ofxCvImage::getTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getTexture",1,"ofxCvImage const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_getTexture",1,SWIGTYPE_p_ofxCvImage); } 
  result = (ofTexture *) &((ofxCvImage const *)arg1)->getTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvImage_getTexture(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getTexture__SWIG_0(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getTexture__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_getTexture'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvImage::getTexture()\n" "    ofxCvImage::getTexture() const\n"); lua_error(L);return 0; }
static int _wrap_CvImage_flagImageChanged(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  SWIG_check_num_args("ofxCvImage::flagImageChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::flagImageChanged",1,"ofxCvImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_flagImageChanged",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->flagImageChanged(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_setROI__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; int arg2 ;
  int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofxCvImage::setROI",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::setROI",1,"ofxCvImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::setROI",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::setROI",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvImage::setROI",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvImage::setROI",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_setROI",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); (arg1)->setROI(arg2,arg3,arg4,arg5); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_setROI__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  ofRectangle *arg2 = 0 ; SWIG_check_num_args("ofxCvImage::setROI",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::setROI",1,"ofxCvImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::setROI",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_setROI",1,SWIGTYPE_p_ofxCvImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("CvImage_setROI",2,SWIGTYPE_p_ofRectangle); }  (arg1)->setROI((ofRectangle const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_setROI(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_CvImage_setROI__SWIG_1(L);}  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_CvImage_setROI__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_setROI'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvImage::setROI(int,int,int,int)\n" "    ofxCvImage::setROI(ofRectangle const &)\n"); lua_error(L);return 0; }
static int _wrap_CvImage_getROI(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; ofRectangle result;
  SWIG_check_num_args("ofxCvImage::getROI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getROI",1,"ofxCvImage const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_getROI",1,SWIGTYPE_p_ofxCvImage); }  result = ((ofxCvImage const *)arg1)->getROI(); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_resetROI(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  SWIG_check_num_args("ofxCvImage::resetROI",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::resetROI",1,"ofxCvImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_resetROI",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->resetROI(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_getIntersectionROI(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  ofRectangle *arg2 = 0 ; ofRectangle *arg3 = 0 ; ofRectangle result; SWIG_check_num_args("ofxCvImage::getIntersectionROI",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getIntersectionROI",1,"ofxCvImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::getIntersectionROI",2,"ofRectangle const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxCvImage::getIntersectionROI",3,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_getIntersectionROI",1,SWIGTYPE_p_ofxCvImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("CvImage_getIntersectionROI",2,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("CvImage_getIntersectionROI",3,SWIGTYPE_p_ofRectangle); } 
  result = (arg1)->getIntersectionROI((ofRectangle const &)*arg2,(ofRectangle const &)*arg3); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_set(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
  SWIG_check_num_args("ofxCvImage::set",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::set",1,"ofxCvImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::set",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_set",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->set(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_setFromPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofxCvImage::setFromPixels",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::setFromPixels",1,"ofxCvImage *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvImage::setFromPixels",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvImage::setFromPixels",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_setFromPixels",1,SWIGTYPE_p_ofxCvImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("CvImage_setFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_setFromPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  ofPixels *arg2 = 0 ; SWIG_check_num_args("ofxCvImage::setFromPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::setFromPixels",1,"ofxCvImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::setFromPixels",2,"ofPixels const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_setFromPixels",1,SWIGTYPE_p_ofxCvImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels,0))){
    SWIG_fail_ptr("CvImage_setFromPixels",2,SWIGTYPE_p_ofPixels); }  (arg1)->setFromPixels((ofPixels const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_setFromPixels(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_CvImage_setFromPixels__SWIG_1(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_CvImage_setFromPixels__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_setFromPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvImage::setFromPixels(unsigned char const *,int,int)\n"
  "    ofxCvImage::setFromPixels(ofPixels const &)\n"); lua_error(L);return 0; }
static int _wrap_CvImage_setRoiFromPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofxCvImage::setRoiFromPixels",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::setRoiFromPixels",1,"ofxCvImage *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvImage::setRoiFromPixels",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::setRoiFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvImage::setRoiFromPixels",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_setRoiFromPixels",1,SWIGTYPE_p_ofxCvImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("CvImage_setRoiFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setRoiFromPixels((unsigned char const *)arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_setRoiFromPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  ofPixels *arg2 = 0 ; SWIG_check_num_args("ofxCvImage::setRoiFromPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::setRoiFromPixels",1,"ofxCvImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::setRoiFromPixels",2,"ofPixels const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_setRoiFromPixels",1,SWIGTYPE_p_ofxCvImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels,0))){
    SWIG_fail_ptr("CvImage_setRoiFromPixels",2,SWIGTYPE_p_ofPixels); }  (arg1)->setRoiFromPixels((ofPixels const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_setRoiFromPixels(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_CvImage_setRoiFromPixels__SWIG_1(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_CvImage_setRoiFromPixels__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_setRoiFromPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvImage::setRoiFromPixels(unsigned char const *,int,int)\n"
  "    ofxCvImage::setRoiFromPixels(ofPixels const &)\n"); lua_error(L);return 0; }
static int _wrap_CvImage_drawBlobIntoMe(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  ofxCvBlob *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofxCvImage::drawBlobIntoMe",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::drawBlobIntoMe",1,"ofxCvImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::drawBlobIntoMe",2,"ofxCvBlob &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::drawBlobIntoMe",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_drawBlobIntoMe",1,SWIGTYPE_p_ofxCvImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvBlob,0))){
    SWIG_fail_ptr("CvImage_drawBlobIntoMe",2,SWIGTYPE_p_ofxCvBlob); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->drawBlobIntoMe(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_getPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  ofPixels *result = 0 ; SWIG_check_num_args("ofxCvImage::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getPixels",1,"ofxCvImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_getPixels",1,SWIGTYPE_p_ofxCvImage); }  result = (ofPixels *) &(arg1)->getPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvImage_getRoiPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  ofPixels *result = 0 ; SWIG_check_num_args("ofxCvImage::getRoiPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getRoiPixels",1,"ofxCvImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_getRoiPixels",1,SWIGTYPE_p_ofxCvImage); }  result = (ofPixels *) &(arg1)->getRoiPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvImage_getCvImage__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  IplImage *result = 0 ; SWIG_check_num_args("ofxCvImage::getCvImage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getCvImage",1,"ofxCvImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_getCvImage",1,SWIGTYPE_p_ofxCvImage); }  result = (IplImage *)(arg1)->getCvImage();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IplImage,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvImage_getPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  ofPixels *result = 0 ; SWIG_check_num_args("ofxCvImage::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getPixels",1,"ofxCvImage const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_getPixels",1,SWIGTYPE_p_ofxCvImage); } 
  result = (ofPixels *) &((ofxCvImage const *)arg1)->getPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvImage_getPixels(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getPixels__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getPixels__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_getPixels'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvImage::getPixels()\n" "    ofxCvImage::getPixels() const\n"); lua_error(L);return 0; }
static int _wrap_CvImage_getRoiPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  ofPixels *result = 0 ; SWIG_check_num_args("ofxCvImage::getRoiPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getRoiPixels",1,"ofxCvImage const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_getRoiPixels",1,SWIGTYPE_p_ofxCvImage); } 
  result = (ofPixels *) &((ofxCvImage const *)arg1)->getRoiPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvImage_getRoiPixels(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getRoiPixels__SWIG_0(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getRoiPixels__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_getRoiPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvImage::getRoiPixels()\n" "    ofxCvImage::getRoiPixels() const\n");
  lua_error(L);return 0; }
static int _wrap_CvImage_getCvImage__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  IplImage *result = 0 ; SWIG_check_num_args("ofxCvImage::getCvImage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::getCvImage",1,"ofxCvImage const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_getCvImage",1,SWIGTYPE_p_ofxCvImage); } 
  result = (IplImage *)((ofxCvImage const *)arg1)->getCvImage();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_IplImage,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvImage_getCvImage(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getCvImage__SWIG_0(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvImage_getCvImage__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_getCvImage'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvImage::getCvImage()\n" "    ofxCvImage::getCvImage() const\n"); lua_error(L);return 0; }
static int _wrap_CvImage_updateTexture(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  SWIG_check_num_args("ofxCvImage::updateTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::updateTexture",1,"ofxCvImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_updateTexture",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->updateTexture(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_draw__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofxCvImage::draw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::draw",1,"ofxCvImage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::draw",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_draw",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); ((ofxCvImage const *)arg1)->draw(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_draw__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofxCvImage::draw",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::draw",1,"ofxCvImage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvImage::draw",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvImage::draw",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_draw",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ((ofxCvImage const *)arg1)->draw(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_draw__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("ofxCvImage::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::draw",1,"ofxCvImage const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::draw",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_draw",1,SWIGTYPE_p_ofxCvImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPoint,0))){ SWIG_fail_ptr("CvImage_draw",2,SWIGTYPE_p_ofPoint); }
   ((ofxCvImage const *)arg1)->draw((ofPoint const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvImage_draw__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  ofRectangle *arg2 = 0 ; SWIG_check_num_args("ofxCvImage::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::draw",1,"ofxCvImage const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::draw",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_draw",1,SWIGTYPE_p_ofxCvImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("CvImage_draw",2,SWIGTYPE_p_ofRectangle); }  ((ofxCvImage const *)arg1)->draw((ofRectangle const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_draw(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPoint, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_CvImage_draw__SWIG_2(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_CvImage_draw__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvImage_draw__SWIG_0(L);}  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_CvImage_draw__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_draw'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvImage::draw(float,float) const\n" "    ofxCvImage::draw(float,float,float,float) const\n"
  "    ofxCvImage::draw(ofPoint const &) const\n" "    ofxCvImage::draw(ofRectangle const &) const\n"); lua_error(L);return 0; }
static int _wrap_CvImage_drawROI__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofxCvImage::drawROI",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::drawROI",1,"ofxCvImage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::drawROI",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::drawROI",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_drawROI",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); ((ofxCvImage const *)arg1)->drawROI(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_drawROI__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofxCvImage::drawROI",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::drawROI",1,"ofxCvImage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::drawROI",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::drawROI",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvImage::drawROI",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvImage::drawROI",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_drawROI",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ((ofxCvImage const *)arg1)->drawROI(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvImage_drawROI(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvImage_drawROI__SWIG_0(L);}  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_CvImage_drawROI__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_drawROI'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvImage::drawROI(float,float) const\n" "    ofxCvImage::drawROI(float,float,float,float) const\n");
  lua_error(L);return 0; }
static int _wrap_CvImage_setAnchorPercent(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofxCvImage::setAnchorPercent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::setAnchorPercent",1,"ofxCvImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::setAnchorPercent",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::setAnchorPercent",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_setAnchorPercent",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPercent(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvImage_setAnchorPoint(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofxCvImage::setAnchorPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::setAnchorPoint",1,"ofxCvImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::setAnchorPoint",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::setAnchorPoint",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_setAnchorPoint",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPoint(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvImage_resetAnchor(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  SWIG_check_num_args("ofxCvImage::resetAnchor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::resetAnchor",1,"ofxCvImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_resetAnchor",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->resetAnchor(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_erode(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  SWIG_check_num_args("ofxCvImage::erode",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::erode",1,"ofxCvImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_erode",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->erode(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_dilate(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  SWIG_check_num_args("ofxCvImage::dilate",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::dilate",1,"ofxCvImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_dilate",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->dilate(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_blur__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; int arg2 ;
  SWIG_check_num_args("ofxCvImage::blur",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::blur",1,"ofxCvImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::blur",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_blur",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (int)lua_tonumber(L, 2); (arg1)->blur(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_blur__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  SWIG_check_num_args("ofxCvImage::blur",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::blur",1,"ofxCvImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_blur",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->blur(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_blur(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvImage_blur__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_CvImage_blur__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_blur'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvImage::blur(int)\n" "    ofxCvImage::blur()\n"); lua_error(L);return 0; }
static int _wrap_CvImage_blurGaussian__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; int arg2 ;
  SWIG_check_num_args("ofxCvImage::blurGaussian",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::blurGaussian",1,"ofxCvImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::blurGaussian",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_blurGaussian",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->blurGaussian(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_blurGaussian__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  SWIG_check_num_args("ofxCvImage::blurGaussian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::blurGaussian",1,"ofxCvImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_blurGaussian",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->blurGaussian(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_blurGaussian(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_CvImage_blurGaussian__SWIG_1(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_CvImage_blurGaussian__SWIG_0(L);}
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_blurGaussian'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvImage::blurGaussian(int)\n" "    ofxCvImage::blurGaussian()\n");
  lua_error(L);return 0; }
static int _wrap_CvImage_invert(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  SWIG_check_num_args("ofxCvImage::invert",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::invert",1,"ofxCvImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_invert",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->invert(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_contrastStretch(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  SWIG_check_num_args("ofxCvImage::contrastStretch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::contrastStretch",1,"ofxCvImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_contrastStretch",1,SWIGTYPE_p_ofxCvImage); }  (arg1)->contrastStretch(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_convertToRange(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofxCvImage::convertToRange",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::convertToRange",1,"ofxCvImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::convertToRange",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::convertToRange",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_convertToRange",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->convertToRange(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvImage_resize(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofxCvImage::resize",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::resize",1,"ofxCvImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::resize",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_resize",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_scaleIntoMe__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  ofxCvImage *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofxCvImage::scaleIntoMe",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::scaleIntoMe",1,"ofxCvImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::scaleIntoMe",2,"ofxCvImage &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::scaleIntoMe",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->scaleIntoMe(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_scaleIntoMe__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  ofxCvImage *arg2 = 0 ; SWIG_check_num_args("ofxCvImage::scaleIntoMe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::scaleIntoMe",1,"ofxCvImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::scaleIntoMe",2,"ofxCvImage &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  (arg1)->scaleIntoMe(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_scaleIntoMe(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_CvImage_scaleIntoMe__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvImage_scaleIntoMe__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvImage_scaleIntoMe'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvImage::scaleIntoMe(ofxCvImage &,int)\n"
  "    ofxCvImage::scaleIntoMe(ofxCvImage &)\n"); lua_error(L);return 0; }
static int _wrap_CvImage_mirror(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; bool arg2 ; bool arg3 ;
  SWIG_check_num_args("ofxCvImage::mirror",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::mirror",1,"ofxCvImage *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxCvImage::mirror",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxCvImage::mirror",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_mirror",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0); (arg1)->mirror(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvImage_translate(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofxCvImage::translate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::translate",1,"ofxCvImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::translate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::translate",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_translate",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->translate(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvImage_rotate(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofxCvImage::rotate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::rotate",1,"ofxCvImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::rotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::rotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvImage::rotate",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_rotate",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->rotate(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_scale(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofxCvImage::scale",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::scale",1,"ofxCvImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::scale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::scale",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_scale",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->scale(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvImage_transform(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; SWIG_check_num_args("ofxCvImage::transform",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::transform",1,"ofxCvImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::transform",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::transform",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvImage::transform",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvImage::transform",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxCvImage::transform",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofxCvImage::transform",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofxCvImage::transform",8,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_transform",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  (arg1)->transform(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_undistort(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ;
  SWIG_check_num_args("ofxCvImage::undistort",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::undistort",1,"ofxCvImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::undistort",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::undistort",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvImage::undistort",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvImage::undistort",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxCvImage::undistort",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofxCvImage::undistort",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofxCvImage::undistort",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofxCvImage::undistort",9,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_undistort",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); (arg1)->undistort(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_remap(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  IplImage *arg2 = (IplImage *) 0 ; IplImage *arg3 = (IplImage *) 0 ; SWIG_check_num_args("ofxCvImage::remap",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::remap",1,"ofxCvImage *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvImage::remap",2,"IplImage *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofxCvImage::remap",3,"IplImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_remap",1,SWIGTYPE_p_ofxCvImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_IplImage,0))){
    SWIG_fail_ptr("CvImage_remap",2,SWIGTYPE_p_IplImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_IplImage,0))){
    SWIG_fail_ptr("CvImage_remap",3,SWIGTYPE_p_IplImage); }  (arg1)->remap(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_warpPerspective(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; ofPoint *arg5 = 0 ;
  SWIG_check_num_args("ofxCvImage::warpPerspective",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::warpPerspective",1,"ofxCvImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::warpPerspective",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxCvImage::warpPerspective",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofxCvImage::warpPerspective",4,"ofPoint const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofxCvImage::warpPerspective",5,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_warpPerspective",1,SWIGTYPE_p_ofxCvImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPoint,0))){
    SWIG_fail_ptr("CvImage_warpPerspective",2,SWIGTYPE_p_ofPoint); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofPoint,0))){
    SWIG_fail_ptr("CvImage_warpPerspective",3,SWIGTYPE_p_ofPoint); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofPoint,0))){
    SWIG_fail_ptr("CvImage_warpPerspective",4,SWIGTYPE_p_ofPoint); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofPoint,0))){
    SWIG_fail_ptr("CvImage_warpPerspective",5,SWIGTYPE_p_ofPoint); } 
  (arg1)->warpPerspective((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4,(ofPoint const &)*arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_warpIntoMe(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ;
  ofxCvImage *arg2 = 0 ; ofPoint *arg3 ; ofPoint *arg4 ; SWIG_check_num_args("ofxCvImage::warpIntoMe",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::warpIntoMe",1,"ofxCvImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvImage::warpIntoMe",2,"ofxCvImage &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofxCvImage::warpIntoMe",3,"ofPoint const [4]");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ofxCvImage::warpIntoMe",4,"ofPoint const [4]");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_warpIntoMe",1,SWIGTYPE_p_ofxCvImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_warpIntoMe",2,SWIGTYPE_p_ofxCvImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofPoint,0))){
    SWIG_fail_ptr("CvImage_warpIntoMe",3,SWIGTYPE_p_ofPoint); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofPoint,0))){
    SWIG_fail_ptr("CvImage_warpIntoMe",4,SWIGTYPE_p_ofPoint); } 
  (arg1)->warpIntoMe(*arg2,(ofPoint const (*))arg3,(ofPoint const (*))arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvImage_countNonZeroInRegion(lua_State* L) { int SWIG_arg = 0; ofxCvImage *arg1 = (ofxCvImage *) 0 ; int arg2 ;
  int arg3 ; int arg4 ; int arg5 ; int result; SWIG_check_num_args("ofxCvImage::countNonZeroInRegion",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvImage::countNonZeroInRegion",1,"ofxCvImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvImage::countNonZeroInRegion",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvImage::countNonZeroInRegion",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvImage::countNonZeroInRegion",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvImage::countNonZeroInRegion",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvImage_countNonZeroInRegion",1,SWIGTYPE_p_ofxCvImage); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  result = (int)(arg1)->countNonZeroInRegion(arg2,arg3,arg4,arg5); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_CvImage(void *obj) {
ofxCvImage *arg1 = (ofxCvImage *) obj;
delete arg1;
}
static swig_lua_attribute swig_CvImage_attributes[] = {
    { "width", _wrap_CvImage_width_get, _wrap_CvImage_width_set },
    { "height", _wrap_CvImage_height_get, _wrap_CvImage_height_set },
    { "bAllocated", _wrap_CvImage_bAllocated_get, _wrap_CvImage_bAllocated_set },
    {0,0,0}
};
static swig_lua_method swig_CvImage_methods[]= {
    { "allocate", _wrap_CvImage_allocate},
    { "clear", _wrap_CvImage_clear},
    { "getWidth", _wrap_CvImage_getWidth},
    { "getHeight", _wrap_CvImage_getHeight},
    { "setUseTexture", _wrap_CvImage_setUseTexture},
    { "isUsingTexture", _wrap_CvImage_isUsingTexture},
    { "getTexture", _wrap_CvImage_getTexture},
    { "flagImageChanged", _wrap_CvImage_flagImageChanged},
    { "setROI", _wrap_CvImage_setROI},
    { "getROI", _wrap_CvImage_getROI},
    { "resetROI", _wrap_CvImage_resetROI},
    { "getIntersectionROI", _wrap_CvImage_getIntersectionROI},
    { "set", _wrap_CvImage_set},
    { "setFromPixels", _wrap_CvImage_setFromPixels},
    { "setRoiFromPixels", _wrap_CvImage_setRoiFromPixels},
    { "drawBlobIntoMe", _wrap_CvImage_drawBlobIntoMe},
    { "getPixels", _wrap_CvImage_getPixels},
    { "getRoiPixels", _wrap_CvImage_getRoiPixels},
    { "getCvImage", _wrap_CvImage_getCvImage},
    { "updateTexture", _wrap_CvImage_updateTexture},
    { "draw", _wrap_CvImage_draw},
    { "drawROI", _wrap_CvImage_drawROI},
    { "setAnchorPercent", _wrap_CvImage_setAnchorPercent},
    { "setAnchorPoint", _wrap_CvImage_setAnchorPoint},
    { "resetAnchor", _wrap_CvImage_resetAnchor},
    { "erode", _wrap_CvImage_erode},
    { "dilate", _wrap_CvImage_dilate},
    { "blur", _wrap_CvImage_blur},
    { "blurGaussian", _wrap_CvImage_blurGaussian},
    { "invert", _wrap_CvImage_invert},
    { "contrastStretch", _wrap_CvImage_contrastStretch},
    { "convertToRange", _wrap_CvImage_convertToRange},
    { "resize", _wrap_CvImage_resize},
    { "scaleIntoMe", _wrap_CvImage_scaleIntoMe},
    { "mirror", _wrap_CvImage_mirror},
    { "translate", _wrap_CvImage_translate},
    { "rotate", _wrap_CvImage_rotate},
    { "scale", _wrap_CvImage_scale},
    { "transform", _wrap_CvImage_transform},
    { "undistort", _wrap_CvImage_undistort},
    { "remap", _wrap_CvImage_remap},
    { "warpPerspective", _wrap_CvImage_warpPerspective},
    { "warpIntoMe", _wrap_CvImage_warpIntoMe},
    { "countNonZeroInRegion", _wrap_CvImage_countNonZeroInRegion},
    {0,0}
};
static swig_lua_method swig_CvImage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CvImage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CvImage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CvImage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CvImage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CvImage_Sf_SwigStatic = {
    "CvImage",
    swig_CvImage_Sf_SwigStatic_methods,
    swig_CvImage_Sf_SwigStatic_attributes,
    swig_CvImage_Sf_SwigStatic_constants,
    swig_CvImage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CvImage_bases[] = {0};
static const char *swig_CvImage_base_names[] = {0};
static swig_lua_class _wrap_class_CvImage = { "CvImage", "CvImage", &SWIGTYPE_p_ofxCvImage,0, swig_delete_CvImage, swig_CvImage_methods, swig_CvImage_attributes, &swig_CvImage_Sf_SwigStatic, swig_CvImage_meta, swig_CvImage_bases, swig_CvImage_base_names };

static int _wrap_CvBlob_area_set(lua_State* L) { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; float arg2 ;
  SWIG_check_num_args("ofxCvBlob::area",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::area",1,"ofxCvBlob *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvBlob::area",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
    SWIG_fail_ptr("CvBlob_area_set",1,SWIGTYPE_p_ofxCvBlob); }  arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->area = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvBlob_area_get(lua_State* L) { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; float result;
  SWIG_check_num_args("ofxCvBlob::area",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::area",1,"ofxCvBlob *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
    SWIG_fail_ptr("CvBlob_area_get",1,SWIGTYPE_p_ofxCvBlob); }  result = (float) ((arg1)->area);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvBlob_length_set(lua_State* L) { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; float arg2 ;
  SWIG_check_num_args("ofxCvBlob::length",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::length",1,"ofxCvBlob *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvBlob::length",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
    SWIG_fail_ptr("CvBlob_length_set",1,SWIGTYPE_p_ofxCvBlob); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->length = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvBlob_length_get(lua_State* L) { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; float result;
  SWIG_check_num_args("ofxCvBlob::length",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::length",1,"ofxCvBlob *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
    SWIG_fail_ptr("CvBlob_length_get",1,SWIGTYPE_p_ofxCvBlob); }  result = (float) ((arg1)->length);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvBlob_boundingRect_set(lua_State* L) { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ;
  ofRectangle arg2 ; ofRectangle *argp2 ; SWIG_check_num_args("ofxCvBlob::boundingRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::boundingRect",1,"ofxCvBlob *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvBlob::boundingRect",2,"ofRectangle");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
    SWIG_fail_ptr("CvBlob_boundingRect_set",1,SWIGTYPE_p_ofxCvBlob); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("CvBlob_boundingRect_set",2,SWIGTYPE_p_ofRectangle); }  arg2 = *argp2; if (arg1) (arg1)->boundingRect = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvBlob_boundingRect_get(lua_State* L) { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ;
  ofRectangle result; SWIG_check_num_args("ofxCvBlob::boundingRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::boundingRect",1,"ofxCvBlob *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
    SWIG_fail_ptr("CvBlob_boundingRect_get",1,SWIGTYPE_p_ofxCvBlob); }  result =  ((arg1)->boundingRect); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvBlob_centroid_set(lua_State* L) { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; ofDefaultVec3 arg2 ;
  ofDefaultVec3 *argp2 ; SWIG_check_num_args("ofxCvBlob::centroid",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::centroid",1,"ofxCvBlob *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvBlob::centroid",2,"ofDefaultVec3");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
    SWIG_fail_ptr("CvBlob_centroid_set",1,SWIGTYPE_p_ofxCvBlob); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofDefaultVec3,0))){
    SWIG_fail_ptr("CvBlob_centroid_set",2,SWIGTYPE_p_ofDefaultVec3); }  arg2 = *argp2; if (arg1) (arg1)->centroid = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvBlob_centroid_get(lua_State* L) { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; ofDefaultVec3 result;
  SWIG_check_num_args("ofxCvBlob::centroid",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::centroid",1,"ofxCvBlob *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
    SWIG_fail_ptr("CvBlob_centroid_get",1,SWIGTYPE_p_ofxCvBlob); }  result =  ((arg1)->centroid); {
    ofDefaultVec3 * resultptr = new ofDefaultVec3((const ofDefaultVec3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofDefaultVec3,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvBlob_hole_set(lua_State* L) { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofxCvBlob::hole",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::hole",1,"ofxCvBlob *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxCvBlob::hole",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
    SWIG_fail_ptr("CvBlob_hole_set",1,SWIGTYPE_p_ofxCvBlob); }  arg2 = (lua_toboolean(L, 2)!=0); if (arg1) (arg1)->hole = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvBlob_hole_get(lua_State* L) { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; bool result;
  SWIG_check_num_args("ofxCvBlob::hole",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::hole",1,"ofxCvBlob *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
    SWIG_fail_ptr("CvBlob_hole_get",1,SWIGTYPE_p_ofxCvBlob); }  result = (bool) ((arg1)->hole);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvBlob_pts_set(lua_State* L) { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ;
  std::vector< ofDefaultVec3 > *arg2 = (std::vector< ofDefaultVec3 > *) 0 ; SWIG_check_num_args("ofxCvBlob::pts",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::pts",1,"ofxCvBlob *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvBlob::pts",2,"std::vector< ofDefaultVec3 > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
    SWIG_fail_ptr("CvBlob_pts_set",1,SWIGTYPE_p_ofxCvBlob); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofDefaultVec3_t,0))){
    SWIG_fail_ptr("CvBlob_pts_set",2,SWIGTYPE_p_std__vectorT_ofDefaultVec3_t); }  if (arg1) (arg1)->pts = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvBlob_pts_get(lua_State* L) { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ;
  std::vector< ofDefaultVec3 > *result = 0 ; SWIG_check_num_args("ofxCvBlob::pts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::pts",1,"ofxCvBlob *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
    SWIG_fail_ptr("CvBlob_pts_get",1,SWIGTYPE_p_ofxCvBlob); }  result = (std::vector< ofDefaultVec3 > *)& ((arg1)->pts);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofDefaultVec3_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvBlob_nPts_set(lua_State* L) { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; int arg2 ;
  SWIG_check_num_args("ofxCvBlob::nPts",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::nPts",1,"ofxCvBlob *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvBlob::nPts",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
    SWIG_fail_ptr("CvBlob_nPts_set",1,SWIGTYPE_p_ofxCvBlob); }  arg2 = (int)lua_tonumber(L, 2); if (arg1) (arg1)->nPts = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvBlob_nPts_get(lua_State* L) { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; int result;
  SWIG_check_num_args("ofxCvBlob::nPts",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::nPts",1,"ofxCvBlob *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
    SWIG_fail_ptr("CvBlob_nPts_get",1,SWIGTYPE_p_ofxCvBlob); }  result = (int) ((arg1)->nPts);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_CvBlob(lua_State* L) { int SWIG_arg = 0; ofxCvBlob *result = 0 ;
  SWIG_check_num_args("ofxCvBlob::ofxCvBlob",0,0) result = (ofxCvBlob *)new ofxCvBlob();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxCvBlob,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvBlob_draw__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofxCvBlob::draw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::draw",1,"ofxCvBlob *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvBlob::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvBlob::draw",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
    SWIG_fail_ptr("CvBlob_draw",1,SWIGTYPE_p_ofxCvBlob); }  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  (arg1)->draw(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvBlob_draw__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ; float arg2 ;
  SWIG_check_num_args("ofxCvBlob::draw",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::draw",1,"ofxCvBlob *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvBlob::draw",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
    SWIG_fail_ptr("CvBlob_draw",1,SWIGTYPE_p_ofxCvBlob); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->draw(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvBlob_draw__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofxCvBlob *arg1 = (ofxCvBlob *) 0 ;
  SWIG_check_num_args("ofxCvBlob::draw",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvBlob::draw",1,"ofxCvBlob *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvBlob,0))){
    SWIG_fail_ptr("CvBlob_draw",1,SWIGTYPE_p_ofxCvBlob); }  (arg1)->draw(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvBlob_draw(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvBlob, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvBlob_draw__SWIG_2(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvBlob, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_CvBlob_draw__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvBlob, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvBlob_draw__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvBlob_draw'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvBlob::draw(float,float)\n" "    ofxCvBlob::draw(float)\n" "    ofxCvBlob::draw()\n"); lua_error(L);return 0; }
static void swig_delete_CvBlob(void *obj) {
ofxCvBlob *arg1 = (ofxCvBlob *) obj;
delete arg1;
}
static int _proxy__wrap_new_CvBlob(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CvBlob);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CvBlob_attributes[] = {
    { "area", _wrap_CvBlob_area_get, _wrap_CvBlob_area_set },
    { "length", _wrap_CvBlob_length_get, _wrap_CvBlob_length_set },
    { "boundingRect", _wrap_CvBlob_boundingRect_get, _wrap_CvBlob_boundingRect_set },
    { "centroid", _wrap_CvBlob_centroid_get, _wrap_CvBlob_centroid_set },
    { "hole", _wrap_CvBlob_hole_get, _wrap_CvBlob_hole_set },
    { "pts", _wrap_CvBlob_pts_get, _wrap_CvBlob_pts_set },
    { "nPts", _wrap_CvBlob_nPts_get, _wrap_CvBlob_nPts_set },
    {0,0,0}
};
static swig_lua_method swig_CvBlob_methods[]= {
    { "draw", _wrap_CvBlob_draw},
    {0,0}
};
static swig_lua_method swig_CvBlob_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CvBlob_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CvBlob_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CvBlob_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CvBlob_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CvBlob_Sf_SwigStatic = {
    "CvBlob",
    swig_CvBlob_Sf_SwigStatic_methods,
    swig_CvBlob_Sf_SwigStatic_attributes,
    swig_CvBlob_Sf_SwigStatic_constants,
    swig_CvBlob_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CvBlob_bases[] = {0};
static const char *swig_CvBlob_base_names[] = {0};
static swig_lua_class _wrap_class_CvBlob = { "CvBlob", "CvBlob", &SWIGTYPE_p_ofxCvBlob,_proxy__wrap_new_CvBlob, swig_delete_CvBlob, swig_CvBlob_methods, swig_CvBlob_attributes, &swig_CvBlob_Sf_SwigStatic, swig_CvBlob_meta, swig_CvBlob_bases, swig_CvBlob_base_names };

static int _wrap_CvGrayscaleImage_setFromPixels__SWIG_0_0(lua_State* L) { int SWIG_arg = 0;
  ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; ofPixels *arg2 = 0 ; SWIG_check_num_args("setFromPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setFromPixels",1,"ofxCvGrayscaleImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setFromPixels",2,"ofPixels const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_setFromPixels",1,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels,0))){
    SWIG_fail_ptr("CvGrayscaleImage_setFromPixels",2,SWIGTYPE_p_ofPixels); }  (arg1)->setFromPixels((ofPixels const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvGrayscaleImage_setFromPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofxCvGrayscaleImage::setFromPixels",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::setFromPixels",1,"ofxCvGrayscaleImage *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::setFromPixels",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvGrayscaleImage::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvGrayscaleImage::setFromPixels",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_setFromPixels",1,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("CvGrayscaleImage_setFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvGrayscaleImage_setFromPixels(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_CvGrayscaleImage_setFromPixels__SWIG_0_0(L);}  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_CvGrayscaleImage_setFromPixels__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvGrayscaleImage_setFromPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    setFromPixels(ofPixels const &)\n"
  "    ofxCvGrayscaleImage::setFromPixels(unsigned char const *,int,int)\n"); lua_error(L);return 0; }
static int _wrap_CvGrayscaleImage_absDiff__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ;
  SWIG_check_num_args("ofxCvGrayscaleImage::absDiff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::absDiff",1,"ofxCvGrayscaleImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::absDiff",2,"ofxCvGrayscaleImage &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_absDiff",1,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_absDiff",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  (arg1)->absDiff(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvGrayscaleImage_absDiff__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; ofxCvGrayscaleImage *arg3 = 0 ;
  SWIG_check_num_args("ofxCvGrayscaleImage::absDiff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::absDiff",1,"ofxCvGrayscaleImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::absDiff",2,"ofxCvGrayscaleImage &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxCvGrayscaleImage::absDiff",3,"ofxCvGrayscaleImage &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_absDiff",1,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_absDiff",2,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_absDiff",3,SWIGTYPE_p_ofxCvGrayscaleImage); }  (arg1)->absDiff(*arg2,*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvGrayscaleImage_absDiff(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvGrayscaleImage_absDiff__SWIG_0(L);}  }  }  if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvGrayscaleImage_absDiff__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvGrayscaleImage_absDiff'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvGrayscaleImage::absDiff(ofxCvGrayscaleImage &)\n"
  "    ofxCvGrayscaleImage::absDiff(ofxCvGrayscaleImage &,ofxCvGrayscaleImage &)\n"); lua_error(L);return 0; }
static int _wrap_CvGrayscaleImage_threshold__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; int arg2 ; bool arg3 ;
  SWIG_check_num_args("ofxCvGrayscaleImage::threshold",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::threshold",1,"ofxCvGrayscaleImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::threshold",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxCvGrayscaleImage::threshold",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_threshold",1,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0); (arg1)->threshold(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvGrayscaleImage_threshold__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; int arg2 ; SWIG_check_num_args("ofxCvGrayscaleImage::threshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::threshold",1,"ofxCvGrayscaleImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::threshold",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_threshold",1,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->threshold(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvGrayscaleImage_threshold(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_CvGrayscaleImage_threshold__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }
         if (_v) { return _wrap_CvGrayscaleImage_threshold__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvGrayscaleImage_threshold'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvGrayscaleImage::threshold(int,bool)\n"
  "    ofxCvGrayscaleImage::threshold(int)\n"); lua_error(L);return 0; }
static int _wrap_CvGrayscaleImage_adaptiveThreshold__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; int arg2 ; int arg3 ; bool arg4 ; bool arg5 ;
  SWIG_check_num_args("ofxCvGrayscaleImage::adaptiveThreshold",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",1,"ofxCvGrayscaleImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",5,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_adaptiveThreshold",1,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->adaptiveThreshold(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvGrayscaleImage_adaptiveThreshold__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; int arg2 ; int arg3 ; bool arg4 ;
  SWIG_check_num_args("ofxCvGrayscaleImage::adaptiveThreshold",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",1,"ofxCvGrayscaleImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_adaptiveThreshold",1,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); (arg1)->adaptiveThreshold(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvGrayscaleImage_adaptiveThreshold__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofxCvGrayscaleImage::adaptiveThreshold",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",1,"ofxCvGrayscaleImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_adaptiveThreshold",1,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); (arg1)->adaptiveThreshold(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvGrayscaleImage_adaptiveThreshold__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; int arg2 ;
  SWIG_check_num_args("ofxCvGrayscaleImage::adaptiveThreshold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",1,"ofxCvGrayscaleImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::adaptiveThreshold",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_adaptiveThreshold",1,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->adaptiveThreshold(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvGrayscaleImage_adaptiveThreshold(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_CvGrayscaleImage_adaptiveThreshold__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_CvGrayscaleImage_adaptiveThreshold__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_CvGrayscaleImage_adaptiveThreshold__SWIG_1(L);}  }
         }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isboolean(L,argv[3]); }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) {
              return _wrap_CvGrayscaleImage_adaptiveThreshold__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvGrayscaleImage_adaptiveThreshold'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvGrayscaleImage::adaptiveThreshold(int,int,bool,bool)\n"
  "    ofxCvGrayscaleImage::adaptiveThreshold(int,int,bool)\n" "    ofxCvGrayscaleImage::adaptiveThreshold(int,int)\n"
  "    ofxCvGrayscaleImage::adaptiveThreshold(int)\n"); lua_error(L);return 0; }
static int _wrap_CvGrayscaleImage_brightnessContrast(lua_State* L) { int SWIG_arg = 0;
  ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofxCvGrayscaleImage::brightnessContrast",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::brightnessContrast",1,"ofxCvGrayscaleImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::brightnessContrast",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvGrayscaleImage::brightnessContrast",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_brightnessContrast",1,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->brightnessContrast(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvGrayscaleImage_scaleIntoMe__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; ofxCvImage *arg2 = 0 ; int arg3 ;
  SWIG_check_num_args("ofxCvGrayscaleImage::scaleIntoMe",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::scaleIntoMe",1,"ofxCvGrayscaleImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::scaleIntoMe",2,"ofxCvImage &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvGrayscaleImage::scaleIntoMe",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->scaleIntoMe(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvGrayscaleImage_scaleIntoMe__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; ofxCvImage *arg2 = 0 ;
  SWIG_check_num_args("ofxCvGrayscaleImage::scaleIntoMe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::scaleIntoMe",1,"ofxCvGrayscaleImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::scaleIntoMe",2,"ofxCvImage &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  (arg1)->scaleIntoMe(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvGrayscaleImage_scaleIntoMe(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_CvGrayscaleImage_scaleIntoMe__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvGrayscaleImage_scaleIntoMe__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvGrayscaleImage_scaleIntoMe'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvGrayscaleImage::scaleIntoMe(ofxCvImage &,int)\n"
  "    ofxCvGrayscaleImage::scaleIntoMe(ofxCvImage &)\n"); lua_error(L);return 0; }
static int _wrap_CvGrayscaleImage_blurHeavily(lua_State* L) { int SWIG_arg = 0;
  ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; SWIG_check_num_args("ofxCvGrayscaleImage::blurHeavily",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::blurHeavily",1,"ofxCvGrayscaleImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_blurHeavily",1,SWIGTYPE_p_ofxCvGrayscaleImage); }  (arg1)->blurHeavily(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvGrayscaleImage_erode_3x3(lua_State* L) { int SWIG_arg = 0;
  ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; SWIG_check_num_args("ofxCvGrayscaleImage::erode_3x3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::erode_3x3",1,"ofxCvGrayscaleImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_erode_3x3",1,SWIGTYPE_p_ofxCvGrayscaleImage); }  (arg1)->erode_3x3(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvGrayscaleImage_dilate_3x3(lua_State* L) { int SWIG_arg = 0;
  ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; SWIG_check_num_args("ofxCvGrayscaleImage::dilate_3x3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::dilate_3x3",1,"ofxCvGrayscaleImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_dilate_3x3",1,SWIGTYPE_p_ofxCvGrayscaleImage); }  (arg1)->dilate_3x3(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvGrayscaleImage_setFromColorImage(lua_State* L) { int SWIG_arg = 0;
  ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; ofxCvColorImage *arg2 = 0 ;
  SWIG_check_num_args("ofxCvGrayscaleImage::setFromColorImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::setFromColorImage",1,"ofxCvGrayscaleImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::setFromColorImage",2,"ofxCvColorImage &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_setFromColorImage",1,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvColorImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_setFromColorImage",2,SWIGTYPE_p_ofxCvColorImage); }  (arg1)->setFromColorImage(*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvGrayscaleImage_setFromFloatImage(lua_State* L) { int SWIG_arg = 0;
  ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) 0 ; ofxCvFloatImage *arg2 = 0 ;
  SWIG_check_num_args("ofxCvGrayscaleImage::setFromFloatImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvGrayscaleImage::setFromFloatImage",1,"ofxCvGrayscaleImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvGrayscaleImage::setFromFloatImage",2,"ofxCvFloatImage &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_setFromFloatImage",1,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvFloatImage,0))){
    SWIG_fail_ptr("CvGrayscaleImage_setFromFloatImage",2,SWIGTYPE_p_ofxCvFloatImage); }  (arg1)->setFromFloatImage(*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_CvGrayscaleImage(void *obj) {
ofxCvGrayscaleImage *arg1 = (ofxCvGrayscaleImage *) obj;
delete arg1;
}
static swig_lua_attribute swig_CvGrayscaleImage_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CvGrayscaleImage_methods[]= {
    { "setFromPixels", _wrap_CvGrayscaleImage_setFromPixels},
    { "absDiff", _wrap_CvGrayscaleImage_absDiff},
    { "threshold", _wrap_CvGrayscaleImage_threshold},
    { "adaptiveThreshold", _wrap_CvGrayscaleImage_adaptiveThreshold},
    { "brightnessContrast", _wrap_CvGrayscaleImage_brightnessContrast},
    { "scaleIntoMe", _wrap_CvGrayscaleImage_scaleIntoMe},
    { "blurHeavily", _wrap_CvGrayscaleImage_blurHeavily},
    { "erode_3x3", _wrap_CvGrayscaleImage_erode_3x3},
    { "dilate_3x3", _wrap_CvGrayscaleImage_dilate_3x3},
    { "setFromColorImage", _wrap_CvGrayscaleImage_setFromColorImage},
    { "setFromFloatImage", _wrap_CvGrayscaleImage_setFromFloatImage},
    {0,0}
};
static swig_lua_method swig_CvGrayscaleImage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CvGrayscaleImage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CvGrayscaleImage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CvGrayscaleImage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CvGrayscaleImage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CvGrayscaleImage_Sf_SwigStatic = {
    "CvGrayscaleImage",
    swig_CvGrayscaleImage_Sf_SwigStatic_methods,
    swig_CvGrayscaleImage_Sf_SwigStatic_attributes,
    swig_CvGrayscaleImage_Sf_SwigStatic_constants,
    swig_CvGrayscaleImage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CvGrayscaleImage_bases[] = {0,0};
static const char *swig_CvGrayscaleImage_base_names[] = {"ofxCvImage *",0};
static swig_lua_class _wrap_class_CvGrayscaleImage = { "CvGrayscaleImage", "CvGrayscaleImage", &SWIGTYPE_p_ofxCvGrayscaleImage,0, swig_delete_CvGrayscaleImage, swig_CvGrayscaleImage_methods, swig_CvGrayscaleImage_attributes, &swig_CvGrayscaleImage_Sf_SwigStatic, swig_CvGrayscaleImage_meta, swig_CvGrayscaleImage_bases, swig_CvGrayscaleImage_base_names };

static int _wrap_CvColorImage_setFromPixels__SWIG_0_0(lua_State* L) { int SWIG_arg = 0;
  ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ; ofPixels *arg2 = 0 ; SWIG_check_num_args("setFromPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setFromPixels",1,"ofxCvColorImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setFromPixels",2,"ofPixels const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
    SWIG_fail_ptr("CvColorImage_setFromPixels",1,SWIGTYPE_p_ofxCvColorImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels,0))){
    SWIG_fail_ptr("CvColorImage_setFromPixels",2,SWIGTYPE_p_ofPixels); }  (arg1)->setFromPixels((ofPixels const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvColorImage_set__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ;
  float arg2 ; SWIG_check_num_args("ofxCvColorImage::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::set",1,"ofxCvColorImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvColorImage::set",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
    SWIG_fail_ptr("CvColorImage_set",1,SWIGTYPE_p_ofxCvColorImage); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->set(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvColorImage_set__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ;
  int arg2 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofxCvColorImage::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::set",1,"ofxCvColorImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvColorImage::set",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvColorImage::set",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvColorImage::set",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
    SWIG_fail_ptr("CvColorImage_set",1,SWIGTYPE_p_ofxCvColorImage); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); (arg1)->set(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvColorImage_set(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvColorImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_CvColorImage_set__SWIG_0(L);}  }
     }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvColorImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_CvColorImage_set__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvColorImage_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvColorImage::set(float)\n" "    ofxCvColorImage::set(int,int,int)\n"); lua_error(L);return 0; }
static int _wrap_CvColorImage_setFromPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofxCvColorImage::setFromPixels",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::setFromPixels",1,"ofxCvColorImage *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvColorImage::setFromPixels",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvColorImage::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvColorImage::setFromPixels",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
    SWIG_fail_ptr("CvColorImage_setFromPixels",1,SWIGTYPE_p_ofxCvColorImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("CvColorImage_setFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvColorImage_setFromPixels(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvColorImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_CvColorImage_setFromPixels__SWIG_0_0(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvColorImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_CvColorImage_setFromPixels__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvColorImage_setFromPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    setFromPixels(ofPixels const &)\n"
  "    ofxCvColorImage::setFromPixels(unsigned char const *,int,int)\n"); lua_error(L);return 0; }
static int _wrap_CvColorImage_setFromGrayscalePlanarImages(lua_State* L) { int SWIG_arg = 0;
  ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; ofxCvGrayscaleImage *arg3 = 0 ;
  ofxCvGrayscaleImage *arg4 = 0 ; SWIG_check_num_args("ofxCvColorImage::setFromGrayscalePlanarImages",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::setFromGrayscalePlanarImages",1,"ofxCvColorImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvColorImage::setFromGrayscalePlanarImages",2,"ofxCvGrayscaleImage &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxCvColorImage::setFromGrayscalePlanarImages",3,"ofxCvGrayscaleImage &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofxCvColorImage::setFromGrayscalePlanarImages",4,"ofxCvGrayscaleImage &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
    SWIG_fail_ptr("CvColorImage_setFromGrayscalePlanarImages",1,SWIGTYPE_p_ofxCvColorImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvColorImage_setFromGrayscalePlanarImages",2,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvColorImage_setFromGrayscalePlanarImages",3,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvColorImage_setFromGrayscalePlanarImages",4,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  (arg1)->setFromGrayscalePlanarImages(*arg2,*arg3,*arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvColorImage_convertToGrayscalePlanarImages(lua_State* L) { int SWIG_arg = 0;
  ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; ofxCvGrayscaleImage *arg3 = 0 ;
  ofxCvGrayscaleImage *arg4 = 0 ; SWIG_check_num_args("ofxCvColorImage::convertToGrayscalePlanarImages",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::convertToGrayscalePlanarImages",1,"ofxCvColorImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvColorImage::convertToGrayscalePlanarImages",2,"ofxCvGrayscaleImage &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxCvColorImage::convertToGrayscalePlanarImages",3,"ofxCvGrayscaleImage &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofxCvColorImage::convertToGrayscalePlanarImages",4,"ofxCvGrayscaleImage &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
    SWIG_fail_ptr("CvColorImage_convertToGrayscalePlanarImages",1,SWIGTYPE_p_ofxCvColorImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvColorImage_convertToGrayscalePlanarImages",2,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvColorImage_convertToGrayscalePlanarImages",3,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvColorImage_convertToGrayscalePlanarImages",4,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  (arg1)->convertToGrayscalePlanarImages(*arg2,*arg3,*arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvColorImage_convertToGrayscalePlanarImage(lua_State* L) { int SWIG_arg = 0;
  ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; int arg3 ;
  SWIG_check_num_args("ofxCvColorImage::convertToGrayscalePlanarImage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::convertToGrayscalePlanarImage",1,"ofxCvColorImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvColorImage::convertToGrayscalePlanarImage",2,"ofxCvGrayscaleImage &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvColorImage::convertToGrayscalePlanarImage",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
    SWIG_fail_ptr("CvColorImage_convertToGrayscalePlanarImage",1,SWIGTYPE_p_ofxCvColorImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvColorImage_convertToGrayscalePlanarImage",2,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  arg3 = (int)lua_tonumber(L, 3); (arg1)->convertToGrayscalePlanarImage(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvColorImage_scaleIntoMe__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ; ofxCvImage *arg2 = 0 ; int arg3 ;
  SWIG_check_num_args("ofxCvColorImage::scaleIntoMe",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::scaleIntoMe",1,"ofxCvColorImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvColorImage::scaleIntoMe",2,"ofxCvImage &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvColorImage::scaleIntoMe",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
    SWIG_fail_ptr("CvColorImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvColorImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvColorImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->scaleIntoMe(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvColorImage_scaleIntoMe__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ; ofxCvImage *arg2 = 0 ; SWIG_check_num_args("ofxCvColorImage::scaleIntoMe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::scaleIntoMe",1,"ofxCvColorImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvColorImage::scaleIntoMe",2,"ofxCvImage &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
    SWIG_fail_ptr("CvColorImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvColorImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvColorImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  (arg1)->scaleIntoMe(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvColorImage_scaleIntoMe(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvColorImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_CvColorImage_scaleIntoMe__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvColorImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvColorImage_scaleIntoMe__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvColorImage_scaleIntoMe'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvColorImage::scaleIntoMe(ofxCvImage &,int)\n"
  "    ofxCvColorImage::scaleIntoMe(ofxCvImage &)\n"); lua_error(L);return 0; }
static int _wrap_CvColorImage_convertRgbToHsv(lua_State* L) { int SWIG_arg = 0; ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ;
  SWIG_check_num_args("ofxCvColorImage::convertRgbToHsv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::convertRgbToHsv",1,"ofxCvColorImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
    SWIG_fail_ptr("CvColorImage_convertRgbToHsv",1,SWIGTYPE_p_ofxCvColorImage); }  (arg1)->convertRgbToHsv(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvColorImage_convertHsvToRgb(lua_State* L) { int SWIG_arg = 0; ofxCvColorImage *arg1 = (ofxCvColorImage *) 0 ;
  SWIG_check_num_args("ofxCvColorImage::convertHsvToRgb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvColorImage::convertHsvToRgb",1,"ofxCvColorImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvColorImage,0))){
    SWIG_fail_ptr("CvColorImage_convertHsvToRgb",1,SWIGTYPE_p_ofxCvColorImage); }  (arg1)->convertHsvToRgb(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_CvColorImage(void *obj) {
ofxCvColorImage *arg1 = (ofxCvColorImage *) obj;
delete arg1;
}
static swig_lua_attribute swig_CvColorImage_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CvColorImage_methods[]= {
    { "set", _wrap_CvColorImage_set},
    { "setFromPixels", _wrap_CvColorImage_setFromPixels},
    { "setFromGrayscalePlanarImages", _wrap_CvColorImage_setFromGrayscalePlanarImages},
    { "convertToGrayscalePlanarImages", _wrap_CvColorImage_convertToGrayscalePlanarImages},
    { "convertToGrayscalePlanarImage", _wrap_CvColorImage_convertToGrayscalePlanarImage},
    { "scaleIntoMe", _wrap_CvColorImage_scaleIntoMe},
    { "convertRgbToHsv", _wrap_CvColorImage_convertRgbToHsv},
    { "convertHsvToRgb", _wrap_CvColorImage_convertHsvToRgb},
    {0,0}
};
static swig_lua_method swig_CvColorImage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CvColorImage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CvColorImage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CvColorImage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CvColorImage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CvColorImage_Sf_SwigStatic = {
    "CvColorImage",
    swig_CvColorImage_Sf_SwigStatic_methods,
    swig_CvColorImage_Sf_SwigStatic_attributes,
    swig_CvColorImage_Sf_SwigStatic_constants,
    swig_CvColorImage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CvColorImage_bases[] = {0,0};
static const char *swig_CvColorImage_base_names[] = {"ofxCvImage *",0};
static swig_lua_class _wrap_class_CvColorImage = { "CvColorImage", "CvColorImage", &SWIGTYPE_p_ofxCvColorImage,0, swig_delete_CvColorImage, swig_CvColorImage_methods, swig_CvColorImage_attributes, &swig_CvColorImage_Sf_SwigStatic, swig_CvColorImage_meta, swig_CvColorImage_bases, swig_CvColorImage_base_names };

static int _wrap_CvFloatImage_setFromPixels__SWIG_0_0(lua_State* L) { int SWIG_arg = 0;
  ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; ofPixels *arg2 = 0 ; SWIG_check_num_args("setFromPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setFromPixels",1,"ofxCvFloatImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setFromPixels",2,"ofPixels const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
    SWIG_fail_ptr("CvFloatImage_setFromPixels",1,SWIGTYPE_p_ofxCvFloatImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels,0))){
    SWIG_fail_ptr("CvFloatImage_setFromPixels",2,SWIGTYPE_p_ofPixels); }  (arg1)->setFromPixels((ofPixels const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvFloatImage_setNativeScale(lua_State* L) { int SWIG_arg = 0; ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofxCvFloatImage::setNativeScale",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::setNativeScale",1,"ofxCvFloatImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvFloatImage::setNativeScale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvFloatImage::setNativeScale",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
    SWIG_fail_ptr("CvFloatImage_setNativeScale",1,SWIGTYPE_p_ofxCvFloatImage); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setNativeScale(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvFloatImage_getNativeScaleMin(lua_State* L) { int SWIG_arg = 0;
  ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; float result; SWIG_check_num_args("ofxCvFloatImage::getNativeScaleMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::getNativeScaleMin",1,"ofxCvFloatImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
    SWIG_fail_ptr("CvFloatImage_getNativeScaleMin",1,SWIGTYPE_p_ofxCvFloatImage); } 
  result = (float)(arg1)->getNativeScaleMin(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvFloatImage_getNativeScaleMax(lua_State* L) { int SWIG_arg = 0;
  ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; float result; SWIG_check_num_args("ofxCvFloatImage::getNativeScaleMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::getNativeScaleMax",1,"ofxCvFloatImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
    SWIG_fail_ptr("CvFloatImage_getNativeScaleMax",1,SWIGTYPE_p_ofxCvFloatImage); } 
  result = (float)(arg1)->getNativeScaleMax(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvFloatImage_setFromPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofxCvFloatImage::setFromPixels",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::setFromPixels",1,"ofxCvFloatImage *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvFloatImage::setFromPixels",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvFloatImage::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvFloatImage::setFromPixels",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
    SWIG_fail_ptr("CvFloatImage_setFromPixels",1,SWIGTYPE_p_ofxCvFloatImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("CvFloatImage_setFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvFloatImage_setFromPixels__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; float *arg2 = (float *) 0 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofxCvFloatImage::setFromPixels",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::setFromPixels",1,"ofxCvFloatImage *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvFloatImage::setFromPixels",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvFloatImage::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvFloatImage::setFromPixels",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
    SWIG_fail_ptr("CvFloatImage_setFromPixels",1,SWIGTYPE_p_ofxCvFloatImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("CvFloatImage_setFromPixels",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setFromPixels(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvFloatImage_setFromPixels(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvFloatImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_CvFloatImage_setFromPixels__SWIG_0_0(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvFloatImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_CvFloatImage_setFromPixels__SWIG_1(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvFloatImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_CvFloatImage_setFromPixels__SWIG_2(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvFloatImage_setFromPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    setFromPixels(ofPixels const &)\n"
  "    ofxCvFloatImage::setFromPixels(unsigned char const *,int,int)\n"
  "    ofxCvFloatImage::setFromPixels(float *,int,int)\n"); lua_error(L);return 0; }
static int _wrap_CvFloatImage_setRoiFromPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofxCvFloatImage::setRoiFromPixels",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::setRoiFromPixels",1,"ofxCvFloatImage *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvFloatImage::setRoiFromPixels",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvFloatImage::setRoiFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvFloatImage::setRoiFromPixels",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
    SWIG_fail_ptr("CvFloatImage_setRoiFromPixels",1,SWIGTYPE_p_ofxCvFloatImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("CvFloatImage_setRoiFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setRoiFromPixels((unsigned char const *)arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvFloatImage_setRoiFromPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; float *arg2 = (float *) 0 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofxCvFloatImage::setRoiFromPixels",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::setRoiFromPixels",1,"ofxCvFloatImage *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvFloatImage::setRoiFromPixels",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvFloatImage::setRoiFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvFloatImage::setRoiFromPixels",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
    SWIG_fail_ptr("CvFloatImage_setRoiFromPixels",1,SWIGTYPE_p_ofxCvFloatImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("CvFloatImage_setRoiFromPixels",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setRoiFromPixels(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvFloatImage_setRoiFromPixels(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvFloatImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_CvFloatImage_setRoiFromPixels__SWIG_0(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvFloatImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_CvFloatImage_setRoiFromPixels__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvFloatImage_setRoiFromPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvFloatImage::setRoiFromPixels(unsigned char const *,int,int)\n"
  "    ofxCvFloatImage::setRoiFromPixels(float *,int,int)\n"); lua_error(L);return 0; }
static int _wrap_CvFloatImage_addWeighted(lua_State* L) { int SWIG_arg = 0; ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ;
  ofxCvGrayscaleImage *arg2 = 0 ; float arg3 ; SWIG_check_num_args("ofxCvFloatImage::addWeighted",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::addWeighted",1,"ofxCvFloatImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvFloatImage::addWeighted",2,"ofxCvGrayscaleImage &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvFloatImage::addWeighted",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
    SWIG_fail_ptr("CvFloatImage_addWeighted",1,SWIGTYPE_p_ofxCvFloatImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvFloatImage_addWeighted",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->addWeighted(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvFloatImage_getPixelsAsFloats(lua_State* L) { int SWIG_arg = 0;
  ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofxCvFloatImage::getPixelsAsFloats",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::getPixelsAsFloats",1,"ofxCvFloatImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
    SWIG_fail_ptr("CvFloatImage_getPixelsAsFloats",1,SWIGTYPE_p_ofxCvFloatImage); } 
  result = (float *)(arg1)->getPixelsAsFloats(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvFloatImage_getFloatPixelsRef(lua_State* L) { int SWIG_arg = 0;
  ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; ofFloatPixels *result = 0 ;
  SWIG_check_num_args("ofxCvFloatImage::getFloatPixelsRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::getFloatPixelsRef",1,"ofxCvFloatImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
    SWIG_fail_ptr("CvFloatImage_getFloatPixelsRef",1,SWIGTYPE_p_ofxCvFloatImage); } 
  result = (ofFloatPixels *) &(arg1)->getFloatPixelsRef(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofFloatPixels,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvFloatImage_getRoiPixelsAsFloats(lua_State* L) { int SWIG_arg = 0;
  ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofxCvFloatImage::getRoiPixelsAsFloats",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::getRoiPixelsAsFloats",1,"ofxCvFloatImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
    SWIG_fail_ptr("CvFloatImage_getRoiPixelsAsFloats",1,SWIGTYPE_p_ofxCvFloatImage); } 
  result = (float *)(arg1)->getRoiPixelsAsFloats(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvFloatImage_getRoiFloatPixelsRef(lua_State* L) { int SWIG_arg = 0;
  ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; ofFloatPixels *result = 0 ;
  SWIG_check_num_args("ofxCvFloatImage::getRoiFloatPixelsRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::getRoiFloatPixelsRef",1,"ofxCvFloatImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
    SWIG_fail_ptr("CvFloatImage_getRoiFloatPixelsRef",1,SWIGTYPE_p_ofxCvFloatImage); } 
  result = (ofFloatPixels *) &(arg1)->getRoiFloatPixelsRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofFloatPixels,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvFloatImage_scaleIntoMe__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; ofxCvImage *arg2 = 0 ; int arg3 ;
  SWIG_check_num_args("ofxCvFloatImage::scaleIntoMe",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::scaleIntoMe",1,"ofxCvFloatImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvFloatImage::scaleIntoMe",2,"ofxCvImage &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvFloatImage::scaleIntoMe",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
    SWIG_fail_ptr("CvFloatImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvFloatImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvFloatImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->scaleIntoMe(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvFloatImage_scaleIntoMe__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxCvFloatImage *arg1 = (ofxCvFloatImage *) 0 ; ofxCvImage *arg2 = 0 ; SWIG_check_num_args("ofxCvFloatImage::scaleIntoMe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvFloatImage::scaleIntoMe",1,"ofxCvFloatImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvFloatImage::scaleIntoMe",2,"ofxCvImage &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvFloatImage,0))){
    SWIG_fail_ptr("CvFloatImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvFloatImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvFloatImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  (arg1)->scaleIntoMe(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvFloatImage_scaleIntoMe(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvFloatImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_CvFloatImage_scaleIntoMe__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvFloatImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvFloatImage_scaleIntoMe__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvFloatImage_scaleIntoMe'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvFloatImage::scaleIntoMe(ofxCvImage &,int)\n"
  "    ofxCvFloatImage::scaleIntoMe(ofxCvImage &)\n"); lua_error(L);return 0; }
static void swig_delete_CvFloatImage(void *obj) {
ofxCvFloatImage *arg1 = (ofxCvFloatImage *) obj;
delete arg1;
}
static swig_lua_attribute swig_CvFloatImage_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CvFloatImage_methods[]= {
    { "setNativeScale", _wrap_CvFloatImage_setNativeScale},
    { "getNativeScaleMin", _wrap_CvFloatImage_getNativeScaleMin},
    { "getNativeScaleMax", _wrap_CvFloatImage_getNativeScaleMax},
    { "setFromPixels", _wrap_CvFloatImage_setFromPixels},
    { "setRoiFromPixels", _wrap_CvFloatImage_setRoiFromPixels},
    { "addWeighted", _wrap_CvFloatImage_addWeighted},
    { "getPixelsAsFloats", _wrap_CvFloatImage_getPixelsAsFloats},
    { "getFloatPixelsRef", _wrap_CvFloatImage_getFloatPixelsRef},
    { "getRoiPixelsAsFloats", _wrap_CvFloatImage_getRoiPixelsAsFloats},
    { "getRoiFloatPixelsRef", _wrap_CvFloatImage_getRoiFloatPixelsRef},
    { "scaleIntoMe", _wrap_CvFloatImage_scaleIntoMe},
    {0,0}
};
static swig_lua_method swig_CvFloatImage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CvFloatImage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CvFloatImage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CvFloatImage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CvFloatImage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CvFloatImage_Sf_SwigStatic = {
    "CvFloatImage",
    swig_CvFloatImage_Sf_SwigStatic_methods,
    swig_CvFloatImage_Sf_SwigStatic_attributes,
    swig_CvFloatImage_Sf_SwigStatic_constants,
    swig_CvFloatImage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CvFloatImage_bases[] = {0,0};
static const char *swig_CvFloatImage_base_names[] = {"ofxCvImage *",0};
static swig_lua_class _wrap_class_CvFloatImage = { "CvFloatImage", "CvFloatImage", &SWIGTYPE_p_ofxCvFloatImage,0, swig_delete_CvFloatImage, swig_CvFloatImage_methods, swig_CvFloatImage_attributes, &swig_CvFloatImage_Sf_SwigStatic, swig_CvFloatImage_meta, swig_CvFloatImage_bases, swig_CvFloatImage_base_names };

static int _wrap_new_CvShortImage__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxCvShortImage *result = 0 ;
  SWIG_check_num_args("ofxCvShortImage::ofxCvShortImage",0,0) result = (ofxCvShortImage *)new ofxCvShortImage();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxCvShortImage,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_CvShortImage__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxCvShortImage *arg1 = 0 ;
  ofxCvShortImage *result = 0 ; SWIG_check_num_args("ofxCvShortImage::ofxCvShortImage",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxCvShortImage::ofxCvShortImage",1,"ofxCvShortImage const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvShortImage,0))){
    SWIG_fail_ptr("new_CvShortImage",1,SWIGTYPE_p_ofxCvShortImage); } 
  result = (ofxCvShortImage *)new ofxCvShortImage((ofxCvShortImage const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxCvShortImage,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_CvShortImage(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_CvShortImage__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvShortImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_new_CvShortImage__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CvShortImage'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvShortImage::ofxCvShortImage()\n" "    ofxCvShortImage::ofxCvShortImage(ofxCvShortImage const &)\n");
  lua_error(L);return 0; }
static int _wrap_CvShortImage_addWeighted(lua_State* L) { int SWIG_arg = 0; ofxCvShortImage *arg1 = (ofxCvShortImage *) 0 ;
  ofxCvGrayscaleImage *arg2 = 0 ; float arg3 ; SWIG_check_num_args("ofxCvShortImage::addWeighted",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvShortImage::addWeighted",1,"ofxCvShortImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvShortImage::addWeighted",2,"ofxCvGrayscaleImage &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvShortImage::addWeighted",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvShortImage,0))){
    SWIG_fail_ptr("CvShortImage_addWeighted",1,SWIGTYPE_p_ofxCvShortImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvShortImage_addWeighted",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->addWeighted(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvShortImage_scaleIntoMe__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxCvShortImage *arg1 = (ofxCvShortImage *) 0 ; ofxCvImage *arg2 = 0 ; int arg3 ;
  SWIG_check_num_args("ofxCvShortImage::scaleIntoMe",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvShortImage::scaleIntoMe",1,"ofxCvShortImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvShortImage::scaleIntoMe",2,"ofxCvImage &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvShortImage::scaleIntoMe",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvShortImage,0))){
    SWIG_fail_ptr("CvShortImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvShortImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvShortImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->scaleIntoMe(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvShortImage_scaleIntoMe__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxCvShortImage *arg1 = (ofxCvShortImage *) 0 ; ofxCvImage *arg2 = 0 ; SWIG_check_num_args("ofxCvShortImage::scaleIntoMe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvShortImage::scaleIntoMe",1,"ofxCvShortImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvShortImage::scaleIntoMe",2,"ofxCvImage &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvShortImage,0))){
    SWIG_fail_ptr("CvShortImage_scaleIntoMe",1,SWIGTYPE_p_ofxCvShortImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvImage,0))){
    SWIG_fail_ptr("CvShortImage_scaleIntoMe",2,SWIGTYPE_p_ofxCvImage); }  (arg1)->scaleIntoMe(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvShortImage_scaleIntoMe(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvShortImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_CvShortImage_scaleIntoMe__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvShortImage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvImage, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvShortImage_scaleIntoMe__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvShortImage_scaleIntoMe'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvShortImage::scaleIntoMe(ofxCvImage &,int)\n"
  "    ofxCvShortImage::scaleIntoMe(ofxCvImage &)\n"); lua_error(L);return 0; }
static int _wrap_CvShortImage_getShortPixelsRef(lua_State* L) { int SWIG_arg = 0;
  ofxCvShortImage *arg1 = (ofxCvShortImage *) 0 ; ofShortPixels *result = 0 ;
  SWIG_check_num_args("ofxCvShortImage::getShortPixelsRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvShortImage::getShortPixelsRef",1,"ofxCvShortImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvShortImage,0))){
    SWIG_fail_ptr("CvShortImage_getShortPixelsRef",1,SWIGTYPE_p_ofxCvShortImage); } 
  result = (ofShortPixels *) &(arg1)->getShortPixelsRef(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofShortPixels,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvShortImage_getRoiShortPixelsRef(lua_State* L) { int SWIG_arg = 0;
  ofxCvShortImage *arg1 = (ofxCvShortImage *) 0 ; ofShortPixels *result = 0 ;
  SWIG_check_num_args("ofxCvShortImage::getRoiShortPixelsRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvShortImage::getRoiShortPixelsRef",1,"ofxCvShortImage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvShortImage,0))){
    SWIG_fail_ptr("CvShortImage_getRoiShortPixelsRef",1,SWIGTYPE_p_ofxCvShortImage); } 
  result = (ofShortPixels *) &(arg1)->getRoiShortPixelsRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofShortPixels,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static void swig_delete_CvShortImage(void *obj) {
ofxCvShortImage *arg1 = (ofxCvShortImage *) obj;
delete arg1;
}
static int _proxy__wrap_new_CvShortImage(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CvShortImage);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CvShortImage_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CvShortImage_methods[]= {
    { "addWeighted", _wrap_CvShortImage_addWeighted},
    { "scaleIntoMe", _wrap_CvShortImage_scaleIntoMe},
    { "getShortPixelsRef", _wrap_CvShortImage_getShortPixelsRef},
    { "getRoiShortPixelsRef", _wrap_CvShortImage_getRoiShortPixelsRef},
    {0,0}
};
static swig_lua_method swig_CvShortImage_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CvShortImage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CvShortImage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CvShortImage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CvShortImage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CvShortImage_Sf_SwigStatic = {
    "CvShortImage",
    swig_CvShortImage_Sf_SwigStatic_methods,
    swig_CvShortImage_Sf_SwigStatic_attributes,
    swig_CvShortImage_Sf_SwigStatic_constants,
    swig_CvShortImage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CvShortImage_bases[] = {0,0};
static const char *swig_CvShortImage_base_names[] = {"ofxCvImage *",0};
static swig_lua_class _wrap_class_CvShortImage = { "CvShortImage", "CvShortImage", &SWIGTYPE_p_ofxCvShortImage,_proxy__wrap_new_CvShortImage, swig_delete_CvShortImage, swig_CvShortImage_methods, swig_CvShortImage_attributes, &swig_CvShortImage_Sf_SwigStatic, swig_CvShortImage_meta, swig_CvShortImage_bases, swig_CvShortImage_base_names };

static int _wrap_CvContourFinder_blobs_set(lua_State* L) { int SWIG_arg = 0;
  ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; std::vector< ofxCvBlob > *arg2 = (std::vector< ofxCvBlob > *) 0 ;
  SWIG_check_num_args("ofxCvContourFinder::blobs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::blobs",1,"ofxCvContourFinder *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvContourFinder::blobs",2,"std::vector< ofxCvBlob > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
    SWIG_fail_ptr("CvContourFinder_blobs_set",1,SWIGTYPE_p_ofxCvContourFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofxCvBlob_t,0))){
    SWIG_fail_ptr("CvContourFinder_blobs_set",2,SWIGTYPE_p_std__vectorT_ofxCvBlob_t); }  if (arg1) (arg1)->blobs = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvContourFinder_blobs_get(lua_State* L) { int SWIG_arg = 0;
  ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; std::vector< ofxCvBlob > *result = 0 ;
  SWIG_check_num_args("ofxCvContourFinder::blobs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::blobs",1,"ofxCvContourFinder *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
    SWIG_fail_ptr("CvContourFinder_blobs_get",1,SWIGTYPE_p_ofxCvContourFinder); } 
  result = (std::vector< ofxCvBlob > *)& ((arg1)->blobs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofxCvBlob_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvContourFinder_nBlobs_set(lua_State* L) { int SWIG_arg = 0;
  ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; int arg2 ; SWIG_check_num_args("ofxCvContourFinder::nBlobs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::nBlobs",1,"ofxCvContourFinder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvContourFinder::nBlobs",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
    SWIG_fail_ptr("CvContourFinder_nBlobs_set",1,SWIGTYPE_p_ofxCvContourFinder); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nBlobs = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvContourFinder_nBlobs_get(lua_State* L) { int SWIG_arg = 0;
  ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; int result; SWIG_check_num_args("ofxCvContourFinder::nBlobs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::nBlobs",1,"ofxCvContourFinder *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
    SWIG_fail_ptr("CvContourFinder_nBlobs_get",1,SWIGTYPE_p_ofxCvContourFinder); }  result = (int) ((arg1)->nBlobs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_CvContourFinder(lua_State* L) { int SWIG_arg = 0; ofxCvContourFinder *result = 0 ;
  SWIG_check_num_args("ofxCvContourFinder::ofxCvContourFinder",0,0) result = (ofxCvContourFinder *)new ofxCvContourFinder();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxCvContourFinder,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvContourFinder_getWidth(lua_State* L) { int SWIG_arg = 0;
  ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; float result; SWIG_check_num_args("ofxCvContourFinder::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::getWidth",1,"ofxCvContourFinder const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
    SWIG_fail_ptr("CvContourFinder_getWidth",1,SWIGTYPE_p_ofxCvContourFinder); } 
  result = (float)((ofxCvContourFinder const *)arg1)->getWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvContourFinder_getHeight(lua_State* L) { int SWIG_arg = 0;
  ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; float result; SWIG_check_num_args("ofxCvContourFinder::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::getHeight",1,"ofxCvContourFinder const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
    SWIG_fail_ptr("CvContourFinder_getHeight",1,SWIGTYPE_p_ofxCvContourFinder); } 
  result = (float)((ofxCvContourFinder const *)arg1)->getHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvContourFinder_findContours__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; int arg3 ; int arg4 ; int arg5 ;
  bool arg6 ; bool arg7 ; int result; SWIG_check_num_args("ofxCvContourFinder::findContours",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::findContours",1,"ofxCvContourFinder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvContourFinder::findContours",2,"ofxCvGrayscaleImage &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvContourFinder::findContours",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvContourFinder::findContours",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvContourFinder::findContours",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofxCvContourFinder::findContours",6,"bool");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("ofxCvContourFinder::findContours",7,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
    SWIG_fail_ptr("CvContourFinder_findContours",1,SWIGTYPE_p_ofxCvContourFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvContourFinder_findContours",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (lua_toboolean(L, 7)!=0); result = (int)(arg1)->findContours(*arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvContourFinder_findContours__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; int arg3 ; int arg4 ; int arg5 ;
  bool arg6 ; int result; SWIG_check_num_args("ofxCvContourFinder::findContours",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::findContours",1,"ofxCvContourFinder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvContourFinder::findContours",2,"ofxCvGrayscaleImage &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvContourFinder::findContours",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvContourFinder::findContours",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvContourFinder::findContours",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofxCvContourFinder::findContours",6,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
    SWIG_fail_ptr("CvContourFinder_findContours",1,SWIGTYPE_p_ofxCvContourFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvContourFinder_findContours",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (lua_toboolean(L, 6)!=0);
  result = (int)(arg1)->findContours(*arg2,arg3,arg4,arg5,arg6); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvContourFinder_findContours(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvContourFinder, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isboolean(L,argv[5]); }  if (_v) { return _wrap_CvContourFinder_findContours__SWIG_1(L);}  }  }  }  }  }
     }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvContourFinder, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isboolean(L,argv[5]); }  if (_v) { { _v = lua_isboolean(L,argv[6]); }  if (_v) {
                  return _wrap_CvContourFinder_findContours__SWIG_0(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvContourFinder_findContours'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvContourFinder::findContours(ofxCvGrayscaleImage &,int,int,int,bool,bool)\n"
  "    ofxCvContourFinder::findContours(ofxCvGrayscaleImage &,int,int,int,bool)\n"); lua_error(L);return 0; }
static int _wrap_CvContourFinder_draw__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; SWIG_check_num_args("ofxCvContourFinder::draw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::draw",1,"ofxCvContourFinder const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
    SWIG_fail_ptr("CvContourFinder_draw",1,SWIGTYPE_p_ofxCvContourFinder); }  ((ofxCvContourFinder const *)arg1)->draw();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvContourFinder_draw__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofxCvContourFinder::draw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::draw",1,"ofxCvContourFinder const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvContourFinder::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvContourFinder::draw",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
    SWIG_fail_ptr("CvContourFinder_draw",1,SWIGTYPE_p_ofxCvContourFinder); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); ((ofxCvContourFinder const *)arg1)->draw(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_CvContourFinder_draw__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SWIG_check_num_args("ofxCvContourFinder::draw",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::draw",1,"ofxCvContourFinder const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvContourFinder::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvContourFinder::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvContourFinder::draw",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvContourFinder::draw",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
    SWIG_fail_ptr("CvContourFinder_draw",1,SWIGTYPE_p_ofxCvContourFinder); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ((ofxCvContourFinder const *)arg1)->draw(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvContourFinder_draw__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; ofPoint *arg2 = 0 ; SWIG_check_num_args("ofxCvContourFinder::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::draw",1,"ofxCvContourFinder const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvContourFinder::draw",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
    SWIG_fail_ptr("CvContourFinder_draw",1,SWIGTYPE_p_ofxCvContourFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPoint,0))){
    SWIG_fail_ptr("CvContourFinder_draw",2,SWIGTYPE_p_ofPoint); } 
  ((ofxCvContourFinder const *)arg1)->draw((ofPoint const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvContourFinder_draw__SWIG_4(lua_State* L) { int SWIG_arg = 0;
  ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; ofRectangle *arg2 = 0 ;
  SWIG_check_num_args("ofxCvContourFinder::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::draw",1,"ofxCvContourFinder const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvContourFinder::draw",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
    SWIG_fail_ptr("CvContourFinder_draw",1,SWIGTYPE_p_ofxCvContourFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("CvContourFinder_draw",2,SWIGTYPE_p_ofRectangle); } 
  ((ofxCvContourFinder const *)arg1)->draw((ofRectangle const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvContourFinder_draw(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvContourFinder, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvContourFinder_draw__SWIG_0(L);}  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvContourFinder, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPoint, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_CvContourFinder_draw__SWIG_3(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvContourFinder, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_CvContourFinder_draw__SWIG_4(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvContourFinder, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_CvContourFinder_draw__SWIG_1(L);}  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvContourFinder, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_CvContourFinder_draw__SWIG_2(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvContourFinder_draw'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvContourFinder::draw() const\n"
  "    ofxCvContourFinder::draw(float,float) const\n" "    ofxCvContourFinder::draw(float,float,float,float) const\n"
  "    ofxCvContourFinder::draw(ofPoint const &) const\n" "    ofxCvContourFinder::draw(ofRectangle const &) const\n");
  lua_error(L);return 0; }
static int _wrap_CvContourFinder_setAnchorPercent(lua_State* L) { int SWIG_arg = 0;
  ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofxCvContourFinder::setAnchorPercent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::setAnchorPercent",1,"ofxCvContourFinder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvContourFinder::setAnchorPercent",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvContourFinder::setAnchorPercent",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
    SWIG_fail_ptr("CvContourFinder_setAnchorPercent",1,SWIGTYPE_p_ofxCvContourFinder); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPercent(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvContourFinder_setAnchorPoint(lua_State* L) { int SWIG_arg = 0;
  ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofxCvContourFinder::setAnchorPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::setAnchorPoint",1,"ofxCvContourFinder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvContourFinder::setAnchorPoint",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvContourFinder::setAnchorPoint",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
    SWIG_fail_ptr("CvContourFinder_setAnchorPoint",1,SWIGTYPE_p_ofxCvContourFinder); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); (arg1)->setAnchorPoint(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_CvContourFinder_resetAnchor(lua_State* L) { int SWIG_arg = 0;
  ofxCvContourFinder *arg1 = (ofxCvContourFinder *) 0 ; SWIG_check_num_args("ofxCvContourFinder::resetAnchor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvContourFinder::resetAnchor",1,"ofxCvContourFinder *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvContourFinder,0))){
    SWIG_fail_ptr("CvContourFinder_resetAnchor",1,SWIGTYPE_p_ofxCvContourFinder); }  (arg1)->resetAnchor(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_CvContourFinder(void *obj) {
ofxCvContourFinder *arg1 = (ofxCvContourFinder *) obj;
delete arg1;
}
static int _proxy__wrap_new_CvContourFinder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CvContourFinder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CvContourFinder_attributes[] = {
    { "blobs", _wrap_CvContourFinder_blobs_get, _wrap_CvContourFinder_blobs_set },
    { "nBlobs", _wrap_CvContourFinder_nBlobs_get, _wrap_CvContourFinder_nBlobs_set },
    {0,0,0}
};
static swig_lua_method swig_CvContourFinder_methods[]= {
    { "getWidth", _wrap_CvContourFinder_getWidth},
    { "getHeight", _wrap_CvContourFinder_getHeight},
    { "findContours", _wrap_CvContourFinder_findContours},
    { "draw", _wrap_CvContourFinder_draw},
    { "setAnchorPercent", _wrap_CvContourFinder_setAnchorPercent},
    { "setAnchorPoint", _wrap_CvContourFinder_setAnchorPoint},
    { "resetAnchor", _wrap_CvContourFinder_resetAnchor},
    {0,0}
};
static swig_lua_method swig_CvContourFinder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CvContourFinder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CvContourFinder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CvContourFinder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CvContourFinder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CvContourFinder_Sf_SwigStatic = {
    "CvContourFinder",
    swig_CvContourFinder_Sf_SwigStatic_methods,
    swig_CvContourFinder_Sf_SwigStatic_attributes,
    swig_CvContourFinder_Sf_SwigStatic_constants,
    swig_CvContourFinder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CvContourFinder_bases[] = {0};
static const char *swig_CvContourFinder_base_names[] = {0};
static swig_lua_class _wrap_class_CvContourFinder = { "CvContourFinder", "CvContourFinder", &SWIGTYPE_p_ofxCvContourFinder,_proxy__wrap_new_CvContourFinder, swig_delete_CvContourFinder, swig_CvContourFinder_methods, swig_CvContourFinder_attributes, &swig_CvContourFinder_Sf_SwigStatic, swig_CvContourFinder_meta, swig_CvContourFinder_bases, swig_CvContourFinder_base_names };

static int _wrap_CvHaarFinder_blobs_set(lua_State* L) { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ;
  std::vector< ofxCvBlob > *arg2 = (std::vector< ofxCvBlob > *) 0 ; SWIG_check_num_args("ofxCvHaarFinder::blobs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::blobs",1,"ofxCvHaarFinder *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofxCvHaarFinder::blobs",2,"std::vector< ofxCvBlob > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_blobs_set",1,SWIGTYPE_p_ofxCvHaarFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofxCvBlob_t,0))){
    SWIG_fail_ptr("CvHaarFinder_blobs_set",2,SWIGTYPE_p_std__vectorT_ofxCvBlob_t); }  if (arg1) (arg1)->blobs = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_blobs_get(lua_State* L) { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ;
  std::vector< ofxCvBlob > *result = 0 ; SWIG_check_num_args("ofxCvHaarFinder::blobs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::blobs",1,"ofxCvHaarFinder *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_blobs_get",1,SWIGTYPE_p_ofxCvHaarFinder); } 
  result = (std::vector< ofxCvBlob > *)& ((arg1)->blobs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofxCvBlob_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_CvHaarFinder__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxCvHaarFinder *result = 0 ;
  SWIG_check_num_args("ofxCvHaarFinder::ofxCvHaarFinder",0,0) result = (ofxCvHaarFinder *)new ofxCvHaarFinder();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxCvHaarFinder,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_CvHaarFinder__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = 0 ;
  ofxCvHaarFinder *result = 0 ; SWIG_check_num_args("ofxCvHaarFinder::ofxCvHaarFinder",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxCvHaarFinder::ofxCvHaarFinder",1,"ofxCvHaarFinder const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("new_CvHaarFinder",1,SWIGTYPE_p_ofxCvHaarFinder); } 
  result = (ofxCvHaarFinder *)new ofxCvHaarFinder((ofxCvHaarFinder const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxCvHaarFinder,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_CvHaarFinder(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_CvHaarFinder__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_new_CvHaarFinder__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CvHaarFinder'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxCvHaarFinder::ofxCvHaarFinder()\n" "    ofxCvHaarFinder::ofxCvHaarFinder(ofxCvHaarFinder const &)\n");
  lua_error(L);return 0; }
static int _wrap_CvHaarFinder_setup(lua_State* L) { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ;
  std::string arg2 ; SWIG_check_num_args("ofxCvHaarFinder::setup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::setup",1,"ofxCvHaarFinder *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxCvHaarFinder::setup",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_setup",1,SWIGTYPE_p_ofxCvHaarFinder); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (arg1)->setup(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_setScaleHaar(lua_State* L) { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ;
  float arg2 ; SWIG_check_num_args("ofxCvHaarFinder::setScaleHaar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::setScaleHaar",1,"ofxCvHaarFinder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvHaarFinder::setScaleHaar",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_setScaleHaar",1,SWIGTYPE_p_ofxCvHaarFinder); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setScaleHaar(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_setNeighbors(lua_State* L) { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ;
  unsigned int arg2 ; SWIG_check_num_args("ofxCvHaarFinder::setNeighbors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::setNeighbors",1,"ofxCvHaarFinder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvHaarFinder::setNeighbors",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_setNeighbors",1,SWIGTYPE_p_ofxCvHaarFinder); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  (arg1)->setNeighbors(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofImage *arg2 = 0 ; int arg3 ; int arg4 ; int result;
  SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofImage &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofImage,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofImage); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); result = (int)(arg1)->findHaarObjects(*arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofImage *arg2 = 0 ; int arg3 ; int result;
  SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofImage &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofImage,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofImage); }  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->findHaarObjects(*arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofImage *arg2 = 0 ; int result;
  SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofImage &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofImage,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofImage); }  result = (int)(arg1)->findHaarObjects(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; int arg3 ; int arg4 ; int result;
  SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofxCvGrayscaleImage const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); result = (int)(arg1)->findHaarObjects((ofxCvGrayscaleImage const &)*arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_4(lua_State* L) { int SWIG_arg = 0;
  ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; int arg3 ; int result;
  SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofxCvGrayscaleImage const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->findHaarObjects((ofxCvGrayscaleImage const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_5(lua_State* L) { int SWIG_arg = 0;
  ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; int result;
  SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofxCvGrayscaleImage const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  result = (int)(arg1)->findHaarObjects((ofxCvGrayscaleImage const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_6(lua_State* L) { int SWIG_arg = 0;
  ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; ofRectangle *arg3 = 0 ; int arg4 ; int arg5 ;
  int result; SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofxCvGrayscaleImage const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"ofRectangle &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",3,SWIGTYPE_p_ofRectangle); }  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); result = (int)(arg1)->findHaarObjects((ofxCvGrayscaleImage const &)*arg2,*arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_7(lua_State* L) { int SWIG_arg = 0;
  ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; ofRectangle *arg3 = 0 ; int arg4 ; int result;
  SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofxCvGrayscaleImage const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"ofRectangle &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",3,SWIGTYPE_p_ofRectangle); }  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->findHaarObjects((ofxCvGrayscaleImage const &)*arg2,*arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_8(lua_State* L) { int SWIG_arg = 0;
  ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; ofRectangle *arg3 = 0 ; int result;
  SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofxCvGrayscaleImage const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"ofRectangle &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofxCvGrayscaleImage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",3,SWIGTYPE_p_ofRectangle); } 
  result = (int)(arg1)->findHaarObjects((ofxCvGrayscaleImage const &)*arg2,*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_9(lua_State* L) { int SWIG_arg = 0;
  ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ;
  int arg7 ; int arg8 ; int result; SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofxCvGrayscaleImage const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",8,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7); arg8 = (int)lua_tonumber(L, 8);
  result = (int)(arg1)->findHaarObjects((ofxCvGrayscaleImage const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_10(lua_State* L) { int SWIG_arg = 0;
  ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ;
  int arg7 ; int result; SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofxCvGrayscaleImage const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",7,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  result = (int)(arg1)->findHaarObjects((ofxCvGrayscaleImage const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_11(lua_State* L) { int SWIG_arg = 0;
  ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofxCvGrayscaleImage *arg2 = 0 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ;
  int result; SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofxCvGrayscaleImage const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxCvGrayscaleImage,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofxCvGrayscaleImage); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  result = (int)(arg1)->findHaarObjects((ofxCvGrayscaleImage const &)*arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_12(lua_State* L) { int SWIG_arg = 0;
  ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofPixels *arg2 = 0 ; int arg3 ; int arg4 ; int result;
  SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofPixels &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofPixels); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); result = (int)(arg1)->findHaarObjects(*arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_13(lua_State* L) { int SWIG_arg = 0;
  ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofPixels *arg2 = 0 ; int arg3 ; int result;
  SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofPixels &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofPixels); }  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->findHaarObjects(*arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_findHaarObjects__SWIG_14(lua_State* L) { int SWIG_arg = 0;
  ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ; ofPixels *arg2 = 0 ; int result;
  SWIG_check_num_args("ofxCvHaarFinder::findHaarObjects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",1,"ofxCvHaarFinder *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxCvHaarFinder::findHaarObjects",2,"ofPixels &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",1,SWIGTYPE_p_ofxCvHaarFinder); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels,0))){
    SWIG_fail_ptr("CvHaarFinder_findHaarObjects",2,SWIGTYPE_p_ofPixels); }  result = (int)(arg1)->findHaarObjects(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_findHaarObjects(lua_State* L) { int argc; int argv[9]={ 1,2,3,4,5,6,7,8,9} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofImage, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_2(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_5(L);}  }  } 
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_14(L);}  }  }  if (argc == 3) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofImage, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvHaarFinder_findHaarObjects__SWIG_1(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_8(L);}  }  }  }  if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvHaarFinder_findHaarObjects__SWIG_13(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_CvHaarFinder_findHaarObjects__SWIG_4(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofImage, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_0(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_12(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_CvHaarFinder_findHaarObjects__SWIG_7(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_3(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); } 
            if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_6(L);}  }  }  }  }  }  if (argc == 6) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_11(L);}  }  }  }  }  }
     }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_CvHaarFinder_findHaarObjects__SWIG_10(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxCvHaarFinder, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxCvGrayscaleImage, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_CvHaarFinder_findHaarObjects__SWIG_9(L);}  }  }  }  }
           }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CvHaarFinder_findHaarObjects'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxCvHaarFinder::findHaarObjects(ofImage &,int,int)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofImage &,int)\n" "    ofxCvHaarFinder::findHaarObjects(ofImage &)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofxCvGrayscaleImage const &,int,int)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofxCvGrayscaleImage const &,int)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofxCvGrayscaleImage const &)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofxCvGrayscaleImage const &,ofRectangle &,int,int)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofxCvGrayscaleImage const &,ofRectangle &,int)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofxCvGrayscaleImage const &,ofRectangle &)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofxCvGrayscaleImage const &,int,int,int,int,int,int)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofxCvGrayscaleImage const &,int,int,int,int,int)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofxCvGrayscaleImage const &,int,int,int,int)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofPixels &,int,int)\n" "    ofxCvHaarFinder::findHaarObjects(ofPixels &,int)\n"
  "    ofxCvHaarFinder::findHaarObjects(ofPixels &)\n"); lua_error(L);return 0; }
static int _wrap_CvHaarFinder_getWidth(lua_State* L) { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ;
  float result; SWIG_check_num_args("ofxCvHaarFinder::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::getWidth",1,"ofxCvHaarFinder *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_getWidth",1,SWIGTYPE_p_ofxCvHaarFinder); }  result = (float)(arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_getHeight(lua_State* L) { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ;
  float result; SWIG_check_num_args("ofxCvHaarFinder::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::getHeight",1,"ofxCvHaarFinder *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_getHeight",1,SWIGTYPE_p_ofxCvHaarFinder); }  result = (float)(arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_CvHaarFinder_draw(lua_State* L) { int SWIG_arg = 0; ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofxCvHaarFinder::draw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxCvHaarFinder::draw",1,"ofxCvHaarFinder *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxCvHaarFinder::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxCvHaarFinder::draw",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxCvHaarFinder,0))){
    SWIG_fail_ptr("CvHaarFinder_draw",1,SWIGTYPE_p_ofxCvHaarFinder); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->draw(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static void swig_delete_CvHaarFinder(void *obj) {
ofxCvHaarFinder *arg1 = (ofxCvHaarFinder *) obj;
delete arg1;
}
static int _proxy__wrap_new_CvHaarFinder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CvHaarFinder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CvHaarFinder_attributes[] = {
    { "blobs", _wrap_CvHaarFinder_blobs_get, _wrap_CvHaarFinder_blobs_set },
    {0,0,0}
};
static swig_lua_method swig_CvHaarFinder_methods[]= {
    { "setup", _wrap_CvHaarFinder_setup},
    { "setScaleHaar", _wrap_CvHaarFinder_setScaleHaar},
    { "setNeighbors", _wrap_CvHaarFinder_setNeighbors},
    { "findHaarObjects", _wrap_CvHaarFinder_findHaarObjects},
    { "getWidth", _wrap_CvHaarFinder_getWidth},
    { "getHeight", _wrap_CvHaarFinder_getHeight},
    { "draw", _wrap_CvHaarFinder_draw},
    {0,0}
};
static swig_lua_method swig_CvHaarFinder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CvHaarFinder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CvHaarFinder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CvHaarFinder_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CvHaarFinder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CvHaarFinder_Sf_SwigStatic = {
    "CvHaarFinder",
    swig_CvHaarFinder_Sf_SwigStatic_methods,
    swig_CvHaarFinder_Sf_SwigStatic_attributes,
    swig_CvHaarFinder_Sf_SwigStatic_constants,
    swig_CvHaarFinder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CvHaarFinder_bases[] = {0};
static const char *swig_CvHaarFinder_base_names[] = {0};
static swig_lua_class _wrap_class_CvHaarFinder = { "CvHaarFinder", "CvHaarFinder", &SWIGTYPE_p_ofxCvHaarFinder,_proxy__wrap_new_CvHaarFinder, swig_delete_CvHaarFinder, swig_CvHaarFinder_methods, swig_CvHaarFinder_attributes, &swig_CvHaarFinder_Sf_SwigStatic, swig_CvHaarFinder_meta, swig_CvHaarFinder_bases, swig_CvHaarFinder_base_names };

static int _wrap_new_OscBundle__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxOscBundle *result = 0 ;
  SWIG_check_num_args("ofxOscBundle::ofxOscBundle",0,0) result = (ofxOscBundle *)new ofxOscBundle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscBundle,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_OscBundle__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxOscBundle *arg1 = 0 ; ofxOscBundle *result = 0 ;
  SWIG_check_num_args("ofxOscBundle::ofxOscBundle",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxOscBundle::ofxOscBundle",1,"ofxOscBundle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscBundle,0))){
    SWIG_fail_ptr("new_OscBundle",1,SWIGTYPE_p_ofxOscBundle); } 
  result = (ofxOscBundle *)new ofxOscBundle((ofxOscBundle const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscBundle,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_OscBundle(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_OscBundle__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxOscBundle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_new_OscBundle__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OscBundle'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxOscBundle::ofxOscBundle()\n" "    ofxOscBundle::ofxOscBundle(ofxOscBundle const &)\n"); lua_error(L);return 0; }
static int _wrap_OscBundle_copy(lua_State* L) { int SWIG_arg = 0; ofxOscBundle *arg1 = (ofxOscBundle *) 0 ;
  ofxOscBundle *arg2 = 0 ; ofxOscBundle *result = 0 ; SWIG_check_num_args("ofxOscBundle::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscBundle::copy",1,"ofxOscBundle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxOscBundle::copy",2,"ofxOscBundle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscBundle,0))){
    SWIG_fail_ptr("OscBundle_copy",1,SWIGTYPE_p_ofxOscBundle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxOscBundle,0))){
    SWIG_fail_ptr("OscBundle_copy",2,SWIGTYPE_p_ofxOscBundle); } 
  result = (ofxOscBundle *) &(arg1)->copy((ofxOscBundle const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscBundle,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_OscBundle_clear(lua_State* L) { int SWIG_arg = 0; ofxOscBundle *arg1 = (ofxOscBundle *) 0 ;
  SWIG_check_num_args("ofxOscBundle::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscBundle::clear",1,"ofxOscBundle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscBundle,0))){
    SWIG_fail_ptr("OscBundle_clear",1,SWIGTYPE_p_ofxOscBundle); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_OscBundle_addBundle(lua_State* L) { int SWIG_arg = 0; ofxOscBundle *arg1 = (ofxOscBundle *) 0 ;
  ofxOscBundle *arg2 = 0 ; SWIG_check_num_args("ofxOscBundle::addBundle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscBundle::addBundle",1,"ofxOscBundle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxOscBundle::addBundle",2,"ofxOscBundle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscBundle,0))){
    SWIG_fail_ptr("OscBundle_addBundle",1,SWIGTYPE_p_ofxOscBundle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxOscBundle,0))){
    SWIG_fail_ptr("OscBundle_addBundle",2,SWIGTYPE_p_ofxOscBundle); }  (arg1)->addBundle((ofxOscBundle const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscBundle_addMessage(lua_State* L) { int SWIG_arg = 0; ofxOscBundle *arg1 = (ofxOscBundle *) 0 ;
  ofxOscMessage *arg2 = 0 ; SWIG_check_num_args("ofxOscBundle::addMessage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscBundle::addMessage",1,"ofxOscBundle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxOscBundle::addMessage",2,"ofxOscMessage const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscBundle,0))){
    SWIG_fail_ptr("OscBundle_addMessage",1,SWIGTYPE_p_ofxOscBundle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscBundle_addMessage",2,SWIGTYPE_p_ofxOscMessage); }  (arg1)->addMessage((ofxOscMessage const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscBundle_getBundleCount(lua_State* L) { int SWIG_arg = 0; ofxOscBundle *arg1 = (ofxOscBundle *) 0 ;
  int result; SWIG_check_num_args("ofxOscBundle::getBundleCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscBundle::getBundleCount",1,"ofxOscBundle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscBundle,0))){
    SWIG_fail_ptr("OscBundle_getBundleCount",1,SWIGTYPE_p_ofxOscBundle); } 
  result = (int)((ofxOscBundle const *)arg1)->getBundleCount(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscBundle_getMessageCount(lua_State* L) { int SWIG_arg = 0; ofxOscBundle *arg1 = (ofxOscBundle *) 0 ;
  int result; SWIG_check_num_args("ofxOscBundle::getMessageCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscBundle::getMessageCount",1,"ofxOscBundle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscBundle,0))){
    SWIG_fail_ptr("OscBundle_getMessageCount",1,SWIGTYPE_p_ofxOscBundle); } 
  result = (int)((ofxOscBundle const *)arg1)->getMessageCount(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscBundle_getBundleAt__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxOscBundle *arg1 = (ofxOscBundle *) 0 ;
  std::size_t arg2 ; ofxOscBundle *result = 0 ; SWIG_check_num_args("ofxOscBundle::getBundleAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscBundle::getBundleAt",1,"ofxOscBundle const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscBundle::getBundleAt",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscBundle,0))){
    SWIG_fail_ptr("OscBundle_getBundleAt",1,SWIGTYPE_p_ofxOscBundle); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = (ofxOscBundle *) &((ofxOscBundle const *)arg1)->getBundleAt(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscBundle,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_OscBundle_getBundleAt__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxOscBundle *arg1 = (ofxOscBundle *) 0 ;
  std::size_t arg2 ; ofxOscBundle *result = 0 ; SWIG_check_num_args("ofxOscBundle::getBundleAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscBundle::getBundleAt",1,"ofxOscBundle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscBundle::getBundleAt",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscBundle,0))){
    SWIG_fail_ptr("OscBundle_getBundleAt",1,SWIGTYPE_p_ofxOscBundle); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = (ofxOscBundle *) &(arg1)->getBundleAt(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscBundle,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscBundle_getBundleAt(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxOscBundle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_OscBundle_getBundleAt__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxOscBundle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_OscBundle_getBundleAt__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OscBundle_getBundleAt'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxOscBundle::getBundleAt(std::size_t) const\n"
  "    ofxOscBundle::getBundleAt(std::size_t)\n"); lua_error(L);return 0; }
static int _wrap_OscBundle_getMessageAt__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxOscBundle *arg1 = (ofxOscBundle *) 0 ;
  std::size_t arg2 ; ofxOscMessage *result = 0 ; SWIG_check_num_args("ofxOscBundle::getMessageAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscBundle::getMessageAt",1,"ofxOscBundle const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscBundle::getMessageAt",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscBundle,0))){
    SWIG_fail_ptr("OscBundle_getMessageAt",1,SWIGTYPE_p_ofxOscBundle); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = (ofxOscMessage *) &((ofxOscBundle const *)arg1)->getMessageAt(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscMessage,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_OscBundle_getMessageAt__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxOscBundle *arg1 = (ofxOscBundle *) 0 ;
  std::size_t arg2 ; ofxOscMessage *result = 0 ; SWIG_check_num_args("ofxOscBundle::getMessageAt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscBundle::getMessageAt",1,"ofxOscBundle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscBundle::getMessageAt",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscBundle,0))){
    SWIG_fail_ptr("OscBundle_getMessageAt",1,SWIGTYPE_p_ofxOscBundle); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = (ofxOscMessage *) &(arg1)->getMessageAt(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscMessage,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscBundle_getMessageAt(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxOscBundle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_OscBundle_getMessageAt__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxOscBundle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_OscBundle_getMessageAt__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OscBundle_getMessageAt'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxOscBundle::getMessageAt(std::size_t) const\n"
  "    ofxOscBundle::getMessageAt(std::size_t)\n"); lua_error(L);return 0; }
static void swig_delete_OscBundle(void *obj) {
ofxOscBundle *arg1 = (ofxOscBundle *) obj;
delete arg1;
}
static int _proxy__wrap_new_OscBundle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OscBundle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OscBundle_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OscBundle_methods[]= {
    { "copy", _wrap_OscBundle_copy},
    { "clear", _wrap_OscBundle_clear},
    { "addBundle", _wrap_OscBundle_addBundle},
    { "addMessage", _wrap_OscBundle_addMessage},
    { "getBundleCount", _wrap_OscBundle_getBundleCount},
    { "getMessageCount", _wrap_OscBundle_getMessageCount},
    { "getBundleAt", _wrap_OscBundle_getBundleAt},
    { "getMessageAt", _wrap_OscBundle_getMessageAt},
    {0,0}
};
static swig_lua_method swig_OscBundle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OscBundle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OscBundle_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OscBundle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OscBundle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OscBundle_Sf_SwigStatic = {
    "OscBundle",
    swig_OscBundle_Sf_SwigStatic_methods,
    swig_OscBundle_Sf_SwigStatic_attributes,
    swig_OscBundle_Sf_SwigStatic_constants,
    swig_OscBundle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OscBundle_bases[] = {0};
static const char *swig_OscBundle_base_names[] = {0};
static swig_lua_class _wrap_class_OscBundle = { "OscBundle", "OscBundle", &SWIGTYPE_p_ofxOscBundle,_proxy__wrap_new_OscBundle, swig_delete_OscBundle, swig_OscBundle_methods, swig_OscBundle_attributes, &swig_OscBundle_Sf_SwigStatic, swig_OscBundle_meta, swig_OscBundle_bases, swig_OscBundle_base_names };

static int _wrap_new_OscMessage__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *result = 0 ;
  SWIG_check_num_args("ofxOscMessage::ofxOscMessage",0,0) result = (ofxOscMessage *)new ofxOscMessage();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscMessage,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_OscMessage__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = 0 ; ofxOscMessage *result = 0 ;
  SWIG_check_num_args("ofxOscMessage::ofxOscMessage",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxOscMessage::ofxOscMessage",1,"ofxOscMessage const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("new_OscMessage",1,SWIGTYPE_p_ofxOscMessage); } 
  result = (ofxOscMessage *)new ofxOscMessage((ofxOscMessage const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscMessage,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_OscMessage(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_OscMessage__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxOscMessage, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_new_OscMessage__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OscMessage'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxOscMessage::ofxOscMessage()\n" "    ofxOscMessage::ofxOscMessage(ofxOscMessage const &)\n"); lua_error(L);return 0; }
static int _wrap_OscMessage_copy(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  ofxOscMessage *arg2 = 0 ; ofxOscMessage *result = 0 ; SWIG_check_num_args("ofxOscMessage::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::copy",1,"ofxOscMessage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxOscMessage::copy",2,"ofxOscMessage const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_copy",1,SWIGTYPE_p_ofxOscMessage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_copy",2,SWIGTYPE_p_ofxOscMessage); } 
  result = (ofxOscMessage *) &(arg1)->copy((ofxOscMessage const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscMessage,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_OscMessage_clear(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  SWIG_check_num_args("ofxOscMessage::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::clear",1,"ofxOscMessage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_clear",1,SWIGTYPE_p_ofxOscMessage); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_setAddress(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; SWIG_check_num_args("ofxOscMessage::setAddress",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::setAddress",1,"ofxOscMessage *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxOscMessage::setAddress",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_setAddress",1,SWIGTYPE_p_ofxOscMessage); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; (arg1)->setAddress((std::string const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getAddress(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::string result; SWIG_check_num_args("ofxOscMessage::getAddress",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getAddress",1,"ofxOscMessage const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getAddress",1,SWIGTYPE_p_ofxOscMessage); }  result = ((ofxOscMessage const *)arg1)->getAddress();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_OscMessage_getRemoteHost(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::string result; SWIG_check_num_args("ofxOscMessage::getRemoteHost",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getRemoteHost",1,"ofxOscMessage const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getRemoteHost",1,SWIGTYPE_p_ofxOscMessage); } 
  result = ((ofxOscMessage const *)arg1)->getRemoteHost(); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getRemotePort(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  int result; SWIG_check_num_args("ofxOscMessage::getRemotePort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getRemotePort",1,"ofxOscMessage const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getRemotePort",1,SWIGTYPE_p_ofxOscMessage); } 
  result = (int)((ofxOscMessage const *)arg1)->getRemotePort(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getNumArgs(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t result; SWIG_check_num_args("ofxOscMessage::getNumArgs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getNumArgs",1,"ofxOscMessage const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getNumArgs",1,SWIGTYPE_p_ofxOscMessage); } 
  result = (std::size_t)((ofxOscMessage const *)arg1)->getNumArgs(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getArgType(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t arg2 ; ofxOscArgType result; SWIG_check_num_args("ofxOscMessage::getArgType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getArgType",1,"ofxOscMessage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::getArgType",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getArgType",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = (ofxOscArgType)((ofxOscMessage const *)arg1)->getArgType(arg2); { switch((char)result) {
      case 'i': lua_pushstring(L, "i"); break; case 'h': lua_pushstring(L, "h"); break; case 'f': lua_pushstring(L, "f"); break;
      case 'd': lua_pushstring(L, "d"); break; case 's': lua_pushstring(L, "s"); break; case 'S': lua_pushstring(L, "S"); break;
      case 'c': lua_pushstring(L, "c"); break; case 'm': lua_pushstring(L, "m"); break; case 'T': lua_pushstring(L, "T"); break;
      case 'F': lua_pushstring(L, "F"); break; case 'N': lua_pushstring(L, "N"); break; case 'I': lua_pushstring(L, "I"); break;
      case 't': lua_pushstring(L, "t"); break; case 'b': lua_pushstring(L, "b"); break; case 'B': lua_pushstring(L, "B"); break;
      case 'r': lua_pushstring(L, "r"); break; default:  lua_pushstring(L, "\0"); break; }  SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getArgTypeName(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t arg2 ; std::string result; SWIG_check_num_args("ofxOscMessage::getArgTypeName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getArgTypeName",1,"ofxOscMessage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::getArgTypeName",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getArgTypeName",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = ((ofxOscMessage const *)arg1)->getArgTypeName(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_OscMessage_getTypeString(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::string result; SWIG_check_num_args("ofxOscMessage::getTypeString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getTypeString",1,"ofxOscMessage const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getTypeString",1,SWIGTYPE_p_ofxOscMessage); } 
  result = ((ofxOscMessage const *)arg1)->getTypeString(); lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getArgAsInt(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t arg2 ; std::int32_t result; SWIG_check_num_args("ofxOscMessage::getArgAsInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getArgAsInt",1,"ofxOscMessage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::getArgAsInt",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getArgAsInt",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = (std::int32_t)((ofxOscMessage const *)arg1)->getArgAsInt(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getArgAsInt32(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t arg2 ; std::int32_t result; SWIG_check_num_args("ofxOscMessage::getArgAsInt32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getArgAsInt32",1,"ofxOscMessage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::getArgAsInt32",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getArgAsInt32",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = (std::int32_t)((ofxOscMessage const *)arg1)->getArgAsInt32(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getArgAsInt64(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t arg2 ; std::int64_t result; SWIG_check_num_args("ofxOscMessage::getArgAsInt64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getArgAsInt64",1,"ofxOscMessage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::getArgAsInt64",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getArgAsInt64",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = (std::int64_t)((ofxOscMessage const *)arg1)->getArgAsInt64(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getArgAsFloat(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t arg2 ; float result; SWIG_check_num_args("ofxOscMessage::getArgAsFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getArgAsFloat",1,"ofxOscMessage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::getArgAsFloat",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getArgAsFloat",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = (float)((ofxOscMessage const *)arg1)->getArgAsFloat(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getArgAsDouble(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t arg2 ; double result; SWIG_check_num_args("ofxOscMessage::getArgAsDouble",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getArgAsDouble",1,"ofxOscMessage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::getArgAsDouble",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getArgAsDouble",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = (double)((ofxOscMessage const *)arg1)->getArgAsDouble(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getArgAsString(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t arg2 ; std::string result; SWIG_check_num_args("ofxOscMessage::getArgAsString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getArgAsString",1,"ofxOscMessage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::getArgAsString",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getArgAsString",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = ((ofxOscMessage const *)arg1)->getArgAsString(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_OscMessage_getArgAsSymbol(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t arg2 ; std::string result; SWIG_check_num_args("ofxOscMessage::getArgAsSymbol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getArgAsSymbol",1,"ofxOscMessage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::getArgAsSymbol",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getArgAsSymbol",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = ((ofxOscMessage const *)arg1)->getArgAsSymbol(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_OscMessage_getArgAsChar(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t arg2 ; char result; SWIG_check_num_args("ofxOscMessage::getArgAsChar",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getArgAsChar",1,"ofxOscMessage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::getArgAsChar",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getArgAsChar",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = (char)((ofxOscMessage const *)arg1)->getArgAsChar(arg2); lua_pushlstring(L, &result, 1); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getArgAsMidiMessage(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t arg2 ; std::uint32_t result; SWIG_check_num_args("ofxOscMessage::getArgAsMidiMessage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getArgAsMidiMessage",1,"ofxOscMessage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::getArgAsMidiMessage",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getArgAsMidiMessage",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = (std::uint32_t)((ofxOscMessage const *)arg1)->getArgAsMidiMessage(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getArgAsBool(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t arg2 ; bool result; SWIG_check_num_args("ofxOscMessage::getArgAsBool",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getArgAsBool",1,"ofxOscMessage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::getArgAsBool",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getArgAsBool",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = (bool)((ofxOscMessage const *)arg1)->getArgAsBool(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getArgAsNone(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t arg2 ; bool result; SWIG_check_num_args("ofxOscMessage::getArgAsNone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getArgAsNone",1,"ofxOscMessage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::getArgAsNone",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getArgAsNone",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = (bool)((ofxOscMessage const *)arg1)->getArgAsNone(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getArgAsTrigger(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t arg2 ; bool result; SWIG_check_num_args("ofxOscMessage::getArgAsTrigger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getArgAsTrigger",1,"ofxOscMessage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::getArgAsTrigger",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getArgAsTrigger",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = (bool)((ofxOscMessage const *)arg1)->getArgAsTrigger(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getArgAsImpulse(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t arg2 ; bool result; SWIG_check_num_args("ofxOscMessage::getArgAsImpulse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getArgAsImpulse",1,"ofxOscMessage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::getArgAsImpulse",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getArgAsImpulse",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = (bool)((ofxOscMessage const *)arg1)->getArgAsImpulse(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getArgAsInfinitum(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t arg2 ; bool result; SWIG_check_num_args("ofxOscMessage::getArgAsInfinitum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getArgAsInfinitum",1,"ofxOscMessage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::getArgAsInfinitum",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getArgAsInfinitum",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = (bool)((ofxOscMessage const *)arg1)->getArgAsInfinitum(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getArgAsTimetag(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t arg2 ; std::uint64_t result; SWIG_check_num_args("ofxOscMessage::getArgAsTimetag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getArgAsTimetag",1,"ofxOscMessage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::getArgAsTimetag",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getArgAsTimetag",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = (std::uint64_t)((ofxOscMessage const *)arg1)->getArgAsTimetag(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getArgAsBlob(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t arg2 ; ofBuffer result; SWIG_check_num_args("ofxOscMessage::getArgAsBlob",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getArgAsBlob",1,"ofxOscMessage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::getArgAsBlob",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getArgAsBlob",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = ((ofxOscMessage const *)arg1)->getArgAsBlob(arg2); { ofBuffer * resultptr = new ofBuffer((const ofBuffer &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofBuffer,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_getArgAsRgbaColor(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::size_t arg2 ; std::uint32_t result; SWIG_check_num_args("ofxOscMessage::getArgAsRgbaColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::getArgAsRgbaColor",1,"ofxOscMessage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::getArgAsRgbaColor",2,"std::size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_getArgAsRgbaColor",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::size_t)lua_tonumber(L, 2);
  result = (std::uint32_t)((ofxOscMessage const *)arg1)->getArgAsRgbaColor(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_addIntArg(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::int32_t arg2 ; SWIG_check_num_args("ofxOscMessage::addIntArg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::addIntArg",1,"ofxOscMessage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::addIntArg",2,"std::int32_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_addIntArg",1,SWIGTYPE_p_ofxOscMessage); }  arg2 = (std::int32_t)lua_tonumber(L, 2);
  (arg1)->addIntArg(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_addInt32Arg(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::int32_t arg2 ; SWIG_check_num_args("ofxOscMessage::addInt32Arg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::addInt32Arg",1,"ofxOscMessage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::addInt32Arg",2,"std::int32_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_addInt32Arg",1,SWIGTYPE_p_ofxOscMessage); }  arg2 = (std::int32_t)lua_tonumber(L, 2);
  (arg1)->addInt32Arg(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_addInt64Arg(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::int64_t arg2 ; SWIG_check_num_args("ofxOscMessage::addInt64Arg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::addInt64Arg",1,"ofxOscMessage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::addInt64Arg",2,"std::int64_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_addInt64Arg",1,SWIGTYPE_p_ofxOscMessage); }  arg2 = (std::int64_t)lua_tonumber(L, 2);
  (arg1)->addInt64Arg(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_addFloatArg(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  float arg2 ; SWIG_check_num_args("ofxOscMessage::addFloatArg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::addFloatArg",1,"ofxOscMessage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::addFloatArg",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_addFloatArg",1,SWIGTYPE_p_ofxOscMessage); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->addFloatArg(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_addDoubleArg(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  double arg2 ; SWIG_check_num_args("ofxOscMessage::addDoubleArg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::addDoubleArg",1,"ofxOscMessage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::addDoubleArg",2,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_addDoubleArg",1,SWIGTYPE_p_ofxOscMessage); }  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->addDoubleArg(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_addStringArg(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; SWIG_check_num_args("ofxOscMessage::addStringArg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::addStringArg",1,"ofxOscMessage *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxOscMessage::addStringArg",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_addStringArg",1,SWIGTYPE_p_ofxOscMessage); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; (arg1)->addStringArg((std::string const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_addSymbolArg(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; SWIG_check_num_args("ofxOscMessage::addSymbolArg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::addSymbolArg",1,"ofxOscMessage *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxOscMessage::addSymbolArg",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_addSymbolArg",1,SWIGTYPE_p_ofxOscMessage); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; (arg1)->addSymbolArg((std::string const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_addCharArg(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ; char arg2 ;
  SWIG_check_num_args("ofxOscMessage::addCharArg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::addCharArg",1,"ofxOscMessage *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ofxOscMessage::addCharArg",2,"char");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_addCharArg",1,SWIGTYPE_p_ofxOscMessage); }  arg2 = (lua_tostring(L, 2))[0];
  (arg1)->addCharArg(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_addMidiMessageArg(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::uint32_t arg2 ; SWIG_check_num_args("ofxOscMessage::addMidiMessageArg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::addMidiMessageArg",1,"ofxOscMessage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::addMidiMessageArg",2,"std::uint32_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_addMidiMessageArg",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::uint32_t)lua_tonumber(L, 2);
  (arg1)->addMidiMessageArg(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_addBoolArg(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofxOscMessage::addBoolArg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::addBoolArg",1,"ofxOscMessage *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxOscMessage::addBoolArg",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_addBoolArg",1,SWIGTYPE_p_ofxOscMessage); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->addBoolArg(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_addNoneArg(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  SWIG_check_num_args("ofxOscMessage::addNoneArg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::addNoneArg",1,"ofxOscMessage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_addNoneArg",1,SWIGTYPE_p_ofxOscMessage); }  (arg1)->addNoneArg(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_addTriggerArg(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  SWIG_check_num_args("ofxOscMessage::addTriggerArg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::addTriggerArg",1,"ofxOscMessage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_addTriggerArg",1,SWIGTYPE_p_ofxOscMessage); }  (arg1)->addTriggerArg(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_addImpulseArg(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  SWIG_check_num_args("ofxOscMessage::addImpulseArg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::addImpulseArg",1,"ofxOscMessage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_addImpulseArg",1,SWIGTYPE_p_ofxOscMessage); }  (arg1)->addImpulseArg(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_addInfinitumArg(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  SWIG_check_num_args("ofxOscMessage::addInfinitumArg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::addInfinitumArg",1,"ofxOscMessage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_addInfinitumArg",1,SWIGTYPE_p_ofxOscMessage); }  (arg1)->addInfinitumArg(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_addTimetagArg(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::uint64_t arg2 ; SWIG_check_num_args("ofxOscMessage::addTimetagArg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::addTimetagArg",1,"ofxOscMessage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::addTimetagArg",2,"std::uint64_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_addTimetagArg",1,SWIGTYPE_p_ofxOscMessage); }  arg2 = (std::uint64_t)lua_tonumber(L, 2);
  (arg1)->addTimetagArg(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_addBlobArg(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  ofBuffer *arg2 = 0 ; SWIG_check_num_args("ofxOscMessage::addBlobArg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::addBlobArg",1,"ofxOscMessage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxOscMessage::addBlobArg",2,"ofBuffer const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_addBlobArg",1,SWIGTYPE_p_ofxOscMessage); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("OscMessage_addBlobArg",2,SWIGTYPE_p_ofBuffer); }  (arg1)->addBlobArg((ofBuffer const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_addRgbaColorArg(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::uint32_t arg2 ; SWIG_check_num_args("ofxOscMessage::addRgbaColorArg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::addRgbaColorArg",1,"ofxOscMessage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscMessage::addRgbaColorArg",2,"std::uint32_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_addRgbaColorArg",1,SWIGTYPE_p_ofxOscMessage); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (std::uint32_t)lua_tonumber(L, 2);
  (arg1)->addRgbaColorArg(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscMessage_setRemoteEndpoint(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  std::string *arg2 = 0 ; int arg3 ; std::string temp2 ; SWIG_check_num_args("ofxOscMessage::setRemoteEndpoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::setRemoteEndpoint",1,"ofxOscMessage *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxOscMessage::setRemoteEndpoint",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxOscMessage::setRemoteEndpoint",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage_setRemoteEndpoint",1,SWIGTYPE_p_ofxOscMessage); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (int)lua_tonumber(L, 3);
  (arg1)->setRemoteEndpoint((std::string const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_OscMessage___tostring(lua_State* L) { int SWIG_arg = 0; ofxOscMessage *arg1 = (ofxOscMessage *) 0 ;
  char *result = 0 ; SWIG_check_num_args("ofxOscMessage::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscMessage::__str__",1,"ofxOscMessage *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscMessage___tostring",1,SWIGTYPE_p_ofxOscMessage); }  result = (char *)ofxOscMessage___str__(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_OscMessage(void *obj) {
ofxOscMessage *arg1 = (ofxOscMessage *) obj;
delete arg1;
}
static int _proxy__wrap_new_OscMessage(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OscMessage);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OscMessage_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OscMessage_methods[]= {
    { "copy", _wrap_OscMessage_copy},
    { "clear", _wrap_OscMessage_clear},
    { "setAddress", _wrap_OscMessage_setAddress},
    { "getAddress", _wrap_OscMessage_getAddress},
    { "getRemoteHost", _wrap_OscMessage_getRemoteHost},
    { "getRemotePort", _wrap_OscMessage_getRemotePort},
    { "getNumArgs", _wrap_OscMessage_getNumArgs},
    { "getArgType", _wrap_OscMessage_getArgType},
    { "getArgTypeName", _wrap_OscMessage_getArgTypeName},
    { "getTypeString", _wrap_OscMessage_getTypeString},
    { "getArgAsInt", _wrap_OscMessage_getArgAsInt},
    { "getArgAsInt32", _wrap_OscMessage_getArgAsInt32},
    { "getArgAsInt64", _wrap_OscMessage_getArgAsInt64},
    { "getArgAsFloat", _wrap_OscMessage_getArgAsFloat},
    { "getArgAsDouble", _wrap_OscMessage_getArgAsDouble},
    { "getArgAsString", _wrap_OscMessage_getArgAsString},
    { "getArgAsSymbol", _wrap_OscMessage_getArgAsSymbol},
    { "getArgAsChar", _wrap_OscMessage_getArgAsChar},
    { "getArgAsMidiMessage", _wrap_OscMessage_getArgAsMidiMessage},
    { "getArgAsBool", _wrap_OscMessage_getArgAsBool},
    { "getArgAsNone", _wrap_OscMessage_getArgAsNone},
    { "getArgAsTrigger", _wrap_OscMessage_getArgAsTrigger},
    { "getArgAsImpulse", _wrap_OscMessage_getArgAsImpulse},
    { "getArgAsInfinitum", _wrap_OscMessage_getArgAsInfinitum},
    { "getArgAsTimetag", _wrap_OscMessage_getArgAsTimetag},
    { "getArgAsBlob", _wrap_OscMessage_getArgAsBlob},
    { "getArgAsRgbaColor", _wrap_OscMessage_getArgAsRgbaColor},
    { "addIntArg", _wrap_OscMessage_addIntArg},
    { "addInt32Arg", _wrap_OscMessage_addInt32Arg},
    { "addInt64Arg", _wrap_OscMessage_addInt64Arg},
    { "addFloatArg", _wrap_OscMessage_addFloatArg},
    { "addDoubleArg", _wrap_OscMessage_addDoubleArg},
    { "addStringArg", _wrap_OscMessage_addStringArg},
    { "addSymbolArg", _wrap_OscMessage_addSymbolArg},
    { "addCharArg", _wrap_OscMessage_addCharArg},
    { "addMidiMessageArg", _wrap_OscMessage_addMidiMessageArg},
    { "addBoolArg", _wrap_OscMessage_addBoolArg},
    { "addNoneArg", _wrap_OscMessage_addNoneArg},
    { "addTriggerArg", _wrap_OscMessage_addTriggerArg},
    { "addImpulseArg", _wrap_OscMessage_addImpulseArg},
    { "addInfinitumArg", _wrap_OscMessage_addInfinitumArg},
    { "addTimetagArg", _wrap_OscMessage_addTimetagArg},
    { "addBlobArg", _wrap_OscMessage_addBlobArg},
    { "addRgbaColorArg", _wrap_OscMessage_addRgbaColorArg},
    { "setRemoteEndpoint", _wrap_OscMessage_setRemoteEndpoint},
    { "__tostring", _wrap_OscMessage___tostring},
    {0,0}
};
static swig_lua_method swig_OscMessage_meta[] = {
    { "__tostring", _wrap_OscMessage___tostring},
    {0,0}
};

static swig_lua_attribute swig_OscMessage_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OscMessage_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OscMessage_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OscMessage_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OscMessage_Sf_SwigStatic = {
    "OscMessage",
    swig_OscMessage_Sf_SwigStatic_methods,
    swig_OscMessage_Sf_SwigStatic_attributes,
    swig_OscMessage_Sf_SwigStatic_constants,
    swig_OscMessage_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OscMessage_bases[] = {0};
static const char *swig_OscMessage_base_names[] = {0};
static swig_lua_class _wrap_class_OscMessage = { "OscMessage", "OscMessage", &SWIGTYPE_p_ofxOscMessage,_proxy__wrap_new_OscMessage, swig_delete_OscMessage, swig_OscMessage_methods, swig_OscMessage_attributes, &swig_OscMessage_Sf_SwigStatic, swig_OscMessage_meta, swig_OscMessage_bases, swig_OscMessage_base_names };

static int _wrap_new_OscParameterSync(lua_State* L) { int SWIG_arg = 0; ofxOscParameterSync *result = 0 ;
  SWIG_check_num_args("ofxOscParameterSync::ofxOscParameterSync",0,0) result = (ofxOscParameterSync *)new ofxOscParameterSync();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscParameterSync,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_OscParameterSync_setup(lua_State* L) { int SWIG_arg = 0;
  ofxOscParameterSync *arg1 = (ofxOscParameterSync *) 0 ; ofParameterGroup *arg2 = 0 ; int arg3 ; std::string *arg4 = 0 ;
  int arg5 ; std::string temp4 ; SWIG_check_num_args("ofxOscParameterSync::setup",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscParameterSync::setup",1,"ofxOscParameterSync *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxOscParameterSync::setup",2,"ofParameterGroup &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxOscParameterSync::setup",3,"int");
  if(!lua_isstring(L,4)) SWIG_fail_arg("ofxOscParameterSync::setup",4,"std::string const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxOscParameterSync::setup",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscParameterSync,0))){
    SWIG_fail_ptr("OscParameterSync_setup",1,SWIGTYPE_p_ofxOscParameterSync); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofParameterGroup,0))){
    SWIG_fail_ptr("OscParameterSync_setup",2,SWIGTYPE_p_ofParameterGroup); }  arg3 = (int)lua_tonumber(L, 3);
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4; arg5 = (int)lua_tonumber(L, 5);
  (arg1)->setup(*arg2,arg3,(std::string const &)*arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_OscParameterSync_update(lua_State* L) { int SWIG_arg = 0;
  ofxOscParameterSync *arg1 = (ofxOscParameterSync *) 0 ; SWIG_check_num_args("ofxOscParameterSync::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscParameterSync::update",1,"ofxOscParameterSync *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscParameterSync,0))){
    SWIG_fail_ptr("OscParameterSync_update",1,SWIGTYPE_p_ofxOscParameterSync); }  (arg1)->update(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_OscParameterSync(void *obj) {
ofxOscParameterSync *arg1 = (ofxOscParameterSync *) obj;
delete arg1;
}
static int _proxy__wrap_new_OscParameterSync(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OscParameterSync);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OscParameterSync_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OscParameterSync_methods[]= {
    { "setup", _wrap_OscParameterSync_setup},
    { "update", _wrap_OscParameterSync_update},
    {0,0}
};
static swig_lua_method swig_OscParameterSync_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OscParameterSync_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OscParameterSync_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OscParameterSync_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OscParameterSync_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OscParameterSync_Sf_SwigStatic = {
    "OscParameterSync",
    swig_OscParameterSync_Sf_SwigStatic_methods,
    swig_OscParameterSync_Sf_SwigStatic_attributes,
    swig_OscParameterSync_Sf_SwigStatic_constants,
    swig_OscParameterSync_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OscParameterSync_bases[] = {0};
static const char *swig_OscParameterSync_base_names[] = {0};
static swig_lua_class _wrap_class_OscParameterSync = { "OscParameterSync", "OscParameterSync", &SWIGTYPE_p_ofxOscParameterSync,_proxy__wrap_new_OscParameterSync, swig_delete_OscParameterSync, swig_OscParameterSync_methods, swig_OscParameterSync_attributes, &swig_OscParameterSync_Sf_SwigStatic, swig_OscParameterSync_meta, swig_OscParameterSync_bases, swig_OscParameterSync_base_names };

static int _wrap_OscReceiverSettings_port_set(lua_State* L) { int SWIG_arg = 0;
  ofxOscReceiverSettings *arg1 = (ofxOscReceiverSettings *) 0 ; int arg2 ;
  SWIG_check_num_args("ofxOscReceiverSettings::port",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscReceiverSettings::port",1,"ofxOscReceiverSettings *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscReceiverSettings::port",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscReceiverSettings,0))){
    SWIG_fail_ptr("OscReceiverSettings_port_set",1,SWIGTYPE_p_ofxOscReceiverSettings); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->port = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscReceiverSettings_port_get(lua_State* L) { int SWIG_arg = 0;
  ofxOscReceiverSettings *arg1 = (ofxOscReceiverSettings *) 0 ; int result;
  SWIG_check_num_args("ofxOscReceiverSettings::port",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscReceiverSettings::port",1,"ofxOscReceiverSettings *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscReceiverSettings,0))){
    SWIG_fail_ptr("OscReceiverSettings_port_get",1,SWIGTYPE_p_ofxOscReceiverSettings); }  result = (int) ((arg1)->port);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscReceiverSettings_reuse_set(lua_State* L) { int SWIG_arg = 0;
  ofxOscReceiverSettings *arg1 = (ofxOscReceiverSettings *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofxOscReceiverSettings::reuse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscReceiverSettings::reuse",1,"ofxOscReceiverSettings *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxOscReceiverSettings::reuse",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscReceiverSettings,0))){
    SWIG_fail_ptr("OscReceiverSettings_reuse_set",1,SWIGTYPE_p_ofxOscReceiverSettings); }  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->reuse = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscReceiverSettings_reuse_get(lua_State* L) { int SWIG_arg = 0;
  ofxOscReceiverSettings *arg1 = (ofxOscReceiverSettings *) 0 ; bool result;
  SWIG_check_num_args("ofxOscReceiverSettings::reuse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscReceiverSettings::reuse",1,"ofxOscReceiverSettings *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscReceiverSettings,0))){
    SWIG_fail_ptr("OscReceiverSettings_reuse_get",1,SWIGTYPE_p_ofxOscReceiverSettings); }  result = (bool) ((arg1)->reuse);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscReceiverSettings_start_set(lua_State* L) { int SWIG_arg = 0;
  ofxOscReceiverSettings *arg1 = (ofxOscReceiverSettings *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofxOscReceiverSettings::start",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscReceiverSettings::start",1,"ofxOscReceiverSettings *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxOscReceiverSettings::start",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscReceiverSettings,0))){
    SWIG_fail_ptr("OscReceiverSettings_start_set",1,SWIGTYPE_p_ofxOscReceiverSettings); }  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->start = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscReceiverSettings_start_get(lua_State* L) { int SWIG_arg = 0;
  ofxOscReceiverSettings *arg1 = (ofxOscReceiverSettings *) 0 ; bool result;
  SWIG_check_num_args("ofxOscReceiverSettings::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscReceiverSettings::start",1,"ofxOscReceiverSettings *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscReceiverSettings,0))){
    SWIG_fail_ptr("OscReceiverSettings_start_get",1,SWIGTYPE_p_ofxOscReceiverSettings); }  result = (bool) ((arg1)->start);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_OscReceiverSettings(lua_State* L) { int SWIG_arg = 0; ofxOscReceiverSettings *result = 0 ;
  SWIG_check_num_args("ofxOscReceiverSettings::ofxOscReceiverSettings",0,0)
  result = (ofxOscReceiverSettings *)new ofxOscReceiverSettings();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscReceiverSettings,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_OscReceiverSettings(void *obj) {
ofxOscReceiverSettings *arg1 = (ofxOscReceiverSettings *) obj;
delete arg1;
}
static int _proxy__wrap_new_OscReceiverSettings(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OscReceiverSettings);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OscReceiverSettings_attributes[] = {
    { "port", _wrap_OscReceiverSettings_port_get, _wrap_OscReceiverSettings_port_set },
    { "reuse", _wrap_OscReceiverSettings_reuse_get, _wrap_OscReceiverSettings_reuse_set },
    { "start", _wrap_OscReceiverSettings_start_get, _wrap_OscReceiverSettings_start_set },
    {0,0,0}
};
static swig_lua_method swig_OscReceiverSettings_methods[]= {
    {0,0}
};
static swig_lua_method swig_OscReceiverSettings_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OscReceiverSettings_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OscReceiverSettings_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OscReceiverSettings_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OscReceiverSettings_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OscReceiverSettings_Sf_SwigStatic = {
    "OscReceiverSettings",
    swig_OscReceiverSettings_Sf_SwigStatic_methods,
    swig_OscReceiverSettings_Sf_SwigStatic_attributes,
    swig_OscReceiverSettings_Sf_SwigStatic_constants,
    swig_OscReceiverSettings_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OscReceiverSettings_bases[] = {0};
static const char *swig_OscReceiverSettings_base_names[] = {0};
static swig_lua_class _wrap_class_OscReceiverSettings = { "OscReceiverSettings", "OscReceiverSettings", &SWIGTYPE_p_ofxOscReceiverSettings,_proxy__wrap_new_OscReceiverSettings, swig_delete_OscReceiverSettings, swig_OscReceiverSettings_methods, swig_OscReceiverSettings_attributes, &swig_OscReceiverSettings_Sf_SwigStatic, swig_OscReceiverSettings_meta, swig_OscReceiverSettings_bases, swig_OscReceiverSettings_base_names };

static int _wrap_new_OscReceiver__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxOscReceiver *result = 0 ;
  SWIG_check_num_args("ofxOscReceiver::ofxOscReceiver",0,0) result = (ofxOscReceiver *)new ofxOscReceiver();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscReceiver,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_OscReceiver__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxOscReceiver *arg1 = 0 ;
  ofxOscReceiver *result = 0 ; SWIG_check_num_args("ofxOscReceiver::ofxOscReceiver",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxOscReceiver::ofxOscReceiver",1,"ofxOscReceiver const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscReceiver,0))){
    SWIG_fail_ptr("new_OscReceiver",1,SWIGTYPE_p_ofxOscReceiver); } 
  result = (ofxOscReceiver *)new ofxOscReceiver((ofxOscReceiver const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscReceiver,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_OscReceiver(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_OscReceiver__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxOscReceiver, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_new_OscReceiver__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OscReceiver'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxOscReceiver::ofxOscReceiver()\n" "    ofxOscReceiver::ofxOscReceiver(ofxOscReceiver const &)\n");
  lua_error(L);return 0; }
static int _wrap_OscReceiver_copy(lua_State* L) { int SWIG_arg = 0; ofxOscReceiver *arg1 = (ofxOscReceiver *) 0 ;
  ofxOscReceiver *arg2 = 0 ; ofxOscReceiver *result = 0 ; SWIG_check_num_args("ofxOscReceiver::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscReceiver::copy",1,"ofxOscReceiver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxOscReceiver::copy",2,"ofxOscReceiver const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscReceiver,0))){
    SWIG_fail_ptr("OscReceiver_copy",1,SWIGTYPE_p_ofxOscReceiver); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxOscReceiver,0))){
    SWIG_fail_ptr("OscReceiver_copy",2,SWIGTYPE_p_ofxOscReceiver); } 
  result = (ofxOscReceiver *) &(arg1)->copy((ofxOscReceiver const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscReceiver,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_OscReceiver_setup__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxOscReceiver *arg1 = (ofxOscReceiver *) 0 ;
  int arg2 ; bool result; SWIG_check_num_args("ofxOscReceiver::setup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscReceiver::setup",1,"ofxOscReceiver *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscReceiver::setup",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscReceiver,0))){
    SWIG_fail_ptr("OscReceiver_setup",1,SWIGTYPE_p_ofxOscReceiver); }  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->setup(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_OscReceiver_setup__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxOscReceiver *arg1 = (ofxOscReceiver *) 0 ;
  ofxOscReceiverSettings *arg2 = 0 ; bool result; SWIG_check_num_args("ofxOscReceiver::setup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscReceiver::setup",1,"ofxOscReceiver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxOscReceiver::setup",2,"ofxOscReceiverSettings const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscReceiver,0))){
    SWIG_fail_ptr("OscReceiver_setup",1,SWIGTYPE_p_ofxOscReceiver); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxOscReceiverSettings,0))){
    SWIG_fail_ptr("OscReceiver_setup",2,SWIGTYPE_p_ofxOscReceiverSettings); } 
  result = (bool)(arg1)->setup((ofxOscReceiverSettings const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscReceiver_setup(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxOscReceiver, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxOscReceiverSettings, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_OscReceiver_setup__SWIG_1(L);}  }  }  if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxOscReceiver, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_OscReceiver_setup__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OscReceiver_setup'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxOscReceiver::setup(int)\n" "    ofxOscReceiver::setup(ofxOscReceiverSettings const &)\n"); lua_error(L);return 0; }
static int _wrap_OscReceiver_start(lua_State* L) { int SWIG_arg = 0; ofxOscReceiver *arg1 = (ofxOscReceiver *) 0 ; bool result;
  SWIG_check_num_args("ofxOscReceiver::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscReceiver::start",1,"ofxOscReceiver *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscReceiver,0))){
    SWIG_fail_ptr("OscReceiver_start",1,SWIGTYPE_p_ofxOscReceiver); }  result = (bool)(arg1)->start();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscReceiver_stop(lua_State* L) { int SWIG_arg = 0; ofxOscReceiver *arg1 = (ofxOscReceiver *) 0 ;
  SWIG_check_num_args("ofxOscReceiver::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscReceiver::stop",1,"ofxOscReceiver *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscReceiver,0))){
    SWIG_fail_ptr("OscReceiver_stop",1,SWIGTYPE_p_ofxOscReceiver); }  (arg1)->stop(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_OscReceiver_isListening(lua_State* L) { int SWIG_arg = 0; ofxOscReceiver *arg1 = (ofxOscReceiver *) 0 ;
  bool result; SWIG_check_num_args("ofxOscReceiver::isListening",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscReceiver::isListening",1,"ofxOscReceiver const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscReceiver,0))){
    SWIG_fail_ptr("OscReceiver_isListening",1,SWIGTYPE_p_ofxOscReceiver); } 
  result = (bool)((ofxOscReceiver const *)arg1)->isListening(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscReceiver_hasWaitingMessages(lua_State* L) { int SWIG_arg = 0; ofxOscReceiver *arg1 = (ofxOscReceiver *) 0 ;
  bool result; SWIG_check_num_args("ofxOscReceiver::hasWaitingMessages",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscReceiver::hasWaitingMessages",1,"ofxOscReceiver const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscReceiver,0))){
    SWIG_fail_ptr("OscReceiver_hasWaitingMessages",1,SWIGTYPE_p_ofxOscReceiver); } 
  result = (bool)((ofxOscReceiver const *)arg1)->hasWaitingMessages(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscReceiver_getNextMessage(lua_State* L) { int SWIG_arg = 0; ofxOscReceiver *arg1 = (ofxOscReceiver *) 0 ;
  ofxOscMessage *arg2 = 0 ; bool result; SWIG_check_num_args("ofxOscReceiver::getNextMessage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscReceiver::getNextMessage",1,"ofxOscReceiver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxOscReceiver::getNextMessage",2,"ofxOscMessage &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscReceiver,0))){
    SWIG_fail_ptr("OscReceiver_getNextMessage",1,SWIGTYPE_p_ofxOscReceiver); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscReceiver_getNextMessage",2,SWIGTYPE_p_ofxOscMessage); }  result = (bool)(arg1)->getNextMessage(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscReceiver_getParameter(lua_State* L) { int SWIG_arg = 0; ofxOscReceiver *arg1 = (ofxOscReceiver *) 0 ;
  ofAbstractParameter *arg2 = 0 ; bool result; SWIG_check_num_args("ofxOscReceiver::getParameter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscReceiver::getParameter",1,"ofxOscReceiver *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxOscReceiver::getParameter",2,"ofAbstractParameter &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscReceiver,0))){
    SWIG_fail_ptr("OscReceiver_getParameter",1,SWIGTYPE_p_ofxOscReceiver); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofAbstractParameter,0))){
    SWIG_fail_ptr("OscReceiver_getParameter",2,SWIGTYPE_p_ofAbstractParameter); }  result = (bool)(arg1)->getParameter(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscReceiver_getPort(lua_State* L) { int SWIG_arg = 0; ofxOscReceiver *arg1 = (ofxOscReceiver *) 0 ; int result;
  SWIG_check_num_args("ofxOscReceiver::getPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscReceiver::getPort",1,"ofxOscReceiver const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscReceiver,0))){
    SWIG_fail_ptr("OscReceiver_getPort",1,SWIGTYPE_p_ofxOscReceiver); } 
  result = (int)((ofxOscReceiver const *)arg1)->getPort(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscReceiver_getSettings(lua_State* L) { int SWIG_arg = 0; ofxOscReceiver *arg1 = (ofxOscReceiver *) 0 ;
  ofxOscReceiverSettings *result = 0 ; SWIG_check_num_args("ofxOscReceiver::getSettings",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscReceiver::getSettings",1,"ofxOscReceiver const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscReceiver,0))){
    SWIG_fail_ptr("OscReceiver_getSettings",1,SWIGTYPE_p_ofxOscReceiver); } 
  result = (ofxOscReceiverSettings *) &((ofxOscReceiver const *)arg1)->getSettings();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscReceiverSettings,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_OscReceiver(void *obj) {
ofxOscReceiver *arg1 = (ofxOscReceiver *) obj;
delete arg1;
}
static int _proxy__wrap_new_OscReceiver(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OscReceiver);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OscReceiver_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OscReceiver_methods[]= {
    { "copy", _wrap_OscReceiver_copy},
    { "setup", _wrap_OscReceiver_setup},
    { "start", _wrap_OscReceiver_start},
    { "stop", _wrap_OscReceiver_stop},
    { "isListening", _wrap_OscReceiver_isListening},
    { "hasWaitingMessages", _wrap_OscReceiver_hasWaitingMessages},
    { "getNextMessage", _wrap_OscReceiver_getNextMessage},
    { "getParameter", _wrap_OscReceiver_getParameter},
    { "getPort", _wrap_OscReceiver_getPort},
    { "getSettings", _wrap_OscReceiver_getSettings},
    {0,0}
};
static swig_lua_method swig_OscReceiver_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OscReceiver_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OscReceiver_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OscReceiver_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OscReceiver_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OscReceiver_Sf_SwigStatic = {
    "OscReceiver",
    swig_OscReceiver_Sf_SwigStatic_methods,
    swig_OscReceiver_Sf_SwigStatic_attributes,
    swig_OscReceiver_Sf_SwigStatic_constants,
    swig_OscReceiver_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OscReceiver_bases[] = {0};
static const char *swig_OscReceiver_base_names[] = {0};
static swig_lua_class _wrap_class_OscReceiver = { "OscReceiver", "OscReceiver", &SWIGTYPE_p_ofxOscReceiver,_proxy__wrap_new_OscReceiver, swig_delete_OscReceiver, swig_OscReceiver_methods, swig_OscReceiver_attributes, &swig_OscReceiver_Sf_SwigStatic, swig_OscReceiver_meta, swig_OscReceiver_bases, swig_OscReceiver_base_names };

static int _wrap_OscSenderSettings_host_set(lua_State* L) { int SWIG_arg = 0;
  ofxOscSenderSettings *arg1 = (ofxOscSenderSettings *) 0 ; std::string *arg2 = 0 ; std::string temp2 ;
  SWIG_check_num_args("ofxOscSenderSettings::host",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscSenderSettings::host",1,"ofxOscSenderSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxOscSenderSettings::host",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscSenderSettings,0))){
    SWIG_fail_ptr("OscSenderSettings_host_set",1,SWIGTYPE_p_ofxOscSenderSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; if (arg1) (arg1)->host = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscSenderSettings_host_get(lua_State* L) { int SWIG_arg = 0;
  ofxOscSenderSettings *arg1 = (ofxOscSenderSettings *) 0 ; std::string *result = 0 ;
  SWIG_check_num_args("ofxOscSenderSettings::host",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscSenderSettings::host",1,"ofxOscSenderSettings *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscSenderSettings,0))){
    SWIG_fail_ptr("OscSenderSettings_host_get",1,SWIGTYPE_p_ofxOscSenderSettings); }  result = (std::string *) & ((arg1)->host);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_OscSenderSettings_port_set(lua_State* L) { int SWIG_arg = 0;
  ofxOscSenderSettings *arg1 = (ofxOscSenderSettings *) 0 ; int arg2 ; SWIG_check_num_args("ofxOscSenderSettings::port",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscSenderSettings::port",1,"ofxOscSenderSettings *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxOscSenderSettings::port",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscSenderSettings,0))){
    SWIG_fail_ptr("OscSenderSettings_port_set",1,SWIGTYPE_p_ofxOscSenderSettings); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->port = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscSenderSettings_port_get(lua_State* L) { int SWIG_arg = 0;
  ofxOscSenderSettings *arg1 = (ofxOscSenderSettings *) 0 ; int result; SWIG_check_num_args("ofxOscSenderSettings::port",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscSenderSettings::port",1,"ofxOscSenderSettings *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscSenderSettings,0))){
    SWIG_fail_ptr("OscSenderSettings_port_get",1,SWIGTYPE_p_ofxOscSenderSettings); }  result = (int) ((arg1)->port);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscSenderSettings_broadcast_set(lua_State* L) { int SWIG_arg = 0;
  ofxOscSenderSettings *arg1 = (ofxOscSenderSettings *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofxOscSenderSettings::broadcast",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscSenderSettings::broadcast",1,"ofxOscSenderSettings *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxOscSenderSettings::broadcast",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscSenderSettings,0))){
    SWIG_fail_ptr("OscSenderSettings_broadcast_set",1,SWIGTYPE_p_ofxOscSenderSettings); }  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->broadcast = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscSenderSettings_broadcast_get(lua_State* L) { int SWIG_arg = 0;
  ofxOscSenderSettings *arg1 = (ofxOscSenderSettings *) 0 ; bool result;
  SWIG_check_num_args("ofxOscSenderSettings::broadcast",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscSenderSettings::broadcast",1,"ofxOscSenderSettings *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscSenderSettings,0))){
    SWIG_fail_ptr("OscSenderSettings_broadcast_get",1,SWIGTYPE_p_ofxOscSenderSettings); }  result = (bool) ((arg1)->broadcast);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_OscSenderSettings(lua_State* L) { int SWIG_arg = 0; ofxOscSenderSettings *result = 0 ;
  SWIG_check_num_args("ofxOscSenderSettings::ofxOscSenderSettings",0,0)
  result = (ofxOscSenderSettings *)new ofxOscSenderSettings();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscSenderSettings,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_OscSenderSettings(void *obj) {
ofxOscSenderSettings *arg1 = (ofxOscSenderSettings *) obj;
delete arg1;
}
static int _proxy__wrap_new_OscSenderSettings(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OscSenderSettings);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OscSenderSettings_attributes[] = {
    { "host", _wrap_OscSenderSettings_host_get, _wrap_OscSenderSettings_host_set },
    { "port", _wrap_OscSenderSettings_port_get, _wrap_OscSenderSettings_port_set },
    { "broadcast", _wrap_OscSenderSettings_broadcast_get, _wrap_OscSenderSettings_broadcast_set },
    {0,0,0}
};
static swig_lua_method swig_OscSenderSettings_methods[]= {
    {0,0}
};
static swig_lua_method swig_OscSenderSettings_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OscSenderSettings_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OscSenderSettings_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OscSenderSettings_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OscSenderSettings_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OscSenderSettings_Sf_SwigStatic = {
    "OscSenderSettings",
    swig_OscSenderSettings_Sf_SwigStatic_methods,
    swig_OscSenderSettings_Sf_SwigStatic_attributes,
    swig_OscSenderSettings_Sf_SwigStatic_constants,
    swig_OscSenderSettings_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OscSenderSettings_bases[] = {0};
static const char *swig_OscSenderSettings_base_names[] = {0};
static swig_lua_class _wrap_class_OscSenderSettings = { "OscSenderSettings", "OscSenderSettings", &SWIGTYPE_p_ofxOscSenderSettings,_proxy__wrap_new_OscSenderSettings, swig_delete_OscSenderSettings, swig_OscSenderSettings_methods, swig_OscSenderSettings_attributes, &swig_OscSenderSettings_Sf_SwigStatic, swig_OscSenderSettings_meta, swig_OscSenderSettings_bases, swig_OscSenderSettings_base_names };

static int _wrap_new_OscSender__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxOscSender *result = 0 ;
  SWIG_check_num_args("ofxOscSender::ofxOscSender",0,0) result = (ofxOscSender *)new ofxOscSender();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscSender,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_OscSender__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxOscSender *arg1 = 0 ; ofxOscSender *result = 0 ;
  SWIG_check_num_args("ofxOscSender::ofxOscSender",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofxOscSender::ofxOscSender",1,"ofxOscSender const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscSender,0))){
    SWIG_fail_ptr("new_OscSender",1,SWIGTYPE_p_ofxOscSender); } 
  result = (ofxOscSender *)new ofxOscSender((ofxOscSender const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscSender,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_OscSender(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_OscSender__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxOscSender, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_new_OscSender__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OscSender'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxOscSender::ofxOscSender()\n" "    ofxOscSender::ofxOscSender(ofxOscSender const &)\n"); lua_error(L);return 0; }
static int _wrap_OscSender_copy(lua_State* L) { int SWIG_arg = 0; ofxOscSender *arg1 = (ofxOscSender *) 0 ;
  ofxOscSender *arg2 = 0 ; ofxOscSender *result = 0 ; SWIG_check_num_args("ofxOscSender::copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscSender::copy",1,"ofxOscSender *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxOscSender::copy",2,"ofxOscSender const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscSender,0))){
    SWIG_fail_ptr("OscSender_copy",1,SWIGTYPE_p_ofxOscSender); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxOscSender,0))){
    SWIG_fail_ptr("OscSender_copy",2,SWIGTYPE_p_ofxOscSender); } 
  result = (ofxOscSender *) &(arg1)->copy((ofxOscSender const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscSender,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_OscSender_setup__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxOscSender *arg1 = (ofxOscSender *) 0 ;
  std::string *arg2 = 0 ; int arg3 ; std::string temp2 ; bool result; SWIG_check_num_args("ofxOscSender::setup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscSender::setup",1,"ofxOscSender *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxOscSender::setup",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxOscSender::setup",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscSender,0))){
    SWIG_fail_ptr("OscSender_setup",1,SWIGTYPE_p_ofxOscSender); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3); result = (bool)(arg1)->setup((std::string const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscSender_setup__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxOscSender *arg1 = (ofxOscSender *) 0 ;
  ofxOscSenderSettings *arg2 = 0 ; bool result; SWIG_check_num_args("ofxOscSender::setup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscSender::setup",1,"ofxOscSender *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxOscSender::setup",2,"ofxOscSenderSettings const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscSender,0))){
    SWIG_fail_ptr("OscSender_setup",1,SWIGTYPE_p_ofxOscSender); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxOscSenderSettings,0))){
    SWIG_fail_ptr("OscSender_setup",2,SWIGTYPE_p_ofxOscSenderSettings); } 
  result = (bool)(arg1)->setup((ofxOscSenderSettings const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscSender_setup(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxOscSender, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxOscSenderSettings, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_OscSender_setup__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxOscSender, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_OscSender_setup__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OscSender_setup'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxOscSender::setup(std::string const &,int)\n" "    ofxOscSender::setup(ofxOscSenderSettings const &)\n");
  lua_error(L);return 0; }
static int _wrap_OscSender_clear(lua_State* L) { int SWIG_arg = 0; ofxOscSender *arg1 = (ofxOscSender *) 0 ;
  SWIG_check_num_args("ofxOscSender::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscSender::clear",1,"ofxOscSender *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscSender,0))){
    SWIG_fail_ptr("OscSender_clear",1,SWIGTYPE_p_ofxOscSender); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_OscSender_sendMessage__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxOscSender *arg1 = (ofxOscSender *) 0 ;
  ofxOscMessage *arg2 = 0 ; bool arg3 ; SWIG_check_num_args("ofxOscSender::sendMessage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscSender::sendMessage",1,"ofxOscSender *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxOscSender::sendMessage",2,"ofxOscMessage const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofxOscSender::sendMessage",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscSender,0))){
    SWIG_fail_ptr("OscSender_sendMessage",1,SWIGTYPE_p_ofxOscSender); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscSender_sendMessage",2,SWIGTYPE_p_ofxOscMessage); }  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->sendMessage((ofxOscMessage const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_OscSender_sendMessage__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxOscSender *arg1 = (ofxOscSender *) 0 ;
  ofxOscMessage *arg2 = 0 ; SWIG_check_num_args("ofxOscSender::sendMessage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscSender::sendMessage",1,"ofxOscSender *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxOscSender::sendMessage",2,"ofxOscMessage const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscSender,0))){
    SWIG_fail_ptr("OscSender_sendMessage",1,SWIGTYPE_p_ofxOscSender); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxOscMessage,0))){
    SWIG_fail_ptr("OscSender_sendMessage",2,SWIGTYPE_p_ofxOscMessage); }  (arg1)->sendMessage((ofxOscMessage const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscSender_sendMessage(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxOscSender, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxOscMessage, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_OscSender_sendMessage__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxOscSender, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofxOscMessage, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_OscSender_sendMessage__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'OscSender_sendMessage'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxOscSender::sendMessage(ofxOscMessage const &,bool)\n"
  "    ofxOscSender::sendMessage(ofxOscMessage const &)\n"); lua_error(L);return 0; }
static int _wrap_OscSender_sendBundle(lua_State* L) { int SWIG_arg = 0; ofxOscSender *arg1 = (ofxOscSender *) 0 ;
  ofxOscBundle *arg2 = 0 ; SWIG_check_num_args("ofxOscSender::sendBundle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscSender::sendBundle",1,"ofxOscSender *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxOscSender::sendBundle",2,"ofxOscBundle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscSender,0))){
    SWIG_fail_ptr("OscSender_sendBundle",1,SWIGTYPE_p_ofxOscSender); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofxOscBundle,0))){
    SWIG_fail_ptr("OscSender_sendBundle",2,SWIGTYPE_p_ofxOscBundle); }  (arg1)->sendBundle((ofxOscBundle const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscSender_sendParameter(lua_State* L) { int SWIG_arg = 0; ofxOscSender *arg1 = (ofxOscSender *) 0 ;
  ofAbstractParameter *arg2 = 0 ; SWIG_check_num_args("ofxOscSender::sendParameter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscSender::sendParameter",1,"ofxOscSender *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxOscSender::sendParameter",2,"ofAbstractParameter const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscSender,0))){
    SWIG_fail_ptr("OscSender_sendParameter",1,SWIGTYPE_p_ofxOscSender); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofAbstractParameter,0))){
    SWIG_fail_ptr("OscSender_sendParameter",2,SWIGTYPE_p_ofAbstractParameter); } 
  (arg1)->sendParameter((ofAbstractParameter const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_OscSender_getHost(lua_State* L) { int SWIG_arg = 0; ofxOscSender *arg1 = (ofxOscSender *) 0 ;
  std::string result; SWIG_check_num_args("ofxOscSender::getHost",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscSender::getHost",1,"ofxOscSender const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscSender,0))){
    SWIG_fail_ptr("OscSender_getHost",1,SWIGTYPE_p_ofxOscSender); }  result = ((ofxOscSender const *)arg1)->getHost();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_OscSender_getPort(lua_State* L) { int SWIG_arg = 0; ofxOscSender *arg1 = (ofxOscSender *) 0 ; int result;
  SWIG_check_num_args("ofxOscSender::getPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscSender::getPort",1,"ofxOscSender const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscSender,0))){
    SWIG_fail_ptr("OscSender_getPort",1,SWIGTYPE_p_ofxOscSender); }  result = (int)((ofxOscSender const *)arg1)->getPort();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_OscSender_getSettings(lua_State* L) { int SWIG_arg = 0; ofxOscSender *arg1 = (ofxOscSender *) 0 ;
  ofxOscSenderSettings *result = 0 ; SWIG_check_num_args("ofxOscSender::getSettings",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxOscSender::getSettings",1,"ofxOscSender const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxOscSender,0))){
    SWIG_fail_ptr("OscSender_getSettings",1,SWIGTYPE_p_ofxOscSender); } 
  result = (ofxOscSenderSettings *) &((ofxOscSender const *)arg1)->getSettings();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxOscSenderSettings,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_OscSender(void *obj) {
ofxOscSender *arg1 = (ofxOscSender *) obj;
delete arg1;
}
static int _proxy__wrap_new_OscSender(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OscSender);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OscSender_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OscSender_methods[]= {
    { "copy", _wrap_OscSender_copy},
    { "setup", _wrap_OscSender_setup},
    { "clear", _wrap_OscSender_clear},
    { "sendMessage", _wrap_OscSender_sendMessage},
    { "sendBundle", _wrap_OscSender_sendBundle},
    { "sendParameter", _wrap_OscSender_sendParameter},
    { "getHost", _wrap_OscSender_getHost},
    { "getPort", _wrap_OscSender_getPort},
    { "getSettings", _wrap_OscSender_getSettings},
    {0,0}
};
static swig_lua_method swig_OscSender_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OscSender_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OscSender_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OscSender_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OscSender_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OscSender_Sf_SwigStatic = {
    "OscSender",
    swig_OscSender_Sf_SwigStatic_methods,
    swig_OscSender_Sf_SwigStatic_attributes,
    swig_OscSender_Sf_SwigStatic_constants,
    swig_OscSender_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OscSender_bases[] = {0};
static const char *swig_OscSender_base_names[] = {0};
static swig_lua_class _wrap_class_OscSender = { "OscSender", "OscSender", &SWIGTYPE_p_ofxOscSender,_proxy__wrap_new_OscSender, swig_delete_OscSender, swig_OscSender_methods, swig_OscSender_attributes, &swig_OscSender_Sf_SwigStatic, swig_OscSender_meta, swig_OscSender_bases, swig_OscSender_base_names };

static int _wrap_SVG_getWidth(lua_State* L) { int SWIG_arg = 0; ofxSVG *arg1 = (ofxSVG *) 0 ; float result;
  SWIG_check_num_args("ofxSVG::getWidth",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxSVG::getWidth",1,"ofxSVG const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxSVG,0))){ SWIG_fail_ptr("SVG_getWidth",1,SWIGTYPE_p_ofxSVG); } 
  result = (float)((ofxSVG const *)arg1)->getWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SVG_getHeight(lua_State* L) { int SWIG_arg = 0; ofxSVG *arg1 = (ofxSVG *) 0 ; float result;
  SWIG_check_num_args("ofxSVG::getHeight",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxSVG::getHeight",1,"ofxSVG const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxSVG,0))){ SWIG_fail_ptr("SVG_getHeight",1,SWIGTYPE_p_ofxSVG); }
   result = (float)((ofxSVG const *)arg1)->getHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SVG_load(lua_State* L) { int SWIG_arg = 0; ofxSVG *arg1 = (ofxSVG *) 0 ; std::string arg2 ;
  SWIG_check_num_args("ofxSVG::load",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxSVG::load",1,"ofxSVG *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxSVG::load",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxSVG,0))){ SWIG_fail_ptr("SVG_load",1,SWIGTYPE_p_ofxSVG); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->load(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_SVG_draw(lua_State* L) { int SWIG_arg = 0; ofxSVG *arg1 = (ofxSVG *) 0 ;
  SWIG_check_num_args("ofxSVG::draw",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxSVG::draw",1,"ofxSVG *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxSVG,0))){ SWIG_fail_ptr("SVG_draw",1,SWIGTYPE_p_ofxSVG); } 
  (arg1)->draw(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SVG_getNumPath(lua_State* L) { int SWIG_arg = 0; ofxSVG *arg1 = (ofxSVG *) 0 ; int result;
  SWIG_check_num_args("ofxSVG::getNumPath",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxSVG::getNumPath",1,"ofxSVG *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxSVG,0))){ SWIG_fail_ptr("SVG_getNumPath",1,SWIGTYPE_p_ofxSVG); }
   result = (int)(arg1)->getNumPath(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_SVG_getPathAt(lua_State* L) { int SWIG_arg = 0; ofxSVG *arg1 = (ofxSVG *) 0 ; int arg2 ; ofPath *result = 0 ;
  SWIG_check_num_args("ofxSVG::getPathAt",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxSVG::getPathAt",1,"ofxSVG *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxSVG::getPathAt",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxSVG,0))){ SWIG_fail_ptr("SVG_getPathAt",1,SWIGTYPE_p_ofxSVG); }
   arg2 = (int)lua_tonumber(L, 2); result = (ofPath *) &(arg1)->getPathAt(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPath,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_SVG_getPaths(lua_State* L) { int SWIG_arg = 0; ofxSVG *arg1 = (ofxSVG *) 0 ;
  std::vector< ofPath > *result = 0 ; SWIG_check_num_args("ofxSVG::getPaths",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxSVG::getPaths",1,"ofxSVG const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxSVG,0))){ SWIG_fail_ptr("SVG_getPaths",1,SWIGTYPE_p_ofxSVG); } 
  result = (std::vector< ofPath > *) &((ofxSVG const *)arg1)->getPaths();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofPath_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_SVG(lua_State* L) { int SWIG_arg = 0; ofxSVG *result = 0 ; SWIG_check_num_args("ofxSVG::ofxSVG",0,0)
  result = (ofxSVG *)new ofxSVG(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxSVG,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_SVG(void *obj) {
ofxSVG *arg1 = (ofxSVG *) obj;
delete arg1;
}
static int _proxy__wrap_new_SVG(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SVG);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SVG_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SVG_methods[]= {
    { "getWidth", _wrap_SVG_getWidth},
    { "getHeight", _wrap_SVG_getHeight},
    { "load", _wrap_SVG_load},
    { "draw", _wrap_SVG_draw},
    { "getNumPath", _wrap_SVG_getNumPath},
    { "getPathAt", _wrap_SVG_getPathAt},
    { "getPaths", _wrap_SVG_getPaths},
    {0,0}
};
static swig_lua_method swig_SVG_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SVG_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SVG_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SVG_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SVG_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SVG_Sf_SwigStatic = {
    "SVG",
    swig_SVG_Sf_SwigStatic_methods,
    swig_SVG_Sf_SwigStatic_attributes,
    swig_SVG_Sf_SwigStatic_constants,
    swig_SVG_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SVG_bases[] = {0};
static const char *swig_SVG_base_names[] = {0};
static swig_lua_class _wrap_class_SVG = { "SVG", "SVG", &SWIGTYPE_p_ofxSVG,_proxy__wrap_new_SVG, swig_delete_SVG, swig_SVG_methods, swig_SVG_attributes, &swig_SVG_Sf_SwigStatic, swig_SVG_meta, swig_SVG_bases, swig_SVG_base_names };

static int _wrap_new_VectorGraphics(lua_State* L) { int SWIG_arg = 0; ofxVectorGraphics *result = 0 ;
  SWIG_check_num_args("ofxVectorGraphics::ofxVectorGraphics",0,0) result = (ofxVectorGraphics *)new ofxVectorGraphics();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxVectorGraphics,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_beginEPS__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; string arg2 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ;
  SWIG_check_num_args("ofxVectorGraphics::beginEPS",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",1,"ofxVectorGraphics *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",2,"string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_beginEPS",1,SWIGTYPE_p_ofxVectorGraphics); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6); (arg1)->beginEPS(arg2,arg3,arg4,arg5,arg6); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_beginEPS__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; string arg2 ; int arg3 ; int arg4 ; int arg5 ;
  SWIG_check_num_args("ofxVectorGraphics::beginEPS",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",1,"ofxVectorGraphics *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",2,"string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_beginEPS",1,SWIGTYPE_p_ofxVectorGraphics); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); (arg1)->beginEPS(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_VectorGraphics_beginEPS__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; string arg2 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofxVectorGraphics::beginEPS",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",1,"ofxVectorGraphics *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",2,"string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_beginEPS",1,SWIGTYPE_p_ofxVectorGraphics); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  (arg1)->beginEPS(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_beginEPS__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; string arg2 ; int arg3 ;
  SWIG_check_num_args("ofxVectorGraphics::beginEPS",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",1,"ofxVectorGraphics *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",2,"string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_beginEPS",1,SWIGTYPE_p_ofxVectorGraphics); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (int)lua_tonumber(L, 3); (arg1)->beginEPS(arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_beginEPS__SWIG_4(lua_State* L) { int SWIG_arg = 0;
  ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; string arg2 ; SWIG_check_num_args("ofxVectorGraphics::beginEPS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",1,"ofxVectorGraphics *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxVectorGraphics::beginEPS",2,"string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_beginEPS",1,SWIGTYPE_p_ofxVectorGraphics); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->beginEPS(arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_beginEPS(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVectorGraphics, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_VectorGraphics_beginEPS__SWIG_4(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVectorGraphics, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_VectorGraphics_beginEPS__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVectorGraphics, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_VectorGraphics_beginEPS__SWIG_2(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVectorGraphics, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_VectorGraphics_beginEPS__SWIG_1(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVectorGraphics, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_VectorGraphics_beginEPS__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VectorGraphics_beginEPS'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxVectorGraphics::beginEPS(string,int,int,int,int)\n"
  "    ofxVectorGraphics::beginEPS(string,int,int,int)\n" "    ofxVectorGraphics::beginEPS(string,int,int)\n"
  "    ofxVectorGraphics::beginEPS(string,int)\n" "    ofxVectorGraphics::beginEPS(string)\n"); lua_error(L);return 0; }
static int _wrap_VectorGraphics_endEPS(lua_State* L) { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
  SWIG_check_num_args("ofxVectorGraphics::endEPS",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::endEPS",1,"ofxVectorGraphics *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_endEPS",1,SWIGTYPE_p_ofxVectorGraphics); }  (arg1)->endEPS(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_enableDraw(lua_State* L) { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
  SWIG_check_num_args("ofxVectorGraphics::enableDraw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::enableDraw",1,"ofxVectorGraphics *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_enableDraw",1,SWIGTYPE_p_ofxVectorGraphics); }  (arg1)->enableDraw(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_disableDraw(lua_State* L) { int SWIG_arg = 0;
  ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; SWIG_check_num_args("ofxVectorGraphics::disableDraw",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::disableDraw",1,"ofxVectorGraphics *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_disableDraw",1,SWIGTYPE_p_ofxVectorGraphics); }  (arg1)->disableDraw(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_enableCenterRect(lua_State* L) { int SWIG_arg = 0;
  ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; SWIG_check_num_args("ofxVectorGraphics::enableCenterRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::enableCenterRect",1,"ofxVectorGraphics *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_enableCenterRect",1,SWIGTYPE_p_ofxVectorGraphics); }  (arg1)->enableCenterRect();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_disableCenterRect(lua_State* L) { int SWIG_arg = 0;
  ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; SWIG_check_num_args("ofxVectorGraphics::disableCenterRect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::disableCenterRect",1,"ofxVectorGraphics *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_disableCenterRect",1,SWIGTYPE_p_ofxVectorGraphics); }  (arg1)->disableCenterRect();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_fill(lua_State* L) { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
  SWIG_check_num_args("ofxVectorGraphics::fill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::fill",1,"ofxVectorGraphics *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_fill",1,SWIGTYPE_p_ofxVectorGraphics); }  (arg1)->fill(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_noFill(lua_State* L) { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
  SWIG_check_num_args("ofxVectorGraphics::noFill",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::noFill",1,"ofxVectorGraphics *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_noFill",1,SWIGTYPE_p_ofxVectorGraphics); }  (arg1)->noFill(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_setLineWidth(lua_State* L) { int SWIG_arg = 0;
  ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; float arg2 ; SWIG_check_num_args("ofxVectorGraphics::setLineWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::setLineWidth",1,"ofxVectorGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::setLineWidth",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_setLineWidth",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setLineWidth(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_setColor__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; int arg2 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofxVectorGraphics::setColor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::setColor",1,"ofxVectorGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::setColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::setColor",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::setColor",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_setColor",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); (arg1)->setColor(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_setColor__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; int arg2 ; SWIG_check_num_args("ofxVectorGraphics::setColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::setColor",1,"ofxVectorGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::setColor",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_setColor",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setColor(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_setColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVectorGraphics, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_VectorGraphics_setColor__SWIG_1(L);}  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVectorGraphics, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_VectorGraphics_setColor__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VectorGraphics_setColor'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxVectorGraphics::setColor(int,int,int)\n"
  "    ofxVectorGraphics::setColor(int)\n"); lua_error(L);return 0; }
static int _wrap_VectorGraphics_changeColor(lua_State* L) { int SWIG_arg = 0;
  ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofxVectorGraphics::changeColor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::changeColor",1,"ofxVectorGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::changeColor",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::changeColor",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::changeColor",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_changeColor",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->changeColor(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_rect(lua_State* L) { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofxVectorGraphics::rect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::rect",1,"ofxVectorGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::rect",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::rect",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::rect",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::rect",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_rect",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->rect(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_triangle(lua_State* L) { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ;
  SWIG_check_num_args("ofxVectorGraphics::triangle",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::triangle",1,"ofxVectorGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::triangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::triangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::triangle",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::triangle",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxVectorGraphics::triangle",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofxVectorGraphics::triangle",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_triangle",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); (arg1)->triangle(arg2,arg3,arg4,arg5,arg6,arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_circle(lua_State* L) { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofxVectorGraphics::circle",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::circle",1,"ofxVectorGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::circle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::circle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::circle",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_circle",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->circle(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_ellipse(lua_State* L) { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofxVectorGraphics::ellipse",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::ellipse",1,"ofxVectorGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::ellipse",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::ellipse",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::ellipse",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::ellipse",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_ellipse",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->ellipse(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_line(lua_State* L) { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofxVectorGraphics::line",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::line",1,"ofxVectorGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::line",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::line",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::line",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::line",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_line",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->line(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_arc(lua_State* L) { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofxVectorGraphics::arc",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::arc",1,"ofxVectorGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::arc",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxVectorGraphics::arc",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_arc",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); (arg1)->arc(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_VectorGraphics_bezier(lua_State* L) { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ;
  SWIG_check_num_args("ofxVectorGraphics::bezier",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::bezier",1,"ofxVectorGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::bezier",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::bezier",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::bezier",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::bezier",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxVectorGraphics::bezier",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofxVectorGraphics::bezier",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofxVectorGraphics::bezier",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofxVectorGraphics::bezier",9,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_bezier",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); (arg1)->bezier(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_curve(lua_State* L) { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ;
  SWIG_check_num_args("ofxVectorGraphics::curve",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::curve",1,"ofxVectorGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::curve",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::curve",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::curve",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::curve",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxVectorGraphics::curve",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofxVectorGraphics::curve",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofxVectorGraphics::curve",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofxVectorGraphics::curve",9,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_curve",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); (arg1)->curve(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_beginShape(lua_State* L) { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
  SWIG_check_num_args("ofxVectorGraphics::beginShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::beginShape",1,"ofxVectorGraphics *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_beginShape",1,SWIGTYPE_p_ofxVectorGraphics); }  (arg1)->beginShape(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_polyVertex(lua_State* L) { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofxVectorGraphics::polyVertex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::polyVertex",1,"ofxVectorGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::polyVertex",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::polyVertex",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_polyVertex",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->polyVertex(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_VectorGraphics_bezierVertex(lua_State* L) { int SWIG_arg = 0;
  ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ;
  float arg7 ; SWIG_check_num_args("ofxVectorGraphics::bezierVertex",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::bezierVertex",1,"ofxVectorGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::bezierVertex",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::bezierVertex",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxVectorGraphics::bezierVertex",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxVectorGraphics::bezierVertex",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofxVectorGraphics::bezierVertex",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofxVectorGraphics::bezierVertex",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_bezierVertex",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); (arg1)->bezierVertex(arg2,arg3,arg4,arg5,arg6,arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_curveVertex(lua_State* L) { int SWIG_arg = 0;
  ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofxVectorGraphics::curveVertex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::curveVertex",1,"ofxVectorGraphics *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofxVectorGraphics::curveVertex",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxVectorGraphics::curveVertex",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_curveVertex",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->curveVertex(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_VectorGraphics_endShape__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; bool arg2 ; SWIG_check_num_args("ofxVectorGraphics::endShape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::endShape",1,"ofxVectorGraphics *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxVectorGraphics::endShape",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_endShape",1,SWIGTYPE_p_ofxVectorGraphics); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->endShape(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_endShape__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ; SWIG_check_num_args("ofxVectorGraphics::endShape",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::endShape",1,"ofxVectorGraphics *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_endShape",1,SWIGTYPE_p_ofxVectorGraphics); }  (arg1)->endShape(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_endShape(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVectorGraphics, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_VectorGraphics_endShape__SWIG_1(L);}  }  if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxVectorGraphics, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_VectorGraphics_endShape__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VectorGraphics_endShape'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxVectorGraphics::endShape(bool)\n" "    ofxVectorGraphics::endShape()\n");
  lua_error(L);return 0; }
static int _wrap_VectorGraphics_creeps_set(lua_State* L) { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
  CreEPS arg2 ; CreEPS *argp2 ; SWIG_check_num_args("ofxVectorGraphics::creeps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::creeps",1,"ofxVectorGraphics *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxVectorGraphics::creeps",2,"CreEPS");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_creeps_set",1,SWIGTYPE_p_ofxVectorGraphics); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_CreEPS,0))){
    SWIG_fail_ptr("VectorGraphics_creeps_set",2,SWIGTYPE_p_CreEPS); }  arg2 = *argp2; if (arg1) (arg1)->creeps = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VectorGraphics_creeps_get(lua_State* L) { int SWIG_arg = 0; ofxVectorGraphics *arg1 = (ofxVectorGraphics *) 0 ;
  CreEPS result; SWIG_check_num_args("ofxVectorGraphics::creeps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxVectorGraphics::creeps",1,"ofxVectorGraphics *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxVectorGraphics,0))){
    SWIG_fail_ptr("VectorGraphics_creeps_get",1,SWIGTYPE_p_ofxVectorGraphics); }  result =  ((arg1)->creeps); {
    CreEPS * resultptr = new CreEPS((const CreEPS &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_CreEPS,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_VectorGraphics(void *obj) {
ofxVectorGraphics *arg1 = (ofxVectorGraphics *) obj;
delete arg1;
}
static int _proxy__wrap_new_VectorGraphics(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VectorGraphics);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VectorGraphics_attributes[] = {
    { "creeps", _wrap_VectorGraphics_creeps_get, _wrap_VectorGraphics_creeps_set },
    {0,0,0}
};
static swig_lua_method swig_VectorGraphics_methods[]= {
    { "beginEPS", _wrap_VectorGraphics_beginEPS},
    { "endEPS", _wrap_VectorGraphics_endEPS},
    { "enableDraw", _wrap_VectorGraphics_enableDraw},
    { "disableDraw", _wrap_VectorGraphics_disableDraw},
    { "enableCenterRect", _wrap_VectorGraphics_enableCenterRect},
    { "disableCenterRect", _wrap_VectorGraphics_disableCenterRect},
    { "fill", _wrap_VectorGraphics_fill},
    { "noFill", _wrap_VectorGraphics_noFill},
    { "setLineWidth", _wrap_VectorGraphics_setLineWidth},
    { "setColor", _wrap_VectorGraphics_setColor},
    { "changeColor", _wrap_VectorGraphics_changeColor},
    { "rect", _wrap_VectorGraphics_rect},
    { "triangle", _wrap_VectorGraphics_triangle},
    { "circle", _wrap_VectorGraphics_circle},
    { "ellipse", _wrap_VectorGraphics_ellipse},
    { "line", _wrap_VectorGraphics_line},
    { "arc", _wrap_VectorGraphics_arc},
    { "bezier", _wrap_VectorGraphics_bezier},
    { "curve", _wrap_VectorGraphics_curve},
    { "beginShape", _wrap_VectorGraphics_beginShape},
    { "polyVertex", _wrap_VectorGraphics_polyVertex},
    { "bezierVertex", _wrap_VectorGraphics_bezierVertex},
    { "curveVertex", _wrap_VectorGraphics_curveVertex},
    { "endShape", _wrap_VectorGraphics_endShape},
    {0,0}
};
static swig_lua_method swig_VectorGraphics_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VectorGraphics_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VectorGraphics_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VectorGraphics_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VectorGraphics_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VectorGraphics_Sf_SwigStatic = {
    "VectorGraphics",
    swig_VectorGraphics_Sf_SwigStatic_methods,
    swig_VectorGraphics_Sf_SwigStatic_attributes,
    swig_VectorGraphics_Sf_SwigStatic_constants,
    swig_VectorGraphics_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VectorGraphics_bases[] = {0};
static const char *swig_VectorGraphics_base_names[] = {0};
static swig_lua_class _wrap_class_VectorGraphics = { "VectorGraphics", "VectorGraphics", &SWIGTYPE_p_ofxVectorGraphics,_proxy__wrap_new_VectorGraphics, swig_delete_VectorGraphics, swig_VectorGraphics_methods, swig_VectorGraphics_attributes, &swig_VectorGraphics_Sf_SwigStatic, swig_VectorGraphics_meta, swig_VectorGraphics_bases, swig_VectorGraphics_base_names };

static int _wrap_new_XmlSettings__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *result = 0 ;
  SWIG_check_num_args("ofxXmlSettings::ofxXmlSettings",0,0) result = (ofxXmlSettings *)new ofxXmlSettings();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxXmlSettings,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_XmlSettings__SWIG_1(lua_State* L) { int SWIG_arg = 0; string *arg1 = 0 ; string temp1 ;
  ofxXmlSettings *result = 0 ; SWIG_check_num_args("ofxXmlSettings::ofxXmlSettings",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofxXmlSettings::ofxXmlSettings",1,"string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (ofxXmlSettings *)new ofxXmlSettings((string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofxXmlSettings,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_XmlSettings(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_XmlSettings__SWIG_0(L);}  if (argc == 1) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) {
      return _wrap_new_XmlSettings__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_XmlSettings'\n" "  Possible C/C++ prototypes are:\n"
  "    ofxXmlSettings::ofxXmlSettings()\n" "    ofxXmlSettings::ofxXmlSettings(string const &)\n"); lua_error(L);return 0; }
static int _wrap_XmlSettings_setVerbose(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  bool arg2 ; SWIG_check_num_args("ofxXmlSettings::setVerbose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::setVerbose",1,"ofxXmlSettings *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxXmlSettings::setVerbose",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_setVerbose",1,SWIGTYPE_p_ofxXmlSettings); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setVerbose(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_loadFile(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; string temp2 ; bool result; SWIG_check_num_args("ofxXmlSettings::loadFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::loadFile",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::loadFile",2,"string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_loadFile",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; result = (bool)(arg1)->loadFile((string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_saveFile__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; string temp2 ; bool result; SWIG_check_num_args("ofxXmlSettings::saveFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::saveFile",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::saveFile",2,"string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_saveFile",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; result = (bool)(arg1)->saveFile((string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_saveFile__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  bool result; SWIG_check_num_args("ofxXmlSettings::saveFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::saveFile",1,"ofxXmlSettings *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_saveFile",1,SWIGTYPE_p_ofxXmlSettings); }  result = (bool)(arg1)->saveFile();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_saveFile(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_XmlSettings_saveFile__SWIG_1(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_XmlSettings_saveFile__SWIG_0(L);}
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'XmlSettings_saveFile'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxXmlSettings::saveFile(string const &)\n" "    ofxXmlSettings::saveFile()\n");
  lua_error(L);return 0; }
static int _wrap_XmlSettings_load(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; string temp2 ; bool result; SWIG_check_num_args("ofxXmlSettings::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::load",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::load",2,"string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_load",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; result = (bool)(arg1)->load((string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_save(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; string temp2 ; bool result; SWIG_check_num_args("ofxXmlSettings::save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::save",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::save",2,"string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_save",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; result = (bool)(arg1)->save((string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_clearTagContents__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ; string *arg2 = 0 ; int arg3 ; string temp2 ;
  SWIG_check_num_args("ofxXmlSettings::clearTagContents",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::clearTagContents",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::clearTagContents",2,"string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxXmlSettings::clearTagContents",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_clearTagContents",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (int)lua_tonumber(L, 3);
  (arg1)->clearTagContents((string const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_clearTagContents__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ; string *arg2 = 0 ; string temp2 ;
  SWIG_check_num_args("ofxXmlSettings::clearTagContents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::clearTagContents",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::clearTagContents",2,"string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_clearTagContents",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; (arg1)->clearTagContents((string const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_clearTagContents(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_XmlSettings_clearTagContents__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_XmlSettings_clearTagContents__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'XmlSettings_clearTagContents'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxXmlSettings::clearTagContents(string const &,int)\n"
  "    ofxXmlSettings::clearTagContents(string const &)\n"); lua_error(L);return 0; }
static int _wrap_XmlSettings_removeTag__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; int arg3 ; string temp2 ; SWIG_check_num_args("ofxXmlSettings::removeTag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::removeTag",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::removeTag",2,"string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxXmlSettings::removeTag",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_removeTag",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (int)lua_tonumber(L, 3);
  (arg1)->removeTag((string const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_removeTag__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; string temp2 ; SWIG_check_num_args("ofxXmlSettings::removeTag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::removeTag",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::removeTag",2,"string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_removeTag",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; (arg1)->removeTag((string const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_removeTag(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_XmlSettings_removeTag__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_XmlSettings_removeTag__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'XmlSettings_removeTag'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxXmlSettings::removeTag(string const &,int)\n"
  "    ofxXmlSettings::removeTag(string const &)\n"); lua_error(L);return 0; }
static int _wrap_XmlSettings_tagExists__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; int arg3 ; string temp2 ; bool result; SWIG_check_num_args("ofxXmlSettings::tagExists",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::tagExists",1,"ofxXmlSettings const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::tagExists",2,"string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxXmlSettings::tagExists",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_tagExists",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (int)lua_tonumber(L, 3);
  result = (bool)((ofxXmlSettings const *)arg1)->tagExists((string const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_tagExists__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; string temp2 ; bool result; SWIG_check_num_args("ofxXmlSettings::tagExists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::tagExists",1,"ofxXmlSettings const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::tagExists",2,"string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_tagExists",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)((ofxXmlSettings const *)arg1)->tagExists((string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_tagExists(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_XmlSettings_tagExists__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_XmlSettings_tagExists__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'XmlSettings_tagExists'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxXmlSettings::tagExists(string const &,int) const\n"
  "    ofxXmlSettings::tagExists(string const &) const\n"); lua_error(L);return 0; }
static int _wrap_XmlSettings_clear(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  SWIG_check_num_args("ofxXmlSettings::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::clear",1,"ofxXmlSettings *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_clear",1,SWIGTYPE_p_ofxXmlSettings); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_getValue__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; string *arg3 = 0 ; int arg4 ; string temp2 ; string temp3 ; string result;
  SWIG_check_num_args("ofxXmlSettings::getValue",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::getValue",1,"ofxXmlSettings const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::getValue",2,"string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxXmlSettings::getValue",3,"string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxXmlSettings::getValue",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_getValue",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (int)lua_tonumber(L, 4);
  result = ((ofxXmlSettings const *)arg1)->getValue((string const &)*arg2,(string const &)*arg3,arg4);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_XmlSettings_getValue__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; string *arg3 = 0 ; string temp2 ; string temp3 ; string result;
  SWIG_check_num_args("ofxXmlSettings::getValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::getValue",1,"ofxXmlSettings const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::getValue",2,"string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxXmlSettings::getValue",3,"string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_getValue",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = ((ofxXmlSettings const *)arg1)->getValue((string const &)*arg2,(string const &)*arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_XmlSettings_getValue(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          return _wrap_XmlSettings_getValue__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_XmlSettings_getValue__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'XmlSettings_getValue'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxXmlSettings::getValue(string const &,string const &,int) const\n"
  "    ofxXmlSettings::getValue(string const &,string const &) const\n"); lua_error(L);return 0; }
static int _wrap_XmlSettings_setValue__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; string *arg3 = 0 ; int arg4 ; string temp2 ; string temp3 ; int result;
  SWIG_check_num_args("ofxXmlSettings::setValue",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::setValue",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::setValue",2,"string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxXmlSettings::setValue",3,"string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxXmlSettings::setValue",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_setValue",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (int)lua_tonumber(L, 4); result = (int)(arg1)->setValue((string const &)*arg2,(string const &)*arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_setValue__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; string *arg3 = 0 ; string temp2 ; string temp3 ; int result;
  SWIG_check_num_args("ofxXmlSettings::setValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::setValue",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::setValue",2,"string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxXmlSettings::setValue",3,"string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_setValue",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (int)(arg1)->setValue((string const &)*arg2,(string const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_setValue(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          return _wrap_XmlSettings_setValue__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_XmlSettings_setValue__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'XmlSettings_setValue'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxXmlSettings::setValue(string const &,string const &,int)\n"
  "    ofxXmlSettings::setValue(string const &,string const &)\n"); lua_error(L);return 0; }
static int _wrap_XmlSettings_pushTag__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; int arg3 ; string temp2 ; bool result; SWIG_check_num_args("ofxXmlSettings::pushTag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::pushTag",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::pushTag",2,"string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxXmlSettings::pushTag",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_pushTag",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (int)lua_tonumber(L, 3);
  result = (bool)(arg1)->pushTag((string const &)*arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_pushTag__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; string temp2 ; bool result; SWIG_check_num_args("ofxXmlSettings::pushTag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::pushTag",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::pushTag",2,"string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_pushTag",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; result = (bool)(arg1)->pushTag((string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_pushTag(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { return _wrap_XmlSettings_pushTag__SWIG_1(L);}
       }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_XmlSettings_pushTag__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'XmlSettings_pushTag'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxXmlSettings::pushTag(string const &,int)\n"
  "    ofxXmlSettings::pushTag(string const &)\n"); lua_error(L);return 0; }
static int _wrap_XmlSettings_popTag(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ; int result;
  SWIG_check_num_args("ofxXmlSettings::popTag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::popTag",1,"ofxXmlSettings *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_popTag",1,SWIGTYPE_p_ofxXmlSettings); }  result = (int)(arg1)->popTag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_getPushLevel(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  int result; SWIG_check_num_args("ofxXmlSettings::getPushLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::getPushLevel",1,"ofxXmlSettings *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_getPushLevel",1,SWIGTYPE_p_ofxXmlSettings); }  result = (int)(arg1)->getPushLevel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_getNumTags(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; string temp2 ; int result; SWIG_check_num_args("ofxXmlSettings::getNumTags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::getNumTags",1,"ofxXmlSettings const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::getNumTags",2,"string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_getNumTags",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (int)((ofxXmlSettings const *)arg1)->getNumTags((string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_addValue(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; string *arg3 = 0 ; string temp2 ; string temp3 ; int result;
  SWIG_check_num_args("ofxXmlSettings::addValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::addValue",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::addValue",2,"string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxXmlSettings::addValue",3,"string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_addValue",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (int)(arg1)->addValue((string const &)*arg2,(string const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_addTag(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; string temp2 ; int result; SWIG_check_num_args("ofxXmlSettings::addTag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::addTag",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::addTag",2,"string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_addTag",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; result = (int)(arg1)->addTag((string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_addAttribute(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; string *arg3 = 0 ; string *arg4 = 0 ; int arg5 ; string temp2 ; string temp3 ; string temp4 ; int result;
  SWIG_check_num_args("ofxXmlSettings::addAttribute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::addAttribute",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::addAttribute",2,"string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxXmlSettings::addAttribute",3,"string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("ofxXmlSettings::addAttribute",4,"string const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxXmlSettings::addAttribute",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_addAttribute",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4; arg5 = (int)lua_tonumber(L, 5);
  result = (int)(arg1)->addAttribute((string const &)*arg2,(string const &)*arg3,(string const &)*arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_removeAttribute__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ; string *arg2 = 0 ; string *arg3 = 0 ; int arg4 ; string temp2 ; string temp3 ;
  SWIG_check_num_args("ofxXmlSettings::removeAttribute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::removeAttribute",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::removeAttribute",2,"string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxXmlSettings::removeAttribute",3,"string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxXmlSettings::removeAttribute",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_removeAttribute",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (int)lua_tonumber(L, 4); (arg1)->removeAttribute((string const &)*arg2,(string const &)*arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_removeAttribute__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ; string *arg2 = 0 ; string *arg3 = 0 ; string temp2 ; string temp3 ;
  SWIG_check_num_args("ofxXmlSettings::removeAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::removeAttribute",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::removeAttribute",2,"string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxXmlSettings::removeAttribute",3,"string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_removeAttribute",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->removeAttribute((string const &)*arg2,(string const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_XmlSettings_removeAttribute(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          return _wrap_XmlSettings_removeAttribute__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_XmlSettings_removeAttribute__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'XmlSettings_removeAttribute'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxXmlSettings::removeAttribute(string const &,string const &,int)\n"
  "    ofxXmlSettings::removeAttribute(string const &,string const &)\n"); lua_error(L);return 0; }
static int _wrap_XmlSettings_clearTagAttributes__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ; string *arg2 = 0 ; int arg3 ; string temp2 ;
  SWIG_check_num_args("ofxXmlSettings::clearTagAttributes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::clearTagAttributes",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::clearTagAttributes",2,"string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxXmlSettings::clearTagAttributes",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_clearTagAttributes",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (int)lua_tonumber(L, 3);
  (arg1)->clearTagAttributes((string const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_XmlSettings_clearTagAttributes__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ; string *arg2 = 0 ; string temp2 ;
  SWIG_check_num_args("ofxXmlSettings::clearTagAttributes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::clearTagAttributes",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::clearTagAttributes",2,"string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_clearTagAttributes",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; (arg1)->clearTagAttributes((string const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_clearTagAttributes(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_XmlSettings_clearTagAttributes__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_XmlSettings_clearTagAttributes__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'XmlSettings_clearTagAttributes'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxXmlSettings::clearTagAttributes(string const &,int)\n"
  "    ofxXmlSettings::clearTagAttributes(string const &)\n"); lua_error(L);return 0; }
static int _wrap_XmlSettings_getNumAttributes__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ; string *arg2 = 0 ; int arg3 ; string temp2 ; int result;
  SWIG_check_num_args("ofxXmlSettings::getNumAttributes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::getNumAttributes",1,"ofxXmlSettings const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::getNumAttributes",2,"string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofxXmlSettings::getNumAttributes",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_getNumAttributes",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (int)lua_tonumber(L, 3);
  result = (int)((ofxXmlSettings const *)arg1)->getNumAttributes((string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_getNumAttributes__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ; string *arg2 = 0 ; string temp2 ; int result;
  SWIG_check_num_args("ofxXmlSettings::getNumAttributes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::getNumAttributes",1,"ofxXmlSettings const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::getNumAttributes",2,"string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_getNumAttributes",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (int)((ofxXmlSettings const *)arg1)->getNumAttributes((string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_getNumAttributes(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_XmlSettings_getNumAttributes__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_XmlSettings_getNumAttributes__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'XmlSettings_getNumAttributes'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxXmlSettings::getNumAttributes(string const &,int) const\n"
  "    ofxXmlSettings::getNumAttributes(string const &) const\n"); lua_error(L);return 0; }
static int _wrap_XmlSettings_attributeExists__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ; string *arg2 = 0 ; string *arg3 = 0 ; int arg4 ; string temp2 ; string temp3 ;
  bool result; SWIG_check_num_args("ofxXmlSettings::attributeExists",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::attributeExists",1,"ofxXmlSettings const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::attributeExists",2,"string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxXmlSettings::attributeExists",3,"string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxXmlSettings::attributeExists",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_attributeExists",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)((ofxXmlSettings const *)arg1)->attributeExists((string const &)*arg2,(string const &)*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_attributeExists__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ; string *arg2 = 0 ; string *arg3 = 0 ; string temp2 ; string temp3 ; bool result;
  SWIG_check_num_args("ofxXmlSettings::attributeExists",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::attributeExists",1,"ofxXmlSettings const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::attributeExists",2,"string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxXmlSettings::attributeExists",3,"string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_attributeExists",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)((ofxXmlSettings const *)arg1)->attributeExists((string const &)*arg2,(string const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_attributeExists(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          return _wrap_XmlSettings_attributeExists__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_XmlSettings_attributeExists__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'XmlSettings_attributeExists'\n"
  "  Possible C/C++ prototypes are:\n" "    ofxXmlSettings::attributeExists(string const &,string const &,int) const\n"
  "    ofxXmlSettings::attributeExists(string const &,string const &) const\n"); lua_error(L);return 0; }
static int _wrap_XmlSettings_getAttributeNames__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ; string *arg2 = 0 ; std::vector< string > *arg3 = 0 ; int arg4 ; string temp2 ;
  bool result; SWIG_check_num_args("ofxXmlSettings::getAttributeNames",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::getAttributeNames",1,"ofxXmlSettings const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::getAttributeNames",2,"string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxXmlSettings::getAttributeNames",3,"std::vector< string > &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofxXmlSettings::getAttributeNames",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_getAttributeNames",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("XmlSettings_getAttributeNames",3,SWIGTYPE_p_std__vectorT_std__string_t); }  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)((ofxXmlSettings const *)arg1)->getAttributeNames((string const &)*arg2,*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_getAttributeNames__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ; string *arg2 = 0 ; std::vector< string > *arg3 = 0 ; string temp2 ; bool result;
  SWIG_check_num_args("ofxXmlSettings::getAttributeNames",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::getAttributeNames",1,"ofxXmlSettings const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::getAttributeNames",2,"string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofxXmlSettings::getAttributeNames",3,"std::vector< string > &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_getAttributeNames",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("XmlSettings_getAttributeNames",3,SWIGTYPE_p_std__vectorT_std__string_t); } 
  result = (bool)((ofxXmlSettings const *)arg1)->getAttributeNames((string const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_getAttributeNames(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_XmlSettings_getAttributeNames__SWIG_1(L);}  }  }  } 
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_XmlSettings_getAttributeNames__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'XmlSettings_getAttributeNames'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ofxXmlSettings::getAttributeNames(string const &,std::vector< string > &,int) const\n"
  "    ofxXmlSettings::getAttributeNames(string const &,std::vector< string > &) const\n"); lua_error(L);return 0; }
static int _wrap_XmlSettings_getAttribute__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ; string *arg2 = 0 ; string *arg3 = 0 ; string *arg4 = 0 ; int arg5 ;
  string temp2 ; string temp3 ; string temp4 ; string result; SWIG_check_num_args("ofxXmlSettings::getAttribute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::getAttribute",1,"ofxXmlSettings const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::getAttribute",2,"string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxXmlSettings::getAttribute",3,"string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("ofxXmlSettings::getAttribute",4,"string const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxXmlSettings::getAttribute",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_getAttribute",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4; arg5 = (int)lua_tonumber(L, 5);
  result = ((ofxXmlSettings const *)arg1)->getAttribute((string const &)*arg2,(string const &)*arg3,(string const &)*arg4,arg5);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_XmlSettings_getAttribute__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ; string *arg2 = 0 ; string *arg3 = 0 ; string *arg4 = 0 ; string temp2 ;
  string temp3 ; string temp4 ; string result; SWIG_check_num_args("ofxXmlSettings::getAttribute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::getAttribute",1,"ofxXmlSettings const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::getAttribute",2,"string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxXmlSettings::getAttribute",3,"string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("ofxXmlSettings::getAttribute",4,"string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_getAttribute",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = ((ofxXmlSettings const *)arg1)->getAttribute((string const &)*arg2,(string const &)*arg3,(string const &)*arg4);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_XmlSettings_getAttribute(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          { _v = lua_isstring(L,argv[3]); }  if (_v) { return _wrap_XmlSettings_getAttribute__SWIG_1(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofxXmlSettings, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          { _v = lua_isstring(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_XmlSettings_getAttribute__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'XmlSettings_getAttribute'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ofxXmlSettings::getAttribute(string const &,string const &,string const &,int) const\n"
  "    ofxXmlSettings::getAttribute(string const &,string const &,string const &) const\n"); lua_error(L);return 0; }
static int _wrap_XmlSettings_setAttribute(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; string *arg3 = 0 ; string *arg4 = 0 ; int arg5 ; string temp2 ; string temp3 ; string temp4 ; int result;
  SWIG_check_num_args("ofxXmlSettings::setAttribute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::setAttribute",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::setAttribute",2,"string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofxXmlSettings::setAttribute",3,"string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("ofxXmlSettings::setAttribute",4,"string const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofxXmlSettings::setAttribute",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_setAttribute",1,SWIGTYPE_p_ofxXmlSettings); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4; arg5 = (int)lua_tonumber(L, 5);
  result = (int)(arg1)->setAttribute((string const &)*arg2,(string const &)*arg3,(string const &)*arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_loadFromBuffer(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string arg2 ; bool result; SWIG_check_num_args("ofxXmlSettings::loadFromBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::loadFromBuffer",1,"ofxXmlSettings *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofxXmlSettings::loadFromBuffer",2,"string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_loadFromBuffer",1,SWIGTYPE_p_ofxXmlSettings); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (bool)(arg1)->loadFromBuffer(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_copyXmlToString(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  string *arg2 = 0 ; SWIG_check_num_args("ofxXmlSettings::copyXmlToString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::copyXmlToString",1,"ofxXmlSettings const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxXmlSettings::copyXmlToString",2,"string &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_copyXmlToString",1,SWIGTYPE_p_ofxXmlSettings); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("XmlSettings_copyXmlToString",2,SWIGTYPE_p_std__string); } 
  ((ofxXmlSettings const *)arg1)->copyXmlToString(*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_XmlSettings_doc_set(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  TiXmlDocument arg2 ; TiXmlDocument *argp2 ; SWIG_check_num_args("ofxXmlSettings::doc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::doc",1,"ofxXmlSettings *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofxXmlSettings::doc",2,"TiXmlDocument");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_doc_set",1,SWIGTYPE_p_ofxXmlSettings); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TiXmlDocument,0))){
    SWIG_fail_ptr("XmlSettings_doc_set",2,SWIGTYPE_p_TiXmlDocument); }  arg2 = *argp2; if (arg1) (arg1)->doc = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_doc_get(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  TiXmlDocument result; SWIG_check_num_args("ofxXmlSettings::doc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::doc",1,"ofxXmlSettings *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_doc_get",1,SWIGTYPE_p_ofxXmlSettings); }  result =  ((arg1)->doc); {
    TiXmlDocument * resultptr = new TiXmlDocument((const TiXmlDocument &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TiXmlDocument,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_bDocLoaded_set(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  bool arg2 ; SWIG_check_num_args("ofxXmlSettings::bDocLoaded",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::bDocLoaded",1,"ofxXmlSettings *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofxXmlSettings::bDocLoaded",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_bDocLoaded_set",1,SWIGTYPE_p_ofxXmlSettings); }  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->bDocLoaded = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_XmlSettings_bDocLoaded_get(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = (ofxXmlSettings *) 0 ;
  bool result; SWIG_check_num_args("ofxXmlSettings::bDocLoaded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofxXmlSettings::bDocLoaded",1,"ofxXmlSettings *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("XmlSettings_bDocLoaded_get",1,SWIGTYPE_p_ofxXmlSettings); }  result = (bool) ((arg1)->bDocLoaded);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_XmlSettings(void *obj) {
ofxXmlSettings *arg1 = (ofxXmlSettings *) obj;
delete arg1;
}
static int _proxy__wrap_new_XmlSettings(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_XmlSettings);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_XmlSettings_attributes[] = {
    { "doc", _wrap_XmlSettings_doc_get, _wrap_XmlSettings_doc_set },
    { "bDocLoaded", _wrap_XmlSettings_bDocLoaded_get, _wrap_XmlSettings_bDocLoaded_set },
    {0,0,0}
};
static swig_lua_method swig_XmlSettings_methods[]= {
    { "setVerbose", _wrap_XmlSettings_setVerbose},
    { "loadFile", _wrap_XmlSettings_loadFile},
    { "saveFile", _wrap_XmlSettings_saveFile},
    { "load", _wrap_XmlSettings_load},
    { "save", _wrap_XmlSettings_save},
    { "clearTagContents", _wrap_XmlSettings_clearTagContents},
    { "removeTag", _wrap_XmlSettings_removeTag},
    { "tagExists", _wrap_XmlSettings_tagExists},
    { "clear", _wrap_XmlSettings_clear},
    { "getValue", _wrap_XmlSettings_getValue},
    { "setValue", _wrap_XmlSettings_setValue},
    { "pushTag", _wrap_XmlSettings_pushTag},
    { "popTag", _wrap_XmlSettings_popTag},
    { "getPushLevel", _wrap_XmlSettings_getPushLevel},
    { "getNumTags", _wrap_XmlSettings_getNumTags},
    { "addValue", _wrap_XmlSettings_addValue},
    { "addTag", _wrap_XmlSettings_addTag},
    { "addAttribute", _wrap_XmlSettings_addAttribute},
    { "removeAttribute", _wrap_XmlSettings_removeAttribute},
    { "clearTagAttributes", _wrap_XmlSettings_clearTagAttributes},
    { "getNumAttributes", _wrap_XmlSettings_getNumAttributes},
    { "attributeExists", _wrap_XmlSettings_attributeExists},
    { "getAttributeNames", _wrap_XmlSettings_getAttributeNames},
    { "getAttribute", _wrap_XmlSettings_getAttribute},
    { "setAttribute", _wrap_XmlSettings_setAttribute},
    { "loadFromBuffer", _wrap_XmlSettings_loadFromBuffer},
    { "copyXmlToString", _wrap_XmlSettings_copyXmlToString},
    {0,0}
};
static swig_lua_method swig_XmlSettings_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_XmlSettings_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_XmlSettings_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_XmlSettings_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_XmlSettings_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_XmlSettings_Sf_SwigStatic = {
    "XmlSettings",
    swig_XmlSettings_Sf_SwigStatic_methods,
    swig_XmlSettings_Sf_SwigStatic_attributes,
    swig_XmlSettings_Sf_SwigStatic_constants,
    swig_XmlSettings_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_XmlSettings_bases[] = {0};
static const char *swig_XmlSettings_base_names[] = {0};
static swig_lua_class _wrap_class_XmlSettings = { "XmlSettings", "XmlSettings", &SWIGTYPE_p_ofxXmlSettings,_proxy__wrap_new_XmlSettings, swig_delete_XmlSettings, swig_XmlSettings_methods, swig_XmlSettings_attributes, &swig_XmlSettings_Sf_SwigStatic, swig_XmlSettings_meta, swig_XmlSettings_bases, swig_XmlSettings_base_names };

static int _wrap_ofSerialize(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = 0 ; ofAbstractParameter *arg2 = 0 ;
  SWIG_check_num_args("ofSerialize",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofSerialize",1,"ofxXmlSettings &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofSerialize",2,"ofAbstractParameter const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("ofSerialize",1,SWIGTYPE_p_ofxXmlSettings); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofAbstractParameter,0))){
    SWIG_fail_ptr("ofSerialize",2,SWIGTYPE_p_ofAbstractParameter); }  ofSerialize(*arg1,(ofAbstractParameter const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDeserialize(lua_State* L) { int SWIG_arg = 0; ofxXmlSettings *arg1 = 0 ; ofAbstractParameter *arg2 = 0 ;
  SWIG_check_num_args("ofDeserialize",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDeserialize",1,"ofxXmlSettings const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofDeserialize",2,"ofAbstractParameter &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofxXmlSettings,0))){
    SWIG_fail_ptr("ofDeserialize",1,SWIGTYPE_p_ofxXmlSettings); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofAbstractParameter,0))){
    SWIG_fail_ptr("ofDeserialize",2,SWIGTYPE_p_ofAbstractParameter); }  ofDeserialize((ofxXmlSettings const &)*arg1,*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "ofxPanelDefaultFilename", _wrap_ofxPanelDefaultFilename_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("TCP_MAX_MSG_SIZE", 512)},
    {SWIG_LUA_CONSTTAB_INT("INVALID_SOCKET", -1)},
    {SWIG_LUA_CONSTTAB_INT("SOCKET_ERROR", -1)},
    {SWIG_LUA_CONSTTAB_INT("SOCKET_TIMEOUT", -1-1)},
    {SWIG_LUA_CONSTTAB_INT("NO_TIMEOUT", 0xFFFF)},
    {SWIG_LUA_CONSTTAB_INT("OF_TCP_DEFAULT_TIMEOUT", 0xFFFF)},
    {SWIG_LUA_CONSTTAB_INT("TCP_MAX_CLIENTS", 32)},
    {SWIG_LUA_CONSTTAB_CHAR("OSC_TYPE_INT32", OFXOSC_TYPE_INT32)},
    {SWIG_LUA_CONSTTAB_CHAR("OSC_TYPE_INT64", OFXOSC_TYPE_INT64)},
    {SWIG_LUA_CONSTTAB_CHAR("OSC_TYPE_FLOAT", OFXOSC_TYPE_FLOAT)},
    {SWIG_LUA_CONSTTAB_CHAR("OSC_TYPE_DOUBLE", OFXOSC_TYPE_DOUBLE)},
    {SWIG_LUA_CONSTTAB_CHAR("OSC_TYPE_STRING", OFXOSC_TYPE_STRING)},
    {SWIG_LUA_CONSTTAB_CHAR("OSC_TYPE_SYMBOL", OFXOSC_TYPE_SYMBOL)},
    {SWIG_LUA_CONSTTAB_CHAR("OSC_TYPE_CHAR", OFXOSC_TYPE_CHAR)},
    {SWIG_LUA_CONSTTAB_CHAR("OSC_TYPE_MIDI_MESSAGE", OFXOSC_TYPE_MIDI_MESSAGE)},
    {SWIG_LUA_CONSTTAB_CHAR("OSC_TYPE_TRUE", OFXOSC_TYPE_TRUE)},
    {SWIG_LUA_CONSTTAB_CHAR("OSC_TYPE_FALSE", OFXOSC_TYPE_FALSE)},
    {SWIG_LUA_CONSTTAB_CHAR("OSC_TYPE_NONE", OFXOSC_TYPE_NONE)},
    {SWIG_LUA_CONSTTAB_CHAR("OSC_TYPE_TRIGGER", OFXOSC_TYPE_TRIGGER)},
    {SWIG_LUA_CONSTTAB_CHAR("OSC_TYPE_TIMETAG", OFXOSC_TYPE_TIMETAG)},
    {SWIG_LUA_CONSTTAB_CHAR("OSC_TYPE_BLOB", OFXOSC_TYPE_BLOB)},
    {SWIG_LUA_CONSTTAB_CHAR("OSC_TYPE_RGBA_COLOR", OFXOSC_TYPE_RGBA_COLOR)},
    {SWIG_LUA_CONSTTAB_INT("OSC_TYPE_INDEXOUTOFBOUNDS", OFXOSC_TYPE_INDEXOUTOFBOUNDS)},
    {SWIG_LUA_CONSTTAB_INT("MAX_TAG_VALUE_LENGTH_IN_CHARS", 1024)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "ofSerialize", _wrap_ofSerialize},
    { "ofDeserialize", _wrap_ofDeserialize},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_path,
&_wrap_class_AssimpMeshHelper,
&_wrap_class_AssimpAnimation,
&_wrap_class_AssimpTexture,
&_wrap_class_Toggle,
&_wrap_class_Button,
&_wrap_class_Label,
&_wrap_class_Panel,
&_wrap_class_TCPClient,
&_wrap_class_TCPManager,
&_wrap_class_TCPServer,
&_wrap_class_UDPManager,
&_wrap_class_CvImage,
&_wrap_class_CvBlob,
&_wrap_class_CvGrayscaleImage,
&_wrap_class_CvColorImage,
&_wrap_class_CvFloatImage,
&_wrap_class_CvShortImage,
&_wrap_class_CvContourFinder,
&_wrap_class_CvHaarFinder,
&_wrap_class_OscBundle,
&_wrap_class_OscMessage,
&_wrap_class_OscParameterSync,
&_wrap_class_OscReceiverSettings,
&_wrap_class_OscReceiver,
&_wrap_class_OscSenderSettings,
&_wrap_class_OscSender,
&_wrap_class_SVG,
&_wrap_class_VectorGraphics,
&_wrap_class_XmlSettings,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "ofx",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ofxOscArgNoneTo_p_ofxOscArgBool(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArgBool *)  ((ofxOscArgNone *) x));
}
static void *_p_ofxOscArgTriggerTo_p_ofxOscArgBool(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArgBool *)  ((ofxOscArgTrigger *) x));
}
static void *_p_ofxCvFloatImageTo_p_ofxCvImage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxCvImage *)  ((ofxCvFloatImage *) x));
}
static void *_p_ofxCvShortImageTo_p_ofxCvImage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxCvImage *)  ((ofxCvShortImage *) x));
}
static void *_p_ofxCvColorImageTo_p_ofxCvImage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxCvImage *)  ((ofxCvColorImage *) x));
}
static void *_p_ofxCvGrayscaleImageTo_p_ofxCvImage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxCvImage *)  ((ofxCvGrayscaleImage *) x));
}
static void *_p_ofxCvFloatImageTo_p_ofBaseImage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseImage *) (ofxCvImage *) ((ofxCvFloatImage *) x));
}
static void *_p_ofxCvShortImageTo_p_ofBaseImage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseImage *) (ofxCvImage *) ((ofxCvShortImage *) x));
}
static void *_p_ofxCvColorImageTo_p_ofBaseImage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseImage *) (ofxCvImage *) ((ofxCvColorImage *) x));
}
static void *_p_ofxCvImageTo_p_ofBaseImage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseImage *)  ((ofxCvImage *) x));
}
static void *_p_ofxCvGrayscaleImageTo_p_ofBaseImage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseImage *) (ofxCvImage *) ((ofxCvGrayscaleImage *) x));
}
static void *_p_ofxCvContourFinderTo_p_ofBaseDraws(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseDraws *)  ((ofxCvContourFinder *) x));
}
static void *_p_ofxOscArgSymbolTo_p_ofxOscArgString(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArgString *)  ((ofxOscArgSymbol *) x));
}
static void *_p_ofxOscArgBlobTo_p_ofxOscArg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArg *)  ((ofxOscArgBlob *) x));
}
static void *_p_ofxOscArgFloatTo_p_ofxOscArg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArg *)  ((ofxOscArgFloat *) x));
}
static void *_p_ofxOscArgTriggerTo_p_ofxOscArg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArg *) (ofxOscArgBool *) ((ofxOscArgTrigger *) x));
}
static void *_p_ofxOscArgCharTo_p_ofxOscArg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArg *)  ((ofxOscArgChar *) x));
}
static void *_p_ofxOscArgStringTo_p_ofxOscArg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArg *)  ((ofxOscArgString *) x));
}
static void *_p_ofxOscArgMidiMessageTo_p_ofxOscArg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArg *)  ((ofxOscArgMidiMessage *) x));
}
static void *_p_ofxOscArgBoolTo_p_ofxOscArg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArg *)  ((ofxOscArgBool *) x));
}
static void *_p_ofxOscArgNoneTo_p_ofxOscArg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArg *) (ofxOscArgBool *) ((ofxOscArgNone *) x));
}
static void *_p_ofxOscArgInt64To_p_ofxOscArg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArg *)  ((ofxOscArgInt64 *) x));
}
static void *_p_ofxOscArgIntTo_p_ofxOscArg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArg *) (ofxOscArgInt32 *) ((ofxOscArgInt *) x));
}
static void *_p_ofxOscArgInt32To_p_ofxOscArg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArg *)  ((ofxOscArgInt32 *) x));
}
static void *_p_ofxOscArgRgbaColorTo_p_ofxOscArg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArg *) (ofxOscArgMidiMessage *) ((ofxOscArgRgbaColor *) x));
}
static void *_p_ofxOscArgTimetagTo_p_ofxOscArg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArg *)  ((ofxOscArgTimetag *) x));
}
static void *_p_ofxOscArgDoubleTo_p_ofxOscArg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArg *)  ((ofxOscArgDouble *) x));
}
static void *_p_ofxOscArgSymbolTo_p_ofxOscArg(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArg *) (ofxOscArgString *) ((ofxOscArgSymbol *) x));
}
static void *_p_ofxButtonTo_p_ofxToggle(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxToggle *)  ((ofxButton *) x));
}
static void *_p_ofxButtonTo_p_ofxBaseGui(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxBaseGui *) (ofxToggle *) ((ofxButton *) x));
}
static void *_p_ofxToggleTo_p_ofxBaseGui(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxBaseGui *)  ((ofxToggle *) x));
}
static void *_p_ofxLabelTo_p_ofxBaseGui(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxBaseGui *)  ((ofxLabel *) x));
}
static void *_p_ofxOscArgIntTo_p_ofxOscArgInt32(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArgInt32 *)  ((ofxOscArgInt *) x));
}
static void *_p_ofxOscArgRgbaColorTo_p_ofxOscArgMidiMessage(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxOscArgMidiMessage *)  ((ofxOscArgRgbaColor *) x));
}
static void *_p_ofxOscReceiverTo_p_osc__OscPacketListener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((osc::OscPacketListener *)  ((ofxOscReceiver *) x));
}
static void *_p_ofxTCPServerTo_p_ofThread(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofThread *)  ((ofxTCPServer *) x));
}
static void *_p_ofxPanelTo_p_ofxGuiGroup(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofxGuiGroup *)  ((ofxPanel *) x));
}
static swig_type_info _swigt__p_CreEPS = {"_p_CreEPS", "CreEPS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InetAddr = {"_p_InetAddr", "InetAddr *|LPINETADDR", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IplImage = {"_p_IplImage", "IplImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TiXmlDocument = {"_p_TiXmlDocument", "TiXmlDocument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__ofxOscArgType = {"_p__ofxOscArgType", "enum _ofxOscArgType *|ofxOscArgType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_aiAnimation = {"_p_aiAnimation", "aiAnimation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_aiMesh = {"_p_aiMesh", "aiMesh *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64_t *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofAbstractParameter = {"_p_ofAbstractParameter", "ofAbstractParameter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseDraws = {"_p_ofBaseDraws", "ofBaseDraws *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseImage = {"_p_ofBaseImage", "ofBaseImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBlendMode = {"_p_ofBlendMode", "ofBlendMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBuffer = {"_p_ofBuffer", "ofBuffer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofDefaultVec3 = {"_p_ofDefaultVec3", "ofDefaultVec3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofEventT_void_t = {"_p_ofEventT_void_t", "ofEvent< void > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofFloatPixels = {"_p_ofFloatPixels", "ofFloatPixels *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofImage = {"_p_ofImage", "ofImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofLoopType = {"_p_ofLoopType", "ofLoopType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofMaterial = {"_p_ofMaterial", "ofMaterial *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofMatrix4x4 = {"_p_ofMatrix4x4", "ofMatrix4x4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofMesh = {"_p_ofMesh", "ofMesh *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofMouseEventArgs = {"_p_ofMouseEventArgs", "ofMouseEventArgs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofParameterGroup = {"_p_ofParameterGroup", "ofParameterGroup *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofParameterT_bool_t = {"_p_ofParameterT_bool_t", "ofParameter< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofParameterT_std__string_t = {"_p_ofParameterT_std__string_t", "ofParameter< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofParameterT_void_t = {"_p_ofParameterT_void_t", "ofParameter< void > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPath = {"_p_ofPath", "ofPath *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPixels = {"_p_ofPixels", "ofPixels *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPoint = {"_p_ofPoint", "ofPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofRectangle = {"_p_ofRectangle", "ofRectangle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofShortPixels = {"_p_ofShortPixels", "ofShortPixels *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofTexture = {"_p_ofTexture", "ofTexture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofThread = {"_p_ofThread", "ofThread *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofVbo = {"_p_ofVbo", "ofVbo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxAssimpAnimation = {"_p_ofxAssimpAnimation", "ofxAssimpAnimation *", 0, 0, (void*)&_wrap_class_AssimpAnimation, 0};
static swig_type_info _swigt__p_ofxAssimpMeshHelper = {"_p_ofxAssimpMeshHelper", "ofxAssimpMeshHelper *", 0, 0, (void*)&_wrap_class_AssimpMeshHelper, 0};
static swig_type_info _swigt__p_ofxAssimpTexture = {"_p_ofxAssimpTexture", "ofxAssimpTexture *", 0, 0, (void*)&_wrap_class_AssimpTexture, 0};
static swig_type_info _swigt__p_ofxBaseGui = {"_p_ofxBaseGui", "ofxBaseGui *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxButton = {"_p_ofxButton", "ofxButton *", 0, 0, (void*)&_wrap_class_Button, 0};
static swig_type_info _swigt__p_ofxCvBlob = {"_p_ofxCvBlob", "ofxCvBlob *", 0, 0, (void*)&_wrap_class_CvBlob, 0};
static swig_type_info _swigt__p_ofxCvColorImage = {"_p_ofxCvColorImage", "ofxCvColorImage *", 0, 0, (void*)&_wrap_class_CvColorImage, 0};
static swig_type_info _swigt__p_ofxCvContourFinder = {"_p_ofxCvContourFinder", "ofxCvContourFinder *", 0, 0, (void*)&_wrap_class_CvContourFinder, 0};
static swig_type_info _swigt__p_ofxCvFloatImage = {"_p_ofxCvFloatImage", "ofxCvFloatImage *", 0, 0, (void*)&_wrap_class_CvFloatImage, 0};
static swig_type_info _swigt__p_ofxCvGrayscaleImage = {"_p_ofxCvGrayscaleImage", "ofxCvGrayscaleImage *", 0, 0, (void*)&_wrap_class_CvGrayscaleImage, 0};
static swig_type_info _swigt__p_ofxCvHaarFinder = {"_p_ofxCvHaarFinder", "ofxCvHaarFinder *", 0, 0, (void*)&_wrap_class_CvHaarFinder, 0};
static swig_type_info _swigt__p_ofxCvImage = {"_p_ofxCvImage", "ofxCvImage *", 0, 0, (void*)&_wrap_class_CvImage, 0};
static swig_type_info _swigt__p_ofxCvShortImage = {"_p_ofxCvShortImage", "ofxCvShortImage *", 0, 0, (void*)&_wrap_class_CvShortImage, 0};
static swig_type_info _swigt__p_ofxGuiGroup = {"_p_ofxGuiGroup", "ofxGuiGroup *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxInputFieldT_float_t = {"_p_ofxInputFieldT_float_t", "ofxInputField< float > *|ofxFloatField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxInputFieldT_int_t = {"_p_ofxInputFieldT_int_t", "ofxIntField *|ofxInputField< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxInputFieldT_std__string_t = {"_p_ofxInputFieldT_std__string_t", "ofxInputField< std::string > *|ofxTextField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxLabel = {"_p_ofxLabel", "ofxLabel *", 0, 0, (void*)&_wrap_class_Label, 0};
static swig_type_info _swigt__p_ofxOscArg = {"_p_ofxOscArg", "ofxOscArg *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxOscArgBlob = {"_p_ofxOscArgBlob", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofxOscArgFloat = {"_p_ofxOscArgFloat", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofxOscArgTrigger = {"_p_ofxOscArgTrigger", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofxOscArgChar = {"_p_ofxOscArgChar", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofxOscArgNone = {"_p_ofxOscArgNone", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofxOscArgInt64 = {"_p_ofxOscArgInt64", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofxOscArgInt = {"_p_ofxOscArgInt", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofxOscArgRgbaColor = {"_p_ofxOscArgRgbaColor", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofxOscArgTimetag = {"_p_ofxOscArgTimetag", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofxOscArgSymbol = {"_p_ofxOscArgSymbol", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofxOscArgDouble = {"_p_ofxOscArgDouble", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofxOscArgBool = {"_p_ofxOscArgBool", "ofxOscArgBool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxOscArgInt32 = {"_p_ofxOscArgInt32", "ofxOscArgInt32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxOscArgMidiMessage = {"_p_ofxOscArgMidiMessage", "ofxOscArgMidiMessage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxOscArgString = {"_p_ofxOscArgString", "ofxOscArgString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxOscBundle = {"_p_ofxOscBundle", "ofxOscBundle *", 0, 0, (void*)&_wrap_class_OscBundle, 0};
static swig_type_info _swigt__p_ofxOscMessage = {"_p_ofxOscMessage", "ofxOscMessage *", 0, 0, (void*)&_wrap_class_OscMessage, 0};
static swig_type_info _swigt__p_ofxOscParameterSync = {"_p_ofxOscParameterSync", "ofxOscParameterSync *", 0, 0, (void*)&_wrap_class_OscParameterSync, 0};
static swig_type_info _swigt__p_ofxOscReceiver = {"_p_ofxOscReceiver", "ofxOscReceiver *", 0, 0, (void*)&_wrap_class_OscReceiver, 0};
static swig_type_info _swigt__p_ofxOscReceiverSettings = {"_p_ofxOscReceiverSettings", "ofxOscReceiverSettings *", 0, 0, (void*)&_wrap_class_OscReceiverSettings, 0};
static swig_type_info _swigt__p_ofxOscSender = {"_p_ofxOscSender", "ofxOscSender *", 0, 0, (void*)&_wrap_class_OscSender, 0};
static swig_type_info _swigt__p_ofxOscSenderSettings = {"_p_ofxOscSenderSettings", "ofxOscSenderSettings *", 0, 0, (void*)&_wrap_class_OscSenderSettings, 0};
static swig_type_info _swigt__p_ofxPanel = {"_p_ofxPanel", "ofxPanel *", 0, 0, (void*)&_wrap_class_Panel, 0};
static swig_type_info _swigt__p_ofxSVG = {"_p_ofxSVG", "ofxSVG *", 0, 0, (void*)&_wrap_class_SVG, 0};
static swig_type_info _swigt__p_ofxSliderT_float_t = {"_p_ofxSliderT_float_t", "ofxSlider< float > *|ofxFloatSlider *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxSliderT_int_t = {"_p_ofxSliderT_int_t", "ofxIntSlider *|ofxSlider< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxTCPClient = {"_p_ofxTCPClient", "ofxTCPClient *", 0, 0, (void*)&_wrap_class_TCPClient, 0};
static swig_type_info _swigt__p_ofxTCPManager = {"_p_ofxTCPManager", "ofxTCPManager *", 0, 0, (void*)&_wrap_class_TCPManager, 0};
static swig_type_info _swigt__p_ofxTCPServer = {"_p_ofxTCPServer", "ofxTCPServer *", 0, 0, (void*)&_wrap_class_TCPServer, 0};
static swig_type_info _swigt__p_ofxTCPSettings = {"_p_ofxTCPSettings", "ofxTCPSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxToggle = {"_p_ofxToggle", "ofxToggle *", 0, 0, (void*)&_wrap_class_Toggle, 0};
static swig_type_info _swigt__p_ofxUDPManager = {"_p_ofxUDPManager", "ofxUDPManager *", 0, 0, (void*)&_wrap_class_UDPManager, 0};
static swig_type_info _swigt__p_ofxUDPSettings = {"_p_ofxUDPSettings", "ofxUDPSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofxVectorGraphics = {"_p_ofxVectorGraphics", "ofxVectorGraphics *", 0, 0, (void*)&_wrap_class_VectorGraphics, 0};
static swig_type_info _swigt__p_ofxXmlSettings = {"_p_ofxXmlSettings", "ofxXmlSettings *", 0, 0, (void*)&_wrap_class_XmlSettings, 0};
static swig_type_info _swigt__p_osc__OscPacketListener = {"_p_osc__OscPacketListener", "osc::OscPacketListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__filesystem__path = {"_p_std__filesystem__path", "std::filesystem::path *", 0, 0, (void*)&_wrap_class_path, 0};
static swig_type_info _swigt__p_std__shared_ptrT_aiScene_const_t = {"_p_std__shared_ptrT_aiScene_const_t", "std::shared_ptr< aiScene const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *|string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_std__vectorT_aiVector3D_t = {"_p_std__vectorT_aiVector3D_t", "std::vector< aiVector3D > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofDefaultVec3_t = {"_p_std__vectorT_ofDefaultVec3_t", "std::vector< ofDefaultVec3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofIndexType_t = {"_p_std__vectorT_ofIndexType_t", "std::vector< ofIndexType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofPath_t = {"_p_std__vectorT_ofPath_t", "std::vector< ofPath > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofxCvBlob_t = {"_p_std__vectorT_ofxCvBlob_t", "std::vector< ofxCvBlob > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *|std::vector< string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "size_t *|uint32_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64_t *|unsigned long long *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CreEPS,
  &_swigt__p_InetAddr,
  &_swigt__p_IplImage,
  &_swigt__p_TiXmlDocument,
  &_swigt__p__ofxOscArgType,
  &_swigt__p_aiAnimation,
  &_swigt__p_aiMesh,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_ofAbstractParameter,
  &_swigt__p_ofBaseDraws,
  &_swigt__p_ofBaseImage,
  &_swigt__p_ofBlendMode,
  &_swigt__p_ofBuffer,
  &_swigt__p_ofDefaultVec3,
  &_swigt__p_ofEventT_void_t,
  &_swigt__p_ofFloatPixels,
  &_swigt__p_ofImage,
  &_swigt__p_ofLoopType,
  &_swigt__p_ofMaterial,
  &_swigt__p_ofMatrix4x4,
  &_swigt__p_ofMesh,
  &_swigt__p_ofMouseEventArgs,
  &_swigt__p_ofParameterGroup,
  &_swigt__p_ofParameterT_bool_t,
  &_swigt__p_ofParameterT_std__string_t,
  &_swigt__p_ofParameterT_void_t,
  &_swigt__p_ofPath,
  &_swigt__p_ofPixels,
  &_swigt__p_ofPoint,
  &_swigt__p_ofRectangle,
  &_swigt__p_ofShortPixels,
  &_swigt__p_ofTexture,
  &_swigt__p_ofThread,
  &_swigt__p_ofVbo,
  &_swigt__p_ofxAssimpAnimation,
  &_swigt__p_ofxAssimpMeshHelper,
  &_swigt__p_ofxAssimpTexture,
  &_swigt__p_ofxBaseGui,
  &_swigt__p_ofxButton,
  &_swigt__p_ofxCvBlob,
  &_swigt__p_ofxCvColorImage,
  &_swigt__p_ofxCvContourFinder,
  &_swigt__p_ofxCvFloatImage,
  &_swigt__p_ofxCvGrayscaleImage,
  &_swigt__p_ofxCvHaarFinder,
  &_swigt__p_ofxCvImage,
  &_swigt__p_ofxCvShortImage,
  &_swigt__p_ofxGuiGroup,
  &_swigt__p_ofxInputFieldT_float_t,
  &_swigt__p_ofxInputFieldT_int_t,
  &_swigt__p_ofxInputFieldT_std__string_t,
  &_swigt__p_ofxLabel,
  &_swigt__p_ofxOscArg,
  &_swigt__p_ofxOscArgBlob,
  &_swigt__p_ofxOscArgBool,
  &_swigt__p_ofxOscArgChar,
  &_swigt__p_ofxOscArgDouble,
  &_swigt__p_ofxOscArgFloat,
  &_swigt__p_ofxOscArgInt,
  &_swigt__p_ofxOscArgInt32,
  &_swigt__p_ofxOscArgInt64,
  &_swigt__p_ofxOscArgMidiMessage,
  &_swigt__p_ofxOscArgNone,
  &_swigt__p_ofxOscArgRgbaColor,
  &_swigt__p_ofxOscArgString,
  &_swigt__p_ofxOscArgSymbol,
  &_swigt__p_ofxOscArgTimetag,
  &_swigt__p_ofxOscArgTrigger,
  &_swigt__p_ofxOscBundle,
  &_swigt__p_ofxOscMessage,
  &_swigt__p_ofxOscParameterSync,
  &_swigt__p_ofxOscReceiver,
  &_swigt__p_ofxOscReceiverSettings,
  &_swigt__p_ofxOscSender,
  &_swigt__p_ofxOscSenderSettings,
  &_swigt__p_ofxPanel,
  &_swigt__p_ofxSVG,
  &_swigt__p_ofxSliderT_float_t,
  &_swigt__p_ofxSliderT_int_t,
  &_swigt__p_ofxTCPClient,
  &_swigt__p_ofxTCPManager,
  &_swigt__p_ofxTCPServer,
  &_swigt__p_ofxTCPSettings,
  &_swigt__p_ofxToggle,
  &_swigt__p_ofxUDPManager,
  &_swigt__p_ofxUDPSettings,
  &_swigt__p_ofxVectorGraphics,
  &_swigt__p_ofxXmlSettings,
  &_swigt__p_osc__OscPacketListener,
  &_swigt__p_std__filesystem__path,
  &_swigt__p_std__shared_ptrT_aiScene_const_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_aiVector3D_t,
  &_swigt__p_std__vectorT_ofDefaultVec3_t,
  &_swigt__p_std__vectorT_ofIndexType_t,
  &_swigt__p_std__vectorT_ofPath_t,
  &_swigt__p_std__vectorT_ofxCvBlob_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
};

static swig_cast_info _swigc__p_CreEPS[] = {  {&_swigt__p_CreEPS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InetAddr[] = {  {&_swigt__p_InetAddr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IplImage[] = {  {&_swigt__p_IplImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiXmlDocument[] = {  {&_swigt__p_TiXmlDocument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__ofxOscArgType[] = {  {&_swigt__p__ofxOscArgType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_aiAnimation[] = {  {&_swigt__p_aiAnimation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_aiMesh[] = {  {&_swigt__p_aiMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofAbstractParameter[] = {  {&_swigt__p_ofAbstractParameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseDraws[] = {  {&_swigt__p_ofxCvContourFinder, _p_ofxCvContourFinderTo_p_ofBaseDraws, 0, 0},  {&_swigt__p_ofBaseDraws, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseImage[] = {  {&_swigt__p_ofxCvFloatImage, _p_ofxCvFloatImageTo_p_ofBaseImage, 0, 0},  {&_swigt__p_ofxCvShortImage, _p_ofxCvShortImageTo_p_ofBaseImage, 0, 0},  {&_swigt__p_ofxCvColorImage, _p_ofxCvColorImageTo_p_ofBaseImage, 0, 0},  {&_swigt__p_ofxCvImage, _p_ofxCvImageTo_p_ofBaseImage, 0, 0},  {&_swigt__p_ofBaseImage, 0, 0, 0},  {&_swigt__p_ofxCvGrayscaleImage, _p_ofxCvGrayscaleImageTo_p_ofBaseImage, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBlendMode[] = {  {&_swigt__p_ofBlendMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBuffer[] = {  {&_swigt__p_ofBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofDefaultVec3[] = {  {&_swigt__p_ofDefaultVec3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofEventT_void_t[] = {  {&_swigt__p_ofEventT_void_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofFloatPixels[] = {  {&_swigt__p_ofFloatPixels, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofImage[] = {  {&_swigt__p_ofImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofLoopType[] = {  {&_swigt__p_ofLoopType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMaterial[] = {  {&_swigt__p_ofMaterial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMatrix4x4[] = {  {&_swigt__p_ofMatrix4x4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMesh[] = {  {&_swigt__p_ofMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMouseEventArgs[] = {  {&_swigt__p_ofMouseEventArgs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofParameterGroup[] = {  {&_swigt__p_ofParameterGroup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofParameterT_bool_t[] = {  {&_swigt__p_ofParameterT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofParameterT_std__string_t[] = {  {&_swigt__p_ofParameterT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofParameterT_void_t[] = {  {&_swigt__p_ofParameterT_void_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPath[] = {  {&_swigt__p_ofPath, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPixels[] = {  {&_swigt__p_ofPixels, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPoint[] = {  {&_swigt__p_ofPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofRectangle[] = {  {&_swigt__p_ofRectangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofShortPixels[] = {  {&_swigt__p_ofShortPixels, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTexture[] = {  {&_swigt__p_ofTexture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofThread[] = {  {&_swigt__p_ofThread, 0, 0, 0},  {&_swigt__p_ofxTCPServer, _p_ofxTCPServerTo_p_ofThread, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVbo[] = {  {&_swigt__p_ofVbo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxAssimpAnimation[] = {  {&_swigt__p_ofxAssimpAnimation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxAssimpMeshHelper[] = {  {&_swigt__p_ofxAssimpMeshHelper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxAssimpTexture[] = {  {&_swigt__p_ofxAssimpTexture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxBaseGui[] = {  {&_swigt__p_ofxButton, _p_ofxButtonTo_p_ofxBaseGui, 0, 0},  {&_swigt__p_ofxToggle, _p_ofxToggleTo_p_ofxBaseGui, 0, 0},  {&_swigt__p_ofxLabel, _p_ofxLabelTo_p_ofxBaseGui, 0, 0},  {&_swigt__p_ofxBaseGui, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxButton[] = {  {&_swigt__p_ofxButton, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxCvBlob[] = {  {&_swigt__p_ofxCvBlob, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxCvColorImage[] = {  {&_swigt__p_ofxCvColorImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxCvContourFinder[] = {  {&_swigt__p_ofxCvContourFinder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxCvFloatImage[] = {  {&_swigt__p_ofxCvFloatImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxCvGrayscaleImage[] = {  {&_swigt__p_ofxCvGrayscaleImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxCvHaarFinder[] = {  {&_swigt__p_ofxCvHaarFinder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxCvImage[] = {  {&_swigt__p_ofxCvFloatImage, _p_ofxCvFloatImageTo_p_ofxCvImage, 0, 0},  {&_swigt__p_ofxCvShortImage, _p_ofxCvShortImageTo_p_ofxCvImage, 0, 0},  {&_swigt__p_ofxCvColorImage, _p_ofxCvColorImageTo_p_ofxCvImage, 0, 0},  {&_swigt__p_ofxCvImage, 0, 0, 0},  {&_swigt__p_ofxCvGrayscaleImage, _p_ofxCvGrayscaleImageTo_p_ofxCvImage, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxCvShortImage[] = {  {&_swigt__p_ofxCvShortImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxGuiGroup[] = {  {&_swigt__p_ofxGuiGroup, 0, 0, 0},  {&_swigt__p_ofxPanel, _p_ofxPanelTo_p_ofxGuiGroup, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxInputFieldT_float_t[] = {  {&_swigt__p_ofxInputFieldT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxInputFieldT_int_t[] = {  {&_swigt__p_ofxInputFieldT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxInputFieldT_std__string_t[] = {  {&_swigt__p_ofxInputFieldT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxLabel[] = {  {&_swigt__p_ofxLabel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscArgBlob[] = {{&_swigt__p_ofxOscArgBlob, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscArgFloat[] = {{&_swigt__p_ofxOscArgFloat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscArgTrigger[] = {{&_swigt__p_ofxOscArgTrigger, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscArgChar[] = {{&_swigt__p_ofxOscArgChar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscArgNone[] = {{&_swigt__p_ofxOscArgNone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscArgInt64[] = {{&_swigt__p_ofxOscArgInt64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscArgInt[] = {{&_swigt__p_ofxOscArgInt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscArgRgbaColor[] = {{&_swigt__p_ofxOscArgRgbaColor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscArgTimetag[] = {{&_swigt__p_ofxOscArgTimetag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscArgSymbol[] = {{&_swigt__p_ofxOscArgSymbol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscArgDouble[] = {{&_swigt__p_ofxOscArgDouble, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscArg[] = {  {&_swigt__p_ofxOscArgBlob, _p_ofxOscArgBlobTo_p_ofxOscArg, 0, 0},  {&_swigt__p_ofxOscArgFloat, _p_ofxOscArgFloatTo_p_ofxOscArg, 0, 0},  {&_swigt__p_ofxOscArgTrigger, _p_ofxOscArgTriggerTo_p_ofxOscArg, 0, 0},  {&_swigt__p_ofxOscArgChar, _p_ofxOscArgCharTo_p_ofxOscArg, 0, 0},  {&_swigt__p_ofxOscArgString, _p_ofxOscArgStringTo_p_ofxOscArg, 0, 0},  {&_swigt__p_ofxOscArgMidiMessage, _p_ofxOscArgMidiMessageTo_p_ofxOscArg, 0, 0},  {&_swigt__p_ofxOscArg, 0, 0, 0},  {&_swigt__p_ofxOscArgBool, _p_ofxOscArgBoolTo_p_ofxOscArg, 0, 0},  {&_swigt__p_ofxOscArgNone, _p_ofxOscArgNoneTo_p_ofxOscArg, 0, 0},  {&_swigt__p_ofxOscArgInt64, _p_ofxOscArgInt64To_p_ofxOscArg, 0, 0},  {&_swigt__p_ofxOscArgInt, _p_ofxOscArgIntTo_p_ofxOscArg, 0, 0},  {&_swigt__p_ofxOscArgRgbaColor, _p_ofxOscArgRgbaColorTo_p_ofxOscArg, 0, 0},  {&_swigt__p_ofxOscArgInt32, _p_ofxOscArgInt32To_p_ofxOscArg, 0, 0},  {&_swigt__p_ofxOscArgTimetag, _p_ofxOscArgTimetagTo_p_ofxOscArg, 0, 0},  {&_swigt__p_ofxOscArgSymbol, _p_ofxOscArgSymbolTo_p_ofxOscArg, 0, 0},  {&_swigt__p_ofxOscArgDouble, _p_ofxOscArgDoubleTo_p_ofxOscArg, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscArgBool[] = {  {&_swigt__p_ofxOscArgBool, 0, 0, 0},  {&_swigt__p_ofxOscArgNone, _p_ofxOscArgNoneTo_p_ofxOscArgBool, 0, 0},  {&_swigt__p_ofxOscArgTrigger, _p_ofxOscArgTriggerTo_p_ofxOscArgBool, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscArgInt32[] = {  {&_swigt__p_ofxOscArgInt32, 0, 0, 0},  {&_swigt__p_ofxOscArgInt, _p_ofxOscArgIntTo_p_ofxOscArgInt32, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscArgMidiMessage[] = {  {&_swigt__p_ofxOscArgRgbaColor, _p_ofxOscArgRgbaColorTo_p_ofxOscArgMidiMessage, 0, 0},  {&_swigt__p_ofxOscArgMidiMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscArgString[] = {  {&_swigt__p_ofxOscArgSymbol, _p_ofxOscArgSymbolTo_p_ofxOscArgString, 0, 0},  {&_swigt__p_ofxOscArgString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscBundle[] = {  {&_swigt__p_ofxOscBundle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscMessage[] = {  {&_swigt__p_ofxOscMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscParameterSync[] = {  {&_swigt__p_ofxOscParameterSync, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscReceiver[] = {  {&_swigt__p_ofxOscReceiver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscReceiverSettings[] = {  {&_swigt__p_ofxOscReceiverSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscSender[] = {  {&_swigt__p_ofxOscSender, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxOscSenderSettings[] = {  {&_swigt__p_ofxOscSenderSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxPanel[] = {  {&_swigt__p_ofxPanel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxSVG[] = {  {&_swigt__p_ofxSVG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxSliderT_float_t[] = {  {&_swigt__p_ofxSliderT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxSliderT_int_t[] = {  {&_swigt__p_ofxSliderT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTCPClient[] = {  {&_swigt__p_ofxTCPClient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTCPManager[] = {  {&_swigt__p_ofxTCPManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTCPServer[] = {  {&_swigt__p_ofxTCPServer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxTCPSettings[] = {  {&_swigt__p_ofxTCPSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxToggle[] = {  {&_swigt__p_ofxButton, _p_ofxButtonTo_p_ofxToggle, 0, 0},  {&_swigt__p_ofxToggle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxUDPManager[] = {  {&_swigt__p_ofxUDPManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxUDPSettings[] = {  {&_swigt__p_ofxUDPSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxVectorGraphics[] = {  {&_swigt__p_ofxVectorGraphics, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofxXmlSettings[] = {  {&_swigt__p_ofxXmlSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_osc__OscPacketListener[] = {  {&_swigt__p_ofxOscReceiver, _p_ofxOscReceiverTo_p_osc__OscPacketListener, 0, 0},  {&_swigt__p_osc__OscPacketListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__filesystem__path[] = {  {&_swigt__p_std__filesystem__path, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_aiScene_const_t[] = {  {&_swigt__p_std__shared_ptrT_aiScene_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_aiVector3D_t[] = {  {&_swigt__p_std__vectorT_aiVector3D_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofDefaultVec3_t[] = {  {&_swigt__p_std__vectorT_ofDefaultVec3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofIndexType_t[] = {  {&_swigt__p_std__vectorT_ofIndexType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofPath_t[] = {  {&_swigt__p_std__vectorT_ofPath_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofxCvBlob_t[] = {  {&_swigt__p_std__vectorT_ofxCvBlob_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CreEPS,
  _swigc__p_InetAddr,
  _swigc__p_IplImage,
  _swigc__p_TiXmlDocument,
  _swigc__p__ofxOscArgType,
  _swigc__p_aiAnimation,
  _swigc__p_aiMesh,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_ofAbstractParameter,
  _swigc__p_ofBaseDraws,
  _swigc__p_ofBaseImage,
  _swigc__p_ofBlendMode,
  _swigc__p_ofBuffer,
  _swigc__p_ofDefaultVec3,
  _swigc__p_ofEventT_void_t,
  _swigc__p_ofFloatPixels,
  _swigc__p_ofImage,
  _swigc__p_ofLoopType,
  _swigc__p_ofMaterial,
  _swigc__p_ofMatrix4x4,
  _swigc__p_ofMesh,
  _swigc__p_ofMouseEventArgs,
  _swigc__p_ofParameterGroup,
  _swigc__p_ofParameterT_bool_t,
  _swigc__p_ofParameterT_std__string_t,
  _swigc__p_ofParameterT_void_t,
  _swigc__p_ofPath,
  _swigc__p_ofPixels,
  _swigc__p_ofPoint,
  _swigc__p_ofRectangle,
  _swigc__p_ofShortPixels,
  _swigc__p_ofTexture,
  _swigc__p_ofThread,
  _swigc__p_ofVbo,
  _swigc__p_ofxAssimpAnimation,
  _swigc__p_ofxAssimpMeshHelper,
  _swigc__p_ofxAssimpTexture,
  _swigc__p_ofxBaseGui,
  _swigc__p_ofxButton,
  _swigc__p_ofxCvBlob,
  _swigc__p_ofxCvColorImage,
  _swigc__p_ofxCvContourFinder,
  _swigc__p_ofxCvFloatImage,
  _swigc__p_ofxCvGrayscaleImage,
  _swigc__p_ofxCvHaarFinder,
  _swigc__p_ofxCvImage,
  _swigc__p_ofxCvShortImage,
  _swigc__p_ofxGuiGroup,
  _swigc__p_ofxInputFieldT_float_t,
  _swigc__p_ofxInputFieldT_int_t,
  _swigc__p_ofxInputFieldT_std__string_t,
  _swigc__p_ofxLabel,
  _swigc__p_ofxOscArg,
  _swigc__p_ofxOscArgBlob,
  _swigc__p_ofxOscArgBool,
  _swigc__p_ofxOscArgChar,
  _swigc__p_ofxOscArgDouble,
  _swigc__p_ofxOscArgFloat,
  _swigc__p_ofxOscArgInt,
  _swigc__p_ofxOscArgInt32,
  _swigc__p_ofxOscArgInt64,
  _swigc__p_ofxOscArgMidiMessage,
  _swigc__p_ofxOscArgNone,
  _swigc__p_ofxOscArgRgbaColor,
  _swigc__p_ofxOscArgString,
  _swigc__p_ofxOscArgSymbol,
  _swigc__p_ofxOscArgTimetag,
  _swigc__p_ofxOscArgTrigger,
  _swigc__p_ofxOscBundle,
  _swigc__p_ofxOscMessage,
  _swigc__p_ofxOscParameterSync,
  _swigc__p_ofxOscReceiver,
  _swigc__p_ofxOscReceiverSettings,
  _swigc__p_ofxOscSender,
  _swigc__p_ofxOscSenderSettings,
  _swigc__p_ofxPanel,
  _swigc__p_ofxSVG,
  _swigc__p_ofxSliderT_float_t,
  _swigc__p_ofxSliderT_int_t,
  _swigc__p_ofxTCPClient,
  _swigc__p_ofxTCPManager,
  _swigc__p_ofxTCPServer,
  _swigc__p_ofxTCPSettings,
  _swigc__p_ofxToggle,
  _swigc__p_ofxUDPManager,
  _swigc__p_ofxUDPSettings,
  _swigc__p_ofxVectorGraphics,
  _swigc__p_ofxXmlSettings,
  _swigc__p_osc__OscPacketListener,
  _swigc__p_std__filesystem__path,
  _swigc__p_std__shared_ptrT_aiScene_const_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_aiVector3D_t,
  _swigc__p_std__vectorT_ofDefaultVec3_t,
  _swigc__p_std__vectorT_ofIndexType_t,
  _swigc__p_std__vectorT_ofPath_t,
  _swigc__p_std__vectorT_ofxCvBlob_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "\n"
  "\n"
  "-- this isn't wrapped correctly, so set it here\n"
  "of.CLOSE = true\n"
  "\n"
  "-- handle typedefs which swig doesn't wrap\n"
  "of.Point = of.Vec3f\n"
  "\n"
  "-- class.lua\n"
  "-- Compatible with Lua 5.1 (not 5.0).\n"
  "function class(base, __init)\n"
  "   local c = {}    -- a new class instance\n"
  "   if not __init and type(base) == 'function' then\n"
  "	  __init = base\n"
  "	  base = nil\n"
  "   elseif type(base) == 'table' then\n"
  "	-- our new class is a shallow copy of the base class!\n"
  "	  for i,v in pairs(base) do\n"
  "		 c[i] = v\n"
  "	  end\n"
  "	  c._base = base\n"
  "   end\n"
  "   -- the class will be the metatable for all its objects,\n"
  "   -- and they will look up their methods in it.\n"
  "   c.__index = c\n"
  "\n"
  "   -- expose a constructor which can be called by <classname>(<args>)\n"
  "   local mt = {}\n"
  "   mt.__call = function(class_tbl, ...)\n"
  "   local obj = {}\n"
  "   setmetatable(obj,c)\n"
  "   if class_tbl.__init then\n"
  "	  class_tbl.__init(obj,...)\n"
  "   else\n"
  "	  -- make sure that any stuff from the base class is initialized!\n"
  "	  if base and base.__init then\n"
  "	  base.__init(obj, ...)\n"
  "	  end\n"
  "   end\n"
  "   return obj\n"
  "   end\n"
  "   c.__init = __init\n"
  "   c.is_a = function(self, klass)\n"
  "	  local m = getmetatable(self)\n"
  "	  while m do\n"
  "		 if m == klass then return true end\n"
  "		 m = m._base\n"
  "	  end\n"
  "	  return false\n"
  "   end\n"
  "   setmetatable(c, mt)\n"
  "   return c\n"
  "end";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

